[{"categories":["Product Development"],"contents":"－目錄  數位化轉型的定義 ＆ 什麼是 DDD ? 數位化轉型面臨的問題 數位化轉型實務經驗（進入軟體開發的過程） 數位化轉型的小魔法（Tips）  工作經驗當中，打造新產品或是把當前既有的服務做數位化轉型，在做數位化轉型如果懂得 DDD（Domain Driven Design）， 這對產品開發有絕對的幫助，甚至可以少浪費一些時間去摸索原先的服務（流程、習慣、文化） \u0026hellip;\n 這篇文章主要是探討數位化轉型的過程，以及開始進入軟體開發的初期階段所需要留意的細節。\n不會提到 RD 把 Domain Knowledge（知識領域）DI（注入）到程式碼當中的細節。\n 數位化轉型的定義 ＆ 什麼是 DDD ?  愛你既有的產業、認識你既有的環境，在數位化轉型的過程中，不僅是 PM, 更是每位夥伴都該有的共識。\n 數位化轉型的定義就是把既有的產品，轉型以數位科技服務的過程。 舉例來說，火車票只能在火車售票台購買實體票券，而透過數位化轉型就能使用購買車票的服務軟體購買電子票券。\nDomain Knowledge（知識領域），它是數位轉型所圍繞的核心， 在既有的產品服務，一旦開始要做轉型會需要知道 Key Point(問題點)以及 Solution(解決方式)。 在一間公司，尤其是PM, RD若不懂這一塊的 Domain KnoHow（知識問題），那最終開發出來的產品會有很多問題，甚至是無法取代原先的服務方式。\nDomain Driven Design 是基於領域專業知識來解決複雜商業邏輯的軟體開發方法論。\nDDD注重以下三個重點：\n 跟 Domain Expert（專業領域專家） 合作並且定義出 Domain 的範圍及相關解決的方案。 切分 Domain（領域）為多個 SubDomain（子領域），並專注在核心SubDomain（子領域）。 透過一系列設計模式，把 Domain Knowledge（知識領域）注入到 Model（程式模型）中（本篇不探討）。  －數位化轉型面臨的問題 在導入數位轉型也不是一件容易的事情，因為會牽扯到幾個問題：\n 原有的產品服務是 toB 或 toC 既有團隊、公司組織的人事如何安排 需不需要雇用專業人士或請外包團隊協助開發數位系統  上述是數位轉型比較常見的問題，但在我經歷的產品開發過程，問題不單單只有這些 \u0026hellip;\n每個產業注重的面向、優先順序都不同，在極少與顧客互動的產業中，組織可能會先轉型營運流程的層面，透過結合數位科技簡化組織的管理以及部門與部門間的業務，導入新科技讓工程流程變得更有效率等。\n在金融、觀光、媒體產業等，組織可能會把重心放在價值主張，從根本層面的探討所提供的產品和服務，像媒體業的公司就會問出「我們是一個販售財經期刊的公司？還是一個提供顧客充足資訊與解析，讓顧客更好的洞悉市場生態，並做更理性且智慧的選擇的企業？」如果答案是後者，業者可能就會將更多的重心放在傳遞（Delivery）與顧客體驗的層面上。\n在數位領域中更成熟的組織，不僅轉型了其營運流程以及價值主張; 成為極為靈敏且以顧客體驗為核心的企業，數位成熟的組織更是建立了一整個數位生態，並從能力、文化、與整個生態系統上驅動轉型，成為一個不斷去挑戰、測試、並且極為靈敏的轉型組織。\n而像是麥肯錫、IBM 等組織常提起的數位再造（Digital Reinvention）則是一個組織核心價值的根本轉化。也是前面提到的，從根本層面探討目前提供的產品與服務，並重新定義價值主張。在這個階段，組織必須要徹底審視＆洞悉 User Journey（顧客旅程），並定義出需要被優化或是新增的環節點，再建立明確的策略。\n－數位化轉型實務經驗（進入軟體開發的過程） 以我在 Healthcare（醫療）領域，幫助醫院做數位轉型，把傳統的紙本病例轉變為電子病歷的經驗，進入軟體開發階段之前，就需要跟原有服務的專業人士（院長、護理師）做需求訪談，以便確定需求，最後需求確定完再整理好 Spec，需要給服務單位知道產品開發的範圍、時程，也同時讓軟體開發單位了解其中的 Domain Knowledge（知識領域）。\n 這裡也建議，若時間和客戶允許的話，安排時間長時間觀察原先的服務流程， 因為有些「細節」是只有使用者才知道，而這也是站在使用者角度去思考產品的易用性，而非主觀的認知，這是成為一個傑出的 PM 必須要學會的事情。\n 當 PM 把整理好的 Spec 交付給軟體開發單位，通常 PM 會開一份比較完整、具體的 PRD（後續再分享細節）給開發團隊，這份 PRD 會有：\n UserStory 完整描述功能的背景 實務上的 Business Logic（業務邏輯） UI相關文件（Prototype、WireFrame、Mockup）  而開發團隊會根據 UserStory、Business Logic、UI 拆分 Task、Subtask，任務會是一個具體的執行任務，Ex：UI Layout、Fetch API等各種待執行的技術任務。\n 開發團隊在實作階段，通常一但下手開始開發就停不下來了， 所以 PM 一定要交付具體明確的 PRD 以便團隊開發出預期的產品且實際解決使用者的問題。\n －數位化轉型的小魔法（Tips）  長時間觀察客戶的操作流程 每天問使用者三個問題（Domain KnoHow、使用經驗等） 每個月和使用者做 User research（深層理解用戶行為） 定期參加相關產業的活動，也同時理解 Competitor 的產品  －Ref  Wiki Domain-Driven Design: What is it and how do you use it? OOSGA  ","permalink":"https://peterpowerfullife.com/blog/domain-driven-design-01/","tags":null,"title":"數位化轉型不可不知 Domain Driven Design"},{"categories":["Product Development"],"contents":"－目錄  什麼是 Design System？ Design System 的優缺點？ 為什麼打造 Component Library, 最好先搞懂 Design System？ 如何建構 Design System？  －什麼是 Design System？ Design System 其實就像台灣國小生的生字簿：\n 筆劃（設計風格規範） 部首（重複使用的介面設計元素(UI element)） 分類（重複使用的互動設計元素(像是檔案管理)）, Ex: 方向（上下左右）  Design System 就是一種規範、標準，只要遵循它的規則基本上不太會出錯。 它在任何領域無所不在，但不只是視覺介面設計的風格規範而已，更是連貫點、線、面的體現出產品本身，以及產品開發階段開發者所遵循的設計語言。\n－Design System 的優缺點？ ＊優點  因為有一個規範可循，可以減少設計和技術的溝通成本（即使團隊架構逐漸龐大、產品跨國開發） 一致性的設計語言，專注在用戶需求、產品本身，以利於產品開發。  ＊缺點  限制創意 建構初期時間壓力大，需要在短時間內思考非常地深遠，以便後續產品開發、重構   其實很有趣，雖說它減少產品開發中的溝通成本，卻也在建構初期耗費設計上的時間、心力（請給公司設計部門一個讚）\n －為什麼打造 Component Library, 最好先搞懂 Design System？ 如果以軟體科技領域來說，Design System 可能會被歸類為設計部門的職責，但我認為只要是開發自有產品，而不是一般接案、代工公司，那基本上公司從上到下都要知道 Design System，因為它會在產品投入開發後發揮強大的影響力！甚至在跨產品團隊逐漸擴大成為一種標誌性識別。\n＊身份不同會有不同的體悟  對 Designer 而言，Design System 是一種復用的元件集合。 對 RD 而言，Component 是遵循 Design System 所開發出的 UI 復用元件。  \u0026ndash;\n一旦 Design System 建立完成後，RD 就能夠遵循 Design System 開發出團隊所需要的共用元件， 但在開發共用元件之前，如果 RD 不知道 Design System 就埋頭開始開發，那麼在不懂的情況下所開發出的元件，可能會造成視覺落差、破壞中長期產品的標誌性識別。\n這也是為什麼打造 Component Library 之前，最好先搞懂 Design System 的原因之一。\n－如何建構 Design System？  本身不是專業設計師，僅以跟設計師合作所得知的訊息來做記錄和分享，若有得罪之處和誤解，請見諒～\n 建構 Design System 需要同時思考到產品本身、產品標誌性識別甚至是 CIS，一但有這些共識，就會開始以下步驟：\n  盤點 Visual Audit (視覺審核)\n 確認元素和品質    建立 Visual Design Language(視覺設計共同語言)\n 顏色 尺寸 字體    打造 UI Library\n  Documentation（文件化）\n 標準建立完的最後一步就是文件化以利後續溝通，至於用什麼方式呈現就單看團隊的決定。    \u0026ndash;\nUI Library 建構的工具百百種，這裡不一一紀錄，可以參考：\n The Top 89 Design Systems Open Source Projects Figma Community Flexport\u0026rsquo;s design system  Ref  Wiki - Design system inside-design - guide-to-design-systems Pic-01 Pic-03  ","permalink":"https://peterpowerfullife.com/blog/design-system/","tags":null,"title":"開發軟體產品前請先搞懂 Design System"},{"categories":["Tools"],"contents":" 定時截圖、紀錄操作行為，開 app、開網頁等 \u0026hellip; 定時上傳至雲端\n本文以 MacOS 系統說明，WindowsXP 另附上使用說名書\n －如何確定是否有安裝  系統設定 -\u0026gt; 安全性與隱私權 -\u0026gt; 隱私權 -\u0026gt; 螢幕錄製，看是否有 iMonitor 在 Terminal（終端機） 輸入 ps -ax | grep imonitor，看是否存在  －可怕的背後執行 iMonitor 並不會直接在電腦以軟體（EX: Line, Word, Excel）方式呈現，它是一個 Service（服務），所以會在電腦背後執行，其來自 /Library/LaunchDaemons/com.imonitor.daemon.plist\n而資料 \u0026amp; .app 放在 /Library/imonitor，直接將此目錄砍掉，並重開機即可，隱私權的 iMonitor 也將會消失，不過前提是要有 admin 權限（最高權限）\n－反思  如果今天公司電腦剛好有安裝這種服務，該怎麼辦？以下我會以資方、勞方不同角度去論述\n 很多公司都會發公司機（桌電、筆電）給員工使用，這可以算是公司資產。\n公司之所以會在公司機安裝電腦行為監控軟體，其主要原因是怕內部機密外流， 其實以這角度去想是蠻合理的，如果今天我們自己當老闆遇到這種事也會害怕，當然要有防範機制。\nBut \u0026hellip;\u0026hellip;\u0026hellip;\n如果一開始沒有告知員工電腦有裝電腦行為監控軟體，這才是會讓勞方感受到被欺騙、不信任等種種感覺。 所以身為勞方拿到公司機時，盡可能要找出公司機是否有安裝類似的電腦行為監控軟體，或在初期就應該主動詢問有無安裝，不然你其實沒有個人的隱私！\n－更多類似的軟體 可以在電腦查看看有沒有以下這些軟體：\n IP-Guard ObserveIT iMonitor 電腦行為監控系統 (繁中版) KOUTOKU電腦資訊監控管理系統 MyGoPa 電腦監控軟體 OsMonitor 電腦行為監控及限制 AssetQust 錦衣衛資訊管理系統 X-FORT電子資料監控系統 Desktop Manager 資產\u0026amp; 資安管理軟體 - SmartIT  －Ref  Pic imonitorsoft  ","permalink":"https://peterpowerfullife.com/blog/imonitor/","tags":["iMonitor","Tools"],"title":"iMonitor 電腦行為監控軟體"},{"categories":["Product Development"],"contents":"模擬 Scenario PM 一定要會 Prototype 這項技能，因為當：\n 開發新產品 現有產品有新的需求進來  若只是把邏輯寫成文件（PRD），可能還是會漏掉一些細節。\nVisualization PM 在說明需求時，團隊如果還沒有建立一個具體共識那每個人就會想到不同的服務和功能。\n 一顆圓形的水果\n你會想到什麼？蘋果？橘子？柳丁？龍眼 \u0026hellip;\n 如果 PM 會 Prototype 這項技能，那就能夠透過Prototype（產品原型） 和大家做一個視覺化溝通，這樣就可以確保：\n 設計和開發團隊能開發出產品所需要的樣貌、功能 你爽、我爽、大家都爽，最怕沒有共識往錯誤的方向開發，最後大家還要重做~~（自建隕石式開發？）~~ 團隊能夠開發出產品，且符合市場使用者的期待  High \u0026amp; Low fidelity prototype Prototype（產品原型）可分為 High \u0026amp; Low fidelity prototype：\n Low Fidelity Prototype（低擬真） High Fidelity Prototype（高擬真）  Low Fidelity Prototype（低擬真）\n開發產品的樣貌、雛形之前，一開始會先從低擬真去開發，原因：\n 省時 省錢 讓團隊每個人快速進入 Product Zone（產品境界），~~可理解成一種 Flow（心流）~~藉以理解產品的設計、要解決的真實問題。  High Fidelity Prototype（高擬真）\n至於高擬真通常比較少用，因為這種方式的缺點：\n 耗時 耗工（做高擬真不如直接進入開發）   什麼情況會用到高擬真呢？以下是我個人的經驗和見解：\n  安全性及金流相關服務 團隊的產品涉及到硬體開發，需要 ID(工業設計)，因為成本高方向錯就難回頭了  Usability Testing（易用性測試）  其實這個 Block 範疇很大、很廣，日後有機會再和大家做細部分享，但 Prototype 可以做初步的 Usability Testing。\n Definition\n簡單理解一下 Usability Testing 的定義吧。\nUsability Testing 是透過使用者的真實體驗來評估產品是否滿足用戶需求的方法，它反應真實用戶的使用經驗。 它可以幫助產品（服務）更加貼近用戶的習慣，產品做出來，可以用但不代表貼近用戶的真實需求，所以才需要做 Usability Testing。\n閉上眼睛想像一下\n試想一下，當團隊耗時了一個月完成開發高鐵訂票軟體系統，結果就在上線那天整個炸掉不能訂票，這時是不是完蛋了？所以產品在 Deployment 之前，若有 Prototype 就可以提前預見產品會遇到的問題、產品用起來的爽度等。\n以上種種細節，透過 Prototype 和團隊討論，就是一個簡單的Usability Testing（易用性測試）。\nRef  Wiki - Usability testing Wiki - Prototype Pic  ","permalink":"https://peterpowerfullife.com/blog/prototype/","tags":null,"title":"Prototype Mystery"},{"categories":["Product Development"],"contents":"Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Emphasis Emphasis, aka italics, with asterisks or underscores.\nStrong emphasis, aka bold, with asterisks or underscores.\nCombined emphasis with asterisks and underscores.\nStrikethrough uses two tildes. Scratch this.\nLink I\u0026rsquo;m an inline-style link\nI\u0026rsquo;m an inline-style link with title\nI\u0026rsquo;m a reference-style link\nI\u0026rsquo;m a relative reference to a repository file\nYou can use numbers for reference-style link definitions\nOr leave it empty and use the link text itself.\nURLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).\nSome text to show that the reference links can follow later.\nParagraph Lorem ipsum dolor sit amet consectetur adipisicing elit. Quam nihil enim maxime corporis cumque totam aliquid nam sint inventore optio modi neque laborum officiis necessitatibus, facilis placeat pariatur! Voluptatem, sed harum pariatur adipisci voluptates voluptatum cumque, porro sint minima similique magni perferendis fuga! Optio vel ipsum excepturi tempore reiciendis id quidem? Vel in, doloribus debitis nesciunt fugit sequi magnam accusantium modi neque quis, vitae velit, pariatur harum autem a! Velit impedit atque maiores animi possimus asperiores natus repellendus excepturi sint architecto eligendi non, omnis nihil. Facilis, doloremque illum. Fugit optio laborum minus debitis natus illo perspiciatis corporis voluptatum rerum laboriosam.\nList  List item List item List item List item List item  Unordered List  List item List item List item List item List item  Code and Syntax Highlighting Inline code has back-ticks around it.\nvar s = \u0026#34;JavaScript syntax highlighting\u0026#34;; alert(s); s = \u0026#34;Python syntax highlighting\u0026#34; print s No language indicated, so no syntax highlighting. But let's throw in a \u0026lt;b\u0026gt;tag\u0026lt;/b\u0026gt;. Blockquote  This is a blockquote example.\n Inline HTML You can also use raw HTML in your Markdown, and it\u0026rsquo;ll mostly work pretty well.\nTables Colons can be used to align columns.\n   Tables Are Cool     col 3 is right-aligned $1600   col 2 is centered $12   zebra stripes are neat $1    There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don\u0026rsquo;t need to make the raw Markdown line up prettily. You can also use inline Markdown.\n   Markdown Less Pretty     Still renders nicely   1 2 3    Image Youtube video   ","permalink":"https://peterpowerfullife.com/blog/post-13/","tags":null,"title":"How To Use Checklists To Improve Your UX"}]