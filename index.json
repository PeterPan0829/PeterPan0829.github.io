[{"categories":["Project Management"],"contents":"－目錄  什麼是專案？ 專案和專案管理有什麼不同？ 專案管理需要做任務控管、解構工作  －什麼是專案？ 英文為 Project、中國稱作為項目，專案字眼上是一種抽象名詞，它是為了完成某一個目標因而具體規劃的活動。\n一個專案通常有以下幾個元素（為了不混淆意思以英文表述）：\n Schedule（Time） Scope（Features） Resource＆Cost（People, Budget, 人月） Quality（Outcomes, Benefits）  －專案和專案管理有什麼不同？ Project Management（專案管理）是從 Management（管理）衍伸而來的，而最大的差異就是專案管理有時間限制及最後的產出結果。\n而專案管理是一個隨著時間而持續性的過程，在不同的時間點針對現有的資源去做不同的配置， 在這種科學性的管理模式當中，需要較為廣泛的多元技能，像是：\n  技術能力\n  產品知識\n  人員管理能力\n  業務能力\n  風險評估與控管\n  溝通能力\n  ＊專案目標會決定所有一切。 老闆、客戶可能對細節會有一些誤差，甚至是專業上的不足，這會影響 PM 在報價、時間以及人力資源的安排， 所以在專案規劃以及進行時，PM 一定要時常問自己：有哪些地方我沒想到？會有哪些意外導致專案失敗？ 進而把外在影響力降到最低。\n－專案管理需要做任務控管、解構工作 以下是以正常情況來舉例。\n控管顧名思義需要做控制、管理及規劃。\n以 NBA職業籃球來說，你不可能叫一個後衛去守中鋒，頂多只會做協防而已。\n專案也是，這當中依據參與人員的能力、專長去進行每一個任務。\n＊WBS  Work Breakdown Structure（解構工作）\n以下為淺談內容，細節有機會再另外一個章節補充。\n 專案需要做有效的任務管理，必須要把大的專案解構成較小、可執行的任務，因為這樣更易於去管理，能在執行初期就看出問題，做適當的資源配置、調整人力。\n每一個任務都有明確定義具體完成細節、截止時間，所以在起初的任務安排就非常重要。\n專案的成功與否也取決於能否及時完成任務，所以 Prioritization（優先順序）必須要非常清楚， 同時也要知道任務之間的關係、連動及影響性，因為很有可能其中一個任務沒完成其他的任務就難以延續下去。\n","permalink":"https://peterpowerfullife.com/blog/project-and-projectmanagement/","tags":null,"title":"來！先搞懂專案才能做好專案管理"},{"categories":["Project Management"],"contents":"在軟體開發領域的團隊當中常常要和別人（RD、QA、Marketing等）溝通需求，但不管今天是什麼年紀、職務其實都需要「溝通」這項技能。\n只是因為習慣了工作、生活，我們會覺得這不是一個技能， 「溝通」一個需求、「描述」一個問題等，都需要良好的敘事能力，才能傳達正確的資訊進而解決問題、放大產出。\n我常常會在生活上去練習溝通這件事，一起來看看生活中的產品經理 - 彼得剪髮紀。\n－目錄  建立期待值 我要剪什麼髮型（需求） 該怎麼傳達想法給設計師（溝通） 反思專業領域  －建立期待值 三分靠長相，七分靠髮型 XD\n第一次給沒合作過的設計師剪頭髮勢必會有距離感，千萬不要覺得設計師一定知道我們要的感覺。\n剪出來如果不如預期，這絕對是正常的，真的！不要什麼都怪設計師、怪手藝不好，先把自己的需求明確地和設計師溝通吧！\n那我可以怎麼做？就是盡可能把自身的需求具體傳達給設計師。\n－我要剪什麼髮型（需求） 剪出自己想要的髮型，這是一個需求，但我一定會具體知道：\n  了解自己\na. 髮質軟、硬\nb. 頭型\nc. 平時會不會整理\n  為什麼我要剪這個髮型？\na. 純粹跟個潮流\nb. 這髮型適合我的頭型、臉型，具有修飾感\nc. 不知道剪什麼髮型就嘗試看看（探索中）\n  我要怎麼剪出這個髮型？\na. 自己剪\nb. 髮廊\nc. 知名髮廊（連鎖、名人御用設計師）\nd. 家庭理髮\n  如果剪壞了、不滿意了，要修剪成什麼樣的髮型？\na. 光頭\nb. 平頭\nc. 設計師自由發揮\nd. 摸摸鼻子走人 \u0026hellip;\n  －該怎麼傳達想法給設計師（溝通）   查詢髮廊、設計師的經歷\na. 擅長哪種感覺，例如：日韓系、美式、中短髮或中長髮等\nb. 看看設計師在社群平台上的作品\nc. 髮廊的評價\n  拿之前剪過的型和設計師溝通\na. 提供照片\n  事先做好功課\na. 髮型名稱，例如：美國大兵頭、日韓空氣感、日韓中分微捲蓬鬆\n  Step by step\na. 先剪一部分再剪其他地方，例如：先把頭兩側推平推短，再剪瀏海、後側\nb. 先修出型，確定是想要的感覺再剪短\n  －反思專業領域 以上有沒有一種既視感？\n其實作為 PM 或 RD，我們常常需要和老闆、夥伴及客戶溝通討論，這裡我沒有明確提及換位思考，但它也是完美溝通的元素之一。\n溝通感覺是一件很簡單的事，但其實涉及很多學問、心理因素。\n生活中把握每一次練習的機會，讓自己在團隊、專業領域發揮作用吧～\n","permalink":"https://peterpowerfullife.com/blog/life-pm-haircut/","tags":null,"title":"【生活中的產品經理】－彼得剪髮紀（溝通需求）"},{"categories":["Product Development"],"contents":"以前端開發者的角度來看，其實前端不懂商業邏輯也不影響功能開發，因為只要：\n PM 把 Spec 開好 Designer 把 Mockup 弄出來  實作前再過一次功能互動，其實大部分就可以實現了（剩下技術問題），那為什麼做技術研發，要搞懂商業邏輯呢？\n－目錄  從產品角度看待開發技術 從技術角度想到業務層面沒想到的地方 成就感驅動 RD 深層理解產品商業邏輯 解析產品需求估算開發成本 RD 該如何搞懂商業邏輯？  －從產品角度看待開發技術 一個產品從概念進入到開發階段，RD 知道產品主要的核心功能、帶給使用者的價值， 這時候就會去思考如何透過自己喜愛的技術去共同開發產品，而這時候就需要去思考開發產品所需要的商業邏輯。\n＊RD 邁向攻頂之路 了解 Domain knowledge 只有好處沒壞處，一般來說 RD 的職涯升職大概是：\nJunior RD =\u0026gt; Senior RD =\u0026gt; RD Lead / Tech Lead\n\u0026ndash;\nRD 技術好，從公司角度來看是不可或缺的資產，但回頭看自身的職涯，技術再好，了不起就是一個技術高超的 Senior RD，但若要邁向攻頂之路，必須要懂得需求管理、DDD（Domain Driven Design）。\n－從技術角度想到業務層面沒想到的地方 了解商業邏輯，才能從技術的角度想到業務層面沒想到的地方，如果不了解商業邏輯，就不知道產品到底想要做什麼功能， 甚至連需求的商業邏輯都搞不清楚。\n在這種情況的合作模式就是需求來了，RD 接住，然後 PM 排開發時程、開發資源。\n但是 \u0026hellip;\n也許這個需求的設計不合理，你不知道～\n也許這個需求有更好的解決方式，你不知道～\n也許這個需求可以透過現成的技術架構、第三方套件解決，你也不知道～\n都不豬到 \u0026hellip; 只能任人宰割了\n－成就感驅動 RD 深層理解產品商業邏輯 作為 RD，把產品功能透過程式實踐出來， 這種虛實整合的成就感是一般人難以理解的，但要獲得這份成就感勢必會驅使 RD 去理解商業邏輯。\n只有了解商業邏輯，才能從更全面的視角去規劃當前、未來的應用技術，因為也許這時間點適合用 A 方法， 但產品開發完成進入用戶成長階段，用戶數量一多也許當時的 A 方法就不適用了。\n不了解商業邏輯，會離用戶的真實需求非常遙遠，越難發現其中的痛點和挑戰，沒辦法提出自身的思路和解決方案，進而解決用戶的難題。\n作為RD，自然希望親手打造解決用戶痛點、體驗友善的產品， 如果產品能得到用戶及團隊認同並產生影響力，那自然會特別有成就感。\n－解析產品需求估算開發成本 對 RD 來說，開發一個產品功能最常見的成本有時間成本、開發成本（不只這樣）， 如果懂得產品的商業邏輯才能概算出具體的成本：\n 用什麼技術解決？ 資料的結構長怎樣？ 產品功能彼此間的影響？  RD 如果不懂這些問題，無法把真實需求轉換成技術，那就很難合理估算出開發成本，這時只能讓 PM 來壓時程了（喂）\n－RD 該如何搞懂商業邏輯？ RD 要搞懂商業邏輯一定會需要這兩個能力：\n 產品服務的 Domain knowledge Domain knowledge 實踐轉換為程式碼功能（虛實整合的能力）  不過要搞懂商業邏輯，具體可以和 Domain Expert（領域專家）、PM 尋求幫助和溝通。 上述提及的兩種能力不可能兩三天一蹴可幾，需要在日常、工作專案去培養，平常可以這麼做：\n＊培養抽象化的能力 培養邏輯思考必須要有抽象化能力，也就是把事物抽象化、重新賦予定義。\n訓練抽象化能力有很多種做法，舉凡寫文章、自我對話、玩魔術方塊等，但我自身的經驗和體悟是透過自己的話去描述所見所聞，進一步去定義推理、歸納。\n＊和團隊建立共同語言 開發系統發現團隊對於代名詞、術語沒有一個共識，進而產生龐大的溝通門檻，這是一件很耗心力的事情，但其實和團隊建立共同語言它並不困難。\n團隊早期建立共同語言，白話溝通、文件化，就是建立共同語言的第一步了。\n而當下次在會議或小組討論，大家就能夠很清楚知道彼此論述的重點是什麼，進而降低團隊溝通的代溝。\n－Ref  Pic - NetWork Unknown Owner  ","permalink":"https://peterpowerfullife.com/blog/rd-must-to-know-business-logic/","tags":null,"title":"為什麼 RD 需要搞懂商業邏輯？"},{"categories":["Project Management"],"contents":" 每一位產品經理都一定會遇到時程 Delay 的問題 （很少聽到沒遇過的）， 造成延誤的原因並沒有標準答案，但都存在一些因素，所以產品經理很難預測何時能完成開發。\n在我的經驗當中，隨著時間的累積、多人參與專案及改變開發流程等，以下是我認為有助於改善產品開發預估時間的思維，這沒有絕對 *3，但可以幫助我們提高預估時程的準確性。\n －目錄  你不是在管理時程，而是在管理大家的期望 做個有同理心的產品經理 剛上任的PM怎麼估時程？ 做最壞的打算，做最好的準備  －你不是在管理時程，而是在管理大家的期望 PM 不是只有把文件寫一寫出一張嘴而已，其中一個很大的責任就是激發團隊每個人的自信心，這聽起來很簡單但具體可以怎麼做呢？\n 產品開發前的任何 Meeting（不論是 Scrum Sprint, Waterfall），讓所有夥伴知道這一次產品所要開發的內容、範疇有哪些 （這裡就不細說用什麼文件來闡述），一但開發團隊知道 Scope 有多廣，就可以預期產品功能的難易度 確認每位夥伴都清楚功能的背景，為什麼需要這功能？這功能可以帶給產品什麼效益？ 時程會估算錯誤，不可能完全準確！所以如果認為這功能的複雜度＋過去經驗來評估，認定無法如期交付，那盡可能每天讓 PM 了解狀況 這東西很困難牽太多複雜的邏輯，如果現階段做不出來，PM 一定要主動幫助團隊做 Task Breakdown，至少要做到什麼程度，然後再把這項功能排到下個階段延續做下去  簡單說，一開始要給大家一個 Expected value(期望值)，這樣相對會更有信心去做手上的工作並一一完成產品的各種功能。 產品經理不是真的要管理產品發佈的日期，而是管理大家對這個產品的期望！\n－做個有同理心的產品經理 如果PM 本身有技術背景，並且實際參與開發過專案，就能夠明白產品功能的複雜度，並且也理解困難度在哪裡，一開始就可以先概算每個功能所需耗費的時間，舉例來說：\n今天要做一個公司前台官網，這個官網會需要呈現的資訊有：\n 關於我們 聯絡我們 語言切換（中、英、日）  ＊Task Breakdown   UI 介面\n  首頁\n  關於我們頁面\n  聯絡我們頁面\n    API\n  聯絡我們頁面，用戶可以個人資料\n 資料庫需要去儲存使用者從官網傳送的個人資訊      最後可以依據每個人的熟練度去概算需要多少時間，心中就會有一個大概的時程。\n＊如果產品經理沒有技術背景那怎麼預估時程呢？ PM 沒有技術背景比較難預估開發時程，這確實是許多大部分 PM 遇到的難題，但可以借力使力去做這件事：\n 請 Tech Team Leader 協助 找團隊當中最資深的夥伴協助  這時候就非常考驗平常在團隊的人際關係了ＸＤ\n－剛上任的PM怎麼估時程？ 如果今天是一位新加入公司的 PM，可以透過以下的方式去估算時程：\n  理解過去專案當中團隊的開發速度、時程， 同時還要知道哪些夥伴比較理解商業邏輯、和功能的應用場景，這會幫助你估算時程。\n  凡事都有第一次遇到不要怕，贏要衝，輸要縮！都還沒輸過就得親身嘗試一下，把這個責任扛起來 Run 一次 Cycle，不要預期自己能做的非常完美，但一定要落實做好每個步驟。\n  －做最壞的打算，做最好的準備 隨著時間的流逝，距離產品的發佈日期越來越接近，這時候期望值就越真實，接受期望的變化就更加地困難。\nPM 要能夠在開發期間定時盤點已完成、未完成的功能，再把剩下未開發、開發到一半的功能去分類。我通常會採用 Eisenhower\u0026rsquo;s Decision matrix 方式(上圖)，最後再依據功能的完整性、重要性，區分：\n Highest High Medium Low Lowest  最後得到一個目前產品功能的 Prioritization，撥雲見日後就是火力全開專注開發 High 以上等級的任務。\n 這跟 MVP 的精神 MoSCoW 有很大的關係，也是開發產品極為重要的一環，後續我會再分享～\n －Ref  Pic Pic - Decision matrix  ","permalink":"https://peterpowerfullife.com/blog/project-management-empathy/","tags":null,"title":"管理開發時程，做個有同理心的產品經理"},{"categories":["Product Development"],"contents":"－目錄  生活中的小故事 生命週期的定義 一個人的生命週期 產品的生命週期 成為一流的產品經理  －生活中的小故事 在探討產品生命週期之前，我們可以想想手機用戶買新手機的問題：\n 上一次買 Apple iPhone 是什麼時候呢？ 買的是幾代？ 最新發表的 iPhone 是幾代？  上述這幾個問題會取決於一個手機用戶是否會購買 iPhone 手機，因為如果知道再過一個月就要發表新機了，不太可能會有人願意買比較舊款的，對吧？\n 這篇文章看完的最下面，我會提供一個連結，可以大概知道蘋果什麼時候會發表新產品（請看完ＸＤ）\n －生命週期的定義 這裡我只提生命週期，並沒有提到產品的生命週期～\n其實不只是產品，任何東西都有它的生命週期，客觀概述生命週期本身的定義，那應該是：\n ＸＸ經過的每個階段 （XX 可以用以下的代名詞）\n一個人、一件事、一隻動物、一台手機 \u0026hellip;\n 而在每個階段都會有不一樣的事情發生，這其實就是指生命週期的過程。\n－一個人的生命週期  受孕 出生 童年 青春期 成年 老年  我們每個人在生命週期不同的階段都會有不同的思維模式，以收信的例子來說：\n＊童年 VS 成人 收到信件的感受和反應     童年 成年     感受 期待、興奮、開心 焦慮   實際事件 情書或任何有趣的事情 X! 彼得銀行寄帳單來討錢         －產品的生命週期  在理解產品的生命週期之前，可以再回頭想一下上述「生命週期的定義」，試著把你認為的「產品生命週期」給寫下來～\n  概念  當你開發一個產品之前，一定會有想法、概念，雖然會開始規劃，但這些都還只是「概念」階段。   開發  清楚知道自己想要打造出什麼產品、就要透過一連串的開發階段。   推動  用中文表達很難理解，其實應該要以 Launch 比較合適。這階段就是推出產品，讓使用者、用戶可以真正地去體驗你的產品。   成長  當產品推出後，透過各種行銷手法去推動、販售和宣傳產品，開始越來越多的用戶，就會進入 Growth（成長階段）， 通常成長階段會是團隊上上下下最振奮的時候，因為根據產品的性質（toB or toC）和市場熱度，很有可能在一夕之間就湧入大量用戶。   成熟  在成長一波之後，產品會趨近於「成熟穩定」的階段，這時期不太會去改動產品的各種細節，而市場上大多數的用戶也聽過、用過甚至購買過你的產品。 這個時期，產品的生命週期會停留在這一段很長的時間，甚至用戶不再使用你的產品，而這就是進入「衰退」階段。   衰退  －成為一流的產品經理  文章開頭提到 iPhone 的故事，可以試著想想目前這支手機是在生命週期哪個階段呢？\n 產品的生命週期和人的生命週期一樣，當你預期、察覺和發現它正要進入衰退階段時，就勢必得做些什麼去維護、補救， 但我個人認為這太晚了，其實在產品進入成長階段時，仔細觀察產品在市場上的互動及回饋，這時就必須開始提前佈局、規劃，思考產品更多的可能性。\n在當下大環境的洪流當中，若發現產品未來可能沒有太多的可能性，或是無法帶來太多的商業價值，這時候勢必得要做 Pivot，也就是說上圖那條紅線其實是可以操控的，為產品、團隊及公司開闢一條全新的方向和道路。\n什麼時候才要做 Pivot？這必須要真正把產品開發出來，並丟到市場去驗證才會得到結果。\n在舊版 iPhone 成長的同時，產品經理和團隊內部應該要有新的產品概念，確保每一項產品不會同時處在衰退階段。\n至於該如何提前佈局和規劃又是另一個議題了，找時間再和大家分享 Metrics（指標），清楚定位產品所屬的階段。\nOther Apple Buyer’s Guide 是MacRumors 網站提供給購買者參考的指南。\n在每篇的產品週期分析都有「Recent Rumors」，可以詳細知道 Apple 產品近期狀況或是變化。\n","permalink":"https://peterpowerfullife.com/blog/product-lifecycle/","tags":null,"title":"Product Lifecycle"},{"categories":["Product Development"],"contents":" 這篇文章主要是探討數位化轉型的過程，以及開始進入軟體開發的初期階段需要留意的細節。\n內容不會提到 RD 把 Domain Knowledge（知識領域）DI（注入）到程式碼當中，這議題很深、很廣，有機會再分享。\n －目錄  數位化轉型的定義＆什麼是DDD? 數位化轉型面臨的問題 數位化轉型實務經驗（進入軟體開發的過程） 數位化轉型的小魔法（Tips）  工作經驗當中，打造新產品或是把當前既有的服務做數位化轉型，在做數位化轉型如果懂得 DDD（Domain Driven Design）， 這對產品開發有絕對的幫助，甚至可以少浪費一些時間去摸索原先的服務（流程、習慣、文化） \u0026hellip;\n－數位化轉型的定義＆什麼是DDD?  愛你既有的產業、認識你既有的環境，在數位化轉型的過程中，不僅是 PM, 更是每位夥伴都該有的共識。\n 數位化轉型的定義就是把既有的產品，轉型以數位科技服務的過程。 舉例來說，火車票只能在火車售票台購買實體票券，而透過數位化轉型就能使用購買車票的服務軟體購買電子票券。\nDomain Knowledge（知識領域），它是數位轉型所圍繞的核心， 在既有的產品服務，一旦開始要做轉型會需要知道 Key Point(問題點)以及 Solution(解決方式)。 在一間公司，尤其是PM, RD若不懂這一塊的 Domain KnoHow（知識問題），那最終開發出來的產品會有很多問題，甚至是無法取代原先的服務方式。\nDomain Driven Design 是基於領域專業知識來解決複雜商業邏輯的軟體開發方法論。\n＊DDD注重以下三個重點  跟 Domain Expert（專業領域專家） 合作並且定義出 Domain 的範圍及相關解決的方案。 切分 Domain（領域）為多個 SubDomain（子領域），並專注在核心SubDomain（子領域）。 透過一系列設計模式，把 Domain Knowledge（知識領域）注入到 Model（程式模型）中（本篇不探討）。  －數位化轉型面臨的問題 在導入數位轉型也不是一件容易的事情，因為會牽扯到幾個問題：\n 原有的產品服務是 toB 或 toC 既有團隊、公司組織的人事如何安排 需不需要雇用專業人士或請外包團隊協助開發數位系統  上述是數位轉型比較常見的問題，但在我經歷的產品開發過程，問題不單單只有這些 \u0026hellip;\n每個產業注重的面向、優先順序都不同，在極少與顧客互動的產業中，組織可能會先轉型營運流程的層面，透過結合數位科技簡化組織的管理以及部門與部門間的業務，導入新科技讓工程流程變得更有效率等。\n在金融、觀光、媒體產業等，組織可能會把重心放在價值主張，從根本層面的探討所提供的產品和服務，像媒體業的公司就會問出「我們是一個販售財經期刊的公司？還是一個提供顧客充足資訊與解析，讓顧客更好的洞悉市場生態，並做更理性且智慧的選擇的企業？」如果答案是後者，業者可能就會將更多的重心放在傳遞（Delivery）與顧客體驗的層面上。\n在數位領域中更成熟的組織，不僅轉型了其營運流程以及價值主張; 成為極為靈敏且以顧客體驗為核心的企業，數位成熟的組織更是建立了一整個數位生態，並從能力、文化、與整個生態系統上驅動轉型，成為一個不斷去挑戰、測試、並且極為靈敏的轉型組織。\n而像是麥肯錫、IBM 等組織常提起的數位再造（Digital Reinvention）則是一個組織核心價值的根本轉化。也是前面提到的，從根本層面探討目前提供的產品與服務，並重新定義價值主張。在這個階段，組織必須要徹底審視＆洞悉 User Journey（顧客旅程），並定義出需要被優化或是新增的環節點，再建立明確的策略。\n－數位化轉型實務經驗（進入軟體開發的過程） 以我在 Healthcare（醫療）領域，幫助醫院做數位轉型，把傳統的紙本病例轉變為電子病歷的經驗，進入軟體開發階段之前，就需要跟原有服務的專業人士（院長、護理師）做需求訪談，以便確定需求，最後需求確定完再整理好 Spec，需要給服務單位知道產品開發的範圍、時程，也同時讓軟體開發單位了解其中的 Domain Knowledge（知識領域）。\n 這裡也建議，若客戶允許的話，安排長時間去觀察原先的服務流程， 因為有些「細節」是只有使用者才知道，而這也是站在使用者角度去思考產品的易用性，而非主觀的認知，這是成為一個傑出的 PM 必須要學會的事情。\n 當 PM 把整理好的 Spec 交付給軟體開發單位，通常 PM 會開一份比較完整、具體的 PRD（後續再分享細節）給開發團隊，這份 PRD 會有：\n User Story 完整描述功能的背景 實務上的 Business Logic（業務邏輯） UI相關文件（Prototype、WireFrame、Mockup）  而開發團隊會根據 UserStory、Business Logic和 UI 去拆分 Task、Subtask，Task 會是一個具體的執行任務，Ex：UI Layout、Fetch API等各種待執行的任務。\n 開發團隊在實作階段，通常一但下手開始開發就停不下來了， 所以 PM 一定要交付具體明確的 PRD 以便團隊開發出預期的產品且實際解決使用者的問題。\n －數位化轉型的小魔法（Tips）  長時間觀察客戶的操作流程 每天問使用者三個問題（Domain KnoHow、使用經驗等） 每個月和使用者做 User research（深層理解用戶行為） 定期參加相關產業活動同時觀察 Competitors  －Ref  Wiki Domain-Driven Design: What is it and how do you use it? OOSGA  ","permalink":"https://peterpowerfullife.com/blog/domain-driven-design-01/","tags":null,"title":"數位化轉型不可不知 Domain Driven Design"},{"categories":["Product Development"],"contents":"－目錄  什麼是 Design System？ Design System 的優缺點？ 為什麼打造 Component Library 最好先搞懂 Design System？ 如何建構 Design System？  －什麼是 Design System？ Design System 其實就像台灣國小生的生字簿：\n 筆劃（設計風格規範） 部首（重複使用的介面設計元素(UI element)） 分類（重複使用的互動設計元素(像是檔案管理)）, Ex: 方向（上下左右）  Design System 就是一種規範、標準，只要遵循它的規則基本上不太會出錯。 它在任何領域無所不在，但不只是視覺介面設計的風格規範而已，更是連貫點、線、面的體現出產品本身，以及產品開發階段開發者所遵循的設計語言。\n－Design System 的優缺點？ ＊優點  因為有一個規範可循，可以減少設計和技術的溝通成本（即使團隊架構逐漸龐大、產品跨國開發） 一致性的設計語言，專注在用戶需求、產品本身，以利於產品開發。  ＊缺點  限制創意 建構初期時間壓力大，需要在短時間內思考非常地深遠，以便後續產品開發、重構   其實很有趣，雖說它減少產品開發中的溝通成本，卻也在建構初期耗費設計上的時間、心力（請給公司設計部門一個讚）\n －為什麼打造 Component Library, 最好先搞懂 Design System？ 如果以軟體科技領域來說，Design System 可能會被歸類為設計部門的職責，但我認為只要是開發自有產品，而不是一般接案、代工公司，那基本上公司從上到下都要知道 Design System，因為它會在產品投入開發後發揮強大的影響力！甚至在跨產品團隊逐漸擴大成為一種標誌性識別。\n＊身份不同會有不同的體悟  對 Designer 而言，Design System 是一種復用的元件集合。 對 RD 而言，Component 是遵循 Design System 所開發出的 UI 復用元件。  \u0026ndash;\n一旦 Design System 建立完成後，RD 就能夠遵循 Design System 開發出團隊所需要的共用元件， 但在開發共用元件之前，如果 RD 不知道 Design System 就埋頭開始開發，那麼在不懂的情況下所開發出的元件，可能會造成視覺落差、破壞中長期產品的標誌性識別。\n這也是為什麼打造 Component Library 之前，最好先搞懂 Design System 的原因之一。\n－如何建構 Design System？  本身不是專業設計師，僅以跟設計師合作所得知的訊息來做記錄和分享，若有得罪之處和誤解，請見諒～\n 建構 Design System 需要同時思考到產品本身、產品標誌性識別甚至是 CIS，一但有這些共識，就會開始以下步驟：\n  盤點 Visual Audit (視覺審核)\n 確認元素和品質    建立 Visual Design Language(視覺設計共同語言)\n 顏色 尺寸 字體    打造 UI Library\n  Documentation（文件化）\n 標準建立完的最後一步就是文件化以利後續溝通，至於用什麼方式呈現就單看團隊的決定。    \u0026ndash;\nUI Library 建構的工具百百種，這裡不一一紀錄，可以參考：\n The Top 89 Design Systems Open Source Projects Figma Community Flexport\u0026rsquo;s design system  Ref  Wiki - Design system inside-design - guide-to-design-systems Pic-01 Pic-03  ","permalink":"https://peterpowerfullife.com/blog/design-system/","tags":null,"title":"開發軟體產品前請先搞懂 Design System"},{"categories":["Product Development"],"contents":"－目錄  什麼是 Prototype? 為什麼需要 Prototype? 模擬 Scenario Visualization High \u0026amp; Low Fidelity Prototype Usability Testing（易用性測試） 最後的最後  －什麼是 Prototype? 從英翻中的字義上來看，通常會理解為「原型」、「雛型」。 不過在科技軟體領域，通常不會用中文來表達，一般都會說 Prototype，因為用「英文」才不會失去它的真實含義。\nPrototype 它是產品的初步樣貌，至於產品的初步樣貌每個人、團隊有不同的定義，這應該在 Product RoadMap 階段就要定義好。\n－為什麼需要 Prototype?  驗證產品未來的可行性 開發成本低，對新創團隊來說可以省下很多資源 產品有初步的 Prototype 才可以向世人、市場去 Demo，得到真實的回饋  －模擬 Scenario PM 一定要會 Prototype 這項技能，因為當你遇到產品的這些狀況：\n 開發新產品 現有產品有新的需求進來  單純把邏輯寫成文件（PRD），可能還是會漏掉一些細節，也會有一些誤差存在。\n－Visualization PM 在說明需求時，團隊如果還沒有建立一個具體共識那每個人就會想到不同的服務和功能。\n 一顆圓形的水果\n你會想到什麼？蘋果？橘子？柳丁？龍眼 \u0026hellip;\n 如果 PM 會 Prototype 這項技能，那就能夠透過Prototype 和大家做一個視覺化溝通，這樣就可以確保：\n 設計和開發團隊後續能開發出產品所需要的樣貌、功能 你爽、我爽、大家都爽，最怕沒有共識往錯誤的方向開發，最後大家還要重做 （自建Meteo Fall Development(隕石式開發)？） 團隊能夠開發出產品，且符合市場使用者的期待  －High \u0026amp; Low Fidelity Prototype Prototype 可分為 High \u0026amp; Low fidelity ：\n Low Fidelity Prototype（低擬真） High Fidelity Prototype（高擬真）  Low Fidelity Prototype（低擬真）\n開發產品的樣貌、雛形之前，一開始會先從低擬真去開發，原因：\n 省時 省錢 讓團隊每個人快速進入狀況，我把它定義為 Product Zone（產品境界），可理解成一種 Flow（心流） 藉以理解產品的設計、要解決的真實問題。  High Fidelity Prototype（高擬真）\n至於高擬真通常比較少用，因為這種方式的缺點：\n 耗時 耗工（做高擬真不如直接進入開發）   什麼情況會用到高擬真呢？以下是我個人的經驗和見解：\n  安全性及金流相關服務 團隊的產品涉及到硬體開發，需要 ID(工業設計)，因為成本高方向錯就難回頭了  －Usability Testing（易用性測試）  其實這個 Block 範疇很大、很廣，日後有機會再和大家做細部分享，但 Prototype 可以做初步的 Usability Testing。\n ＊Definition 簡單理解一下 Usability Testing 的定義吧。\nUsability Testing 是透過使用者的真實體驗來評估產品是否滿足用戶需求的方法，它反應真實用戶的使用經驗。 它可以幫助產品（服務）更加貼近用戶的習慣，產品做出來，可以用但不代表貼近用戶的真實需求，所以才需要做 Usability Testing。\n＊閉上眼睛想像一下 試想一下，當團隊耗時了一個月完成開發高鐵訂票軟體系統，結果就在上線那天整個炸掉不能訂票，這時是不是完蛋了？所以產品在 Testing \u0026amp; Deployment 之前，若有 Prototype 就可以提前預見產品會遇到的問題、產品用起來的爽度等。\n以上種種細節，透過 Prototype 和團隊討論，就是一個簡單的Usability Testing（易用性測試）。\n－最後的最後 最後，關於 Prototype 的相關工具有百百種，這裡就不紀錄和分享了，\u0008PM 在Prototype 出來之前，一定是比團隊任何人還要早進入 Product Zone，如果有產品的初步樣貌，那麼工具只是一種實踐的手段罷了。\n－Ref  Wiki - Usability testing Wiki - Prototype Pic  ","permalink":"https://peterpowerfullife.com/blog/prototype/","tags":null,"title":"Prototype Mystery"},{"categories":["Product Development"],"contents":"－紀錄這篇文章的契機 在台灣，高中、大學的科系可能有數學系、資工系、法律系，但讀者有聽過產品管理系、產品學系嗎？ 現在可能有，但在我學涯階段是沒有產品管理類似的科系，有的話也只有歐美國家才有這種科系。 這也是為什麼產品管理、開發困難的地方之一，因為你並沒有一個途徑可循。\n另外侄子姪女漸漸長大了，有時候問到工作內容，再紀錄「帶小朋友認識產品經理的世界」這篇文章之前，想先透過這篇文章幫助更多人大方向理解產品經理的工作。\n－目錄  什麼是產品？ 為什麼要開發產品？ 需要哪些資源才能做出一個產品？ 要怎麼找到人開發產品？ 怎麼拿到錢來開發產品？ 組成產品的三個要素 商業領域的職務 產品經理要做哪些事? 產品經理的日常（大方向） 產品經理是商業策略的角色之一  －什麼是產品？ 只要是人們使用的東西 （動物或某個群體也算），包含軟、硬體，甚至還有非常多品項、種類，這都是產品的一種。\n最終它們都有一個共通點就是 「被使用的產品」！\n－為什麼要開發產品？ 產品是製造出來滿足人們、或某個群體的需求或慾望。\n簡單說就是，有些人需要什麼，而勢必有些人就得要去做些什麼。\n想想生活上的水壺、課程、手錶等，這些都是因為需求而產生的。\n－需要哪些資源才能做出一個產品？  這裡我只討論產品本身，後續有機會分享「帶小朋友認識產品經理的世界」這篇文章，我會詳述產品和商品的差異。\n 打造一個產品真的非常難、也非常耗費資源！\n但不管怎麼樣，有一項資源是不論要製造什麼產品都需要的，那就是「人」！\n因為，我們總需要人來做些什麼才能做出一個產品 （先不討論機器人這件事，因為機器人在前期也是需要人來規劃、開發、管理）\n－要怎麼找到人開發產品？ 我們需要人來開發產品，那要怎麼找到這些人來做產品呢？\n找人幫你做東西？是不是相對要提供什麼價值呢？錢？股份？經驗累積？\n大部分，都是透過錢找到人來開發產品。\n－怎麼拿到錢來開發產品？ 簡單說，賣東西就可以賺錢了！真的！\n但在那之前，勢必要有一筆資金投入資源開發產品， 所以這也是許多創業者的壓力來源，要找各種管道籌備資金 （這裡不詳細說明怕偏離主題）\n產品賣出去拿到錢就可以投入更多資源開發、生產更多的產品。\n－組成產品的三個要素  組成產品的三個要素（產品不分軟體、硬體，甚至是飲料等）飲料跟科技也是有關的，它需要機器的相關製程\n更生活化的例子，以 iPhone 來舉例，其實會需要以下這些角色來開發 iPhone 這個產品。\n ＊科技  軟、硬體工程師  ＊設計 產品的樣貌（顏色、形狀）、產品的使用體驗（流程、功能、解決使用者哪些痛點）\niPhone 手機看起來怎樣？用起來怎樣？\n 產品設計師 工業設計師  ＊？ 最後一個問號其實就是商業！商業行為是支撐產品的關鍵要素之一！\n這也是有些產品經理本身不理解、似懂非懂的一個環節，但產品經理其實跟商業有非常大的關係！\n－商業領域的職務 哪些關鍵人物為商業領域工作呢？\n Business Development Sales Marketing CEO  以上這些職務會需要去幫助公司持續在市場運作。\n－產品經理要做哪些事？  上面那張圖完整說明了產品經理的工作內容。\n 產品經理的工作，涉及到使用者體驗、技術、商業以及溝通。 所以說這職務真的非常不容易！不僅僅是開發產品而已，所以需要非常大的學習力和拼勁，才有可能把產品推上市！\n－產品經理的日常（大方向） 以一個軟體領域的產品經理角度來看，不細述細節，其大方向包含：\n 和 RD 討論我們可以做出什麼產品，要用什麼技術等 和 Designer 討論使用者可能會希望如何體驗產品 和 Marketing 溝通如何曝光、營運、銷售產品  以上這幾點都做到，這也就促成了一個商業行為，產品也就成功了！（通常是這樣，但沒那麼簡單和容易）\n－產品經理是商業策略的角色之一 理解完上述，其實可以知道產品經理就是了解科技、設計以及商業行為運作，所以產品經理也是屬於商業策略的角色之一！\n例如：很多人喜歡 Rolex，所以 Rolex 就請人設計、生產、製造，賺錢來支付薪水給員工，不段循環形成更多的商業活動。 賣東西給別人就是在經營生意，因為商業是產品不可分割的一部分。\n如果沒有商業，也就沒有產品！因為產品是透過商業來支撐的，產品因商業而存在， 對於產品管理，這是一個非常重要的核心思想！這也是能否不斷成長的關鍵之一！\n－Ref  Pic - Martin Eriksson（mind the product）  ","permalink":"https://peterpowerfullife.com/blog/what-is-product-manager/","tags":null,"title":"讓我帶你認識產品經理的世界"}]