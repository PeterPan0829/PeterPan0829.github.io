[{"categories":["Project Management 專案管理"],"contents":" 文章僅為詮釋自身觀點心得，對於同行業者沒有任何批判之意。\n Scrum 這個 Agile Methodology(敏捷式開發) 的方法對於產品開發團隊幫助很大！但在跑 Scrum 之前你最好要知道這些 Tricks \u0026hellip; 不要搞得自己裡外不是人 🥵 🥵 🥵\n這裡紀錄我在產品開發團隊以 RD, PM 角色參與、引進敏捷式開發，以及讀書會夥伴的心得分享。如果你正在團隊導入 Scrum\u0008, 或是你的團隊正在執行 Scrum 但處處碰壁又沒人協助，希望這些經驗對你有所幫助。\n​\n目錄  TL;DR 保護好自己，更不要高估自己 老闆及公司高層根本不在狀況內 你有用心體會團隊成員的心意嗎？ 不尊重專業的代價就是浪費更多資源  ​\nTL;DR   導入 Agile Methodology(敏捷式開發) 之前，先確認公司從下到上是有共識且有敏捷的基本概念。\n  了解每位夥伴對敏捷的接受程度。如果你從來沒跑過敏捷，試著先把敏捷精神先運用在人生目標、日常生活。\n  方向不對，努力白費。待在不健康的環境，敏捷跑到用爬的不打緊，更可能耽誤你的光陰。\n  一個人能影響團隊，但你千萬不要成為負面影響的那一位。\n  ​\n保護好自己，更不要高估自己 聽說矽谷的軟體工程團隊都在跑敏捷開發，你也想要把這套開發方式引進團隊。敏捷的精神就是小步快跑持續改善，透過產品的使用者使用後回饋，大家齊力打造一款更貼近消費者需求的產品。\n這時候如果你沒有考過 Scrum Master 相關證照、沒有上過課，上網搜尋關鍵字出現一堆資訊供你參考，這時你不經思考和規劃就把所有的內容整理起來。團隊過往都是走傳統型的開發流程，像是 Waterfall(瀑布式開發)，這時候你準備一大堆準則，然後在團隊會議中宣布要跑 Scrum, 接著開始 2 週小步快跑快速迭代、每日站會、週五小週末下班前的會議等。\n過了幾個 Sprint(衝刺) 後不僅沒有什麼突出的成果，在會議檢討時，團隊夥伴開始把砲火指向你，甚至主管也不挺你 \u0026hellip;\n你做錯了什麼？你很積極又認真，但最後錯的人卻是你 \u0026hellip;\n​\n老闆及公司高層根本不在狀況內 在你進入公司加入團隊，這過程公司內部一定經歷了大大小小腥風血雨的風波，公司釋出職務不外乎是團隊擴編、人員離職等因素，當你被賦予執行 Scrum 這個計畫的重責大任，又或是面試完全沒提到而是入職主管起意要做這件事。你可能要當心了 \u0026hellip;\n「你確定老闆或是主管以上的高層真的懂這是啥嗎？」\n「就算他們懂，你確定這是一個導入 Scrum 的好時機嗎？」\n「上層同意這項計畫，但你有想過每天參與其中的 RD, Designer 等諸位夥伴，打從心底是認同且歡喜參與其中的嗎？」\n老闆和公司高層都不懂這是啥，聽到「敏捷」兩個字眼睛瞬間發亮，然後以為：「導入敏捷，半年的東西 3 個月就會做出來囉！太棒了！」\n然後你就死定了 \u0026hellip;\n你既沒有考過證照，甚至完全沒有跑過敏捷的經驗，面試也沒仔細問團隊的組成是否有 Product Owner(產品負責人)、Scrum Master(敏捷導師)、QA Engineer(測試工程師)等完整的敏捷開發團隊角色，公司完全沒概念，嘴巴說支持但實際上是要你一個人扛全責。\n你覺得真的有辦法由下而上的落實敏捷式開發嗎？\n​\n你有用心體會團隊成員的心意嗎？ \u0008加入團隊後短短幾個月就馬上導入敏捷式開發，這是一個自殺式的行為。\n「團隊夥伴有跑過敏捷嗎？如果沒有是不是應該先觀察既有的開發流程？」\n「每個人都有他的 Comfort Zone(舒適圈)，而你卻要他們離開舒適圈跟你跑敏捷？」\n「之前跑過敏捷但體驗很糟，PO, PM 只會不停地擴大 Scope, 從 Sprint 開始到結束 Task 從來沒有定案過」\n在實際執行面還會遇到更多問題，例如：\n  RD 私下協議交換工項\n  QA 沒有把 Deploy, Test 的 Effort 加上去，你本身也沒概念\n  帳號權限問題，不是每位使用者都有資料可以測，所以呼嚨帶過\n  還有太多太多地問題可以去詳述，但總結這些問題，其實就是 - 「你不夠理解團隊、你從來沒有傾聽過團隊夥伴的意願」。\n​\n不尊重專業的代價就是浪費更多資源  之前提過台灣科技軟體產業的 PM 是 Product Manager + Project Manager 的組合\n 可悲的是，公司的願景、產品方向等決策最後都是由股東決定，因為老闆、公司拿了錢，怎能不聽股東的話？\n那找 PM 要幹嘛？其實只是老闆要你來幫他盯進度、壓迫技術開發部門而已。所以你可能抬頭是 Product Manager 但實際上都是在做專案經理的工作，又或者是 2 種都要做。\n能多學有什麼不好？當然好！但很多時候你會迫於時程，只求 60 分交差了事，但實際上處處都是坑。甚至你規劃不周，沒有想過產品短、中、長期的影響和後續的維護性，而技術部門的 RD 也早早對於這種文化麻痺了，這些功能後續如何也不關心，你覺得會發生什麼事？\n甚至更好笑的，你老闆在外聽他麻吉分享自己公司跑敏捷跑得嚇嚇叫，然後下週會議上就要求你導入敏捷開發 \u0026hellip;\n你覺得這樣的環境敏捷跑得起來嗎？可能跑個幾天就變成用爬的。\n老闆以為省了錢，殊不知不尊重專業的代價就是浪費更多資源。\n​\nRef  Pic - unsplash  ","permalink":"https://peterpowerfullife.com/blog/before-scrum/","tags":null,"title":"來跑 Scrum！但團隊真的準備好了嗎？"},{"categories":["Others 其它"],"contents":"以為鏡架可以剛好遮住痘痘的說 🥲 🥲 🥲\n感覺很業配但其實只是一個心得文～～\n​\n目錄  認識 Sums 團隊 Sums 眼鏡有哪些特色？ 如何購買（群眾募資＆實體通路）  ​\n認識 Sums 團隊 打造 Sums 眼鏡的「光子視界」團隊成員來自台灣、美國，過去曾推出 新東方美學的時尚墨鏡品牌 NAUGHTY SUNDAY，以故宮國寶眼鏡走上紐約時裝周，還有 世界最小體積的折疊墨鏡 ROAV，同年 ROAV 首次與台灣品牌 Gogoro 合作推出聯名限量眼鏡。\n而在 2021 年初光子視界又推出了全新的眼鏡品牌 Sums，其設計元素強調 - 世界上最舒服的眼鏡。\n​\nSums 眼鏡有哪些特色？ 眼鏡我只追求簡單、低調、適合自己，最重要的就是戴起來要舒服。起初看到這副眼鏡有一種：「就是它了」 的感覺，外型雖然看似單調，但卻能夠襯托出穿戴者的五官外貌。\n－幾個最主要的元素  三重鈦合金鏡架 替換式平衡配重鏡腳設計 止滑鏡腳咬花 釋壓止滑泡泡鼻墊 彈性 C 字絞鍊  替換式平衡配重鏡腳設計，它提供 2 種不同材質、重量與角度的鏡腳模組，鏡片重的配鏡者可以配上比較重的鏡腳，透過槓桿原理讓整副眼鏡的重心平均分配到鼻樑和耳朵上，以減輕鼻樑的壓力，減少重度數者眼鏡往前滑的情況。\n配有彈性 C 字絞鍊，在鏡臂與鏡框連接處以Ｃ字形狀增加彈性空間，降低來回撐開的變形風險，完美抵銷頭圍兩側壓力，不再出現暈眩、高眼壓等不適情況，非常服貼頭型。\n還有 2 組特製的 Bubble Pad 泡泡鼻墊，使用醫療等級矽膠中空的設計，可以讓鼻墊更柔軟、更貼合鼻形，減少配戴的壓迫感；再來是兩組鏡腳皆有咬花的溝紋設計，透過紋路增加摩擦力的狀況下眼鏡就不容易滑落。\n本身眼睫毛比較長，過去從沒有配戴過鼻墊款式的眼鏡，眼睫毛就像雨刷一樣，整天下來鏡片有異物感挺不舒服的 🥸 🥸 🥸 戴上它之後考試沒有一百分，但解決了雨刷問題，從此也沒有推過眼鏡了 😜\n只要購買 SUMS 眼鏡，都隨附折疊眼鏡盒、拭淨布、兩款鼻墊、專用螺絲起子、替換式配重鏡腳與說明書等。而目前 SUMS 也在粉絲專頁募集使用心得，進入指定貼文留下開箱使用評價，就能參加老客戶專屬的優惠活動～\n​\n如何購買（群眾募資＆實體通路） 我是透過flyingV 群眾募資平台支持這個募資專案，提供 3 個款式各 4 種顏色。當時以極優惠的募資價格而購入，此回饋方案內容包含：\n Sums 眼鏡一副 抗藍光鏡片  ​\n－提前體驗＆線上配鏡 錯過了線下體驗會，我是先在保視力專業眼鏡(忠孝旗艦店)試戴體驗，然後再到眼鏡行驗光，最後把驗光數據回傳給 Sums 客服團隊。\n建議不管是輕度數或重度數的朋友，一定要驗兩次比較精準（初步檢驗、進階檢驗），確保最後拿到實體眼鏡戴起來沒有誤差。\n而配貨期間 Sums 和 flyingV 募資平台會公告最新的出貨狀況，並主動 Mail 給贊助者查詢貨況。\n試戴了所有款式、不同顏色的鏡框後，選擇 Sq. Ti 款式，顏色為霧灰色，並搭配抗藍光鏡片。\n不得不說，就算 Sums 結束募資優惠價，其品質、價格在所有連鎖品牌當中還是很有競爭力。\n​\n－實體通路  合作眼鏡行資訊\u0008，欲查看更多合作商家請至粉絲專頁詢問。\n 台北 ◆ 保視力專業眼鏡忠孝旗艦店｜台北市信義區忠孝東路五段273號｜12:00-21:00\n新北 ◆ 尖端視光眼鏡/驗光所（安平店）｜新北市中和區安平路77-1號1樓｜13:00-16:00、17:00-20:00\n桃園 ◆ 靖美眼鏡 UNUSeyewear｜桃園市中壢區新生路125號｜12:00-21:30\n台中 ◆ 光泰鐘錶眼鏡公司（國光店）｜台中市南區國光路25號｜10:00-21:30\n台南 ◆ 久必大眼鏡公司｜台南市中西區府前路一段409號｜11:00-21:00\n​\nRef  flyingV - SUMS 舒適眼鏡｜世界上最舒服的眼鏡 SUMS Eyewear Taiwan Gogoro Taiwan  ","permalink":"https://peterpowerfullife.com/blog/glasses-sums/","tags":null,"title":"SUMS 舒適眼鏡｜開箱群眾募資優質專案"},{"categories":["Tool 工具"],"contents":"走路聽 Podcast、搭車也聽 Podcast, 你一天當中有多少時間會聽 Podcast 呢？\n聽到節目分享的資訊想記下來卻不知道怎麼做筆記 \u0026hellip; 我自己是打開 Podcast 記下時間打在備忘錄上，急忙的時候就直接截圖有空再去整理 XD\n如果你也同樣有這個痛點，會透過這種方式去做筆記，看完這篇文章今後你不用這麼辛苦了 😾😾\n​\n目錄  Airr 是什麼? 給我一個買無線耳機的理由 - 運動筆記篇 Airr 版本的 Clubhouse? 把 AirrQuotes 同步到常用的筆記軟體 比 Airr 更強大的新工具?  ​\nAirr 是什麼?  先說在前面，目前只有 iOS 還沒有 Android 的版本 \u0026gt;\u0026lt;\u0026rdquo;\n 一開始打開 Airr 這款 App, 想說只是重新設計 UI 的 Podcast 而已，但開始探索它的功能後，發現它的功能實在太厲害了！\n它很多功能都很好用，但有一個功能解決最多人的痛點\u0008，只需要在 quote button 按紐點擊一下或是 AirPods Pro 無線耳機點 3 下，就可以把正在播放的片段儲存、備註筆記起來，這些儲存的片段稱為 “AirrQuotes” ，更可以設定筆記的預設時間。\n如果你之前也會人工去記節目上重點時間分鐘數，或是擷取一大段但還要從頭聽到尾才抓得到重點，那 “AirrQuotes” 可以幫助你解決這些問題。\n除此之外還有一些最基本但很貼心的功能：\n 從 Pocket Casts, Overcast 等其它平台匯入並同步你訂閱的節目 播放速度從 0.2 倍數開始調整（好讚呀） 設定時間中斷播放，我自己是把這功能當作是 Pomodoros(番茄鐘)來用  \u0008有些功能上的問題或對這個軟體有任何想法，也可以在 Twitter 上直接反饋給 Airr 的 Cofounder - David.\n​\n給我一個買無線耳機的理由 - 運動筆記篇 這裡以 Apple AirPods 來舉例，設定完點 2 下就儲存成 AirrQuotes 了（參照下圖 GIF 圖檔）\n買無線耳機真的不是只有潮而已\u0008 XD\n如果下次有人再說嘴買無線耳機只是跟風潮流，這時就有一個完美理由可以反擊回去了（誤\n透過 AirPods 耳機快速做筆記，如果你不是用 Pro 的話記得要先去設定\u0008\u0008(參照下圖)。設定完成，只需要點 2 下耳機就可以擷取預設秒數的 AirrQuote 片段。\n右邊的 AirPod 我一樣設定為播放/暫停，而之所以把左邊的 AirPod 設定為點擊 2 下回到上一個音軌，目的就是要生成 AirrQuotes 筆記\u0008，這也是參照官網的建議設定。\n舉例來說，今天快走運動正在聽 Stuff You Should Know by iHeartRadio 閒聊、介紹美國的文化、生活冷笑話。聽到有趣的片段點耳機 2 下就會自動儲存這些重點筆記。\n等到運動完休息打開電腦，把 Airr App 打開，可以針對這些筆記去做編輯，甚至還能分享、匯出，這是我分享並輸出成 Markdown 格式 ：\n  (45 second AirrQuote)\n  (45 second AirrQuote)\n  (45 second AirrQuote)\n  甚至可以決定要不要把 AirrQuote 公開（Private, Public），如果有定期舉辦讀書會、線下交流的活動，這功能真的很好用！\n​\nAirr 版本的 Clubhouse? 如果用過 Clubhouse 這個語音社交軟體，那你對 Airr 推出的 AirrSpaces 功能一定不陌生。\n簡單說就是加入了 Audio Chat Room(音頻聊天室)，目前這功能還蠻新的，團隊有 Host 一個 Room 介紹這功能\u001d。\n受到疫情影響，2019 年 Clubhouse 開始大受歡迎後，陸續各大社群軟體也都推出了類似的功能，有興趣可以再看看有哪些功能：\n Twitter Spaces Facebook Live Audio Rooms  ​\n把 AirrQuotes 同步到常用的筆記軟體 部分熱門的 Podcast 節目可以把內容生成逐字稿(Transcript)，雖然會有部分錯字不完全百分百正確，但它還是一個很方便的功能匯出只需要稍微做一下整理。\n除了逐字稿，最讚的就是把你的 AirrQuotes 筆記 Sync 到筆記軟體上，我本身是把 AirrQuotes 輸出成 Markdown 格式再去整理。如果你有使用以下的筆記軟體可以嘗試看看，官方或是 Youtubers 都有分享：\n 同步到 Notion by August Bradley. 同步到 Remnote, by Penolopie David。 同步到 Readwise, 詳細使用方式可以參考官方的教學。  ​\n比 Airr 更強大的新工具? 最近在社群上發現另一款 App - Snipd. 目前 iOS, Android 版本都已經推出了。\n它主打透過 AI 去辨識標題和內容後分類多個不同長度的章節，一樣可以透過無線耳機去註記時間。\n目前這軟體還蠻新穎的只單純下載來玩玩看，還沒計畫轉移到 Snipd, 期待這個軟體越來越成熟，有機會再紀錄個使用心得和大家分享。\n​\nRef  Airr - App Store Preview Cofounder - David Lu How do I save highlights from the podcasts I listen to using Airr? Capture Podcast Highlights Into Notion with the Airr Podcast App Snipd - Highlight \u0026amp; Take Notes from Podcasts  ","permalink":"https://peterpowerfullife.com/blog/notes-from-podcasts-using-airr/","tags":null,"title":"用 Airr 把 Podcast 聽到的內容做個筆記吧！"},{"categories":["Tool 工具"],"contents":"目錄   阿北出事了\n  真香！官方教學設定 SSH Key 還有 Token\n  曾設定 SSH Key 只要一行 Command 就解決這問題\n​\n  阿北出事了 一如往常地寫完 Code Push 到 GitHub 卻看到以下訊息：\n remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\n​\nremote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.\n​\nfatal: unable to access \u0026ldquo;\u0026hellip;\u0026rdquo; : The requested URL returned error: 403\n ​\n遇到的當下肯定慌了，不過這其實不是什麼大問題，只是 GitHub 不再支援用密碼去存取你的 Repository, 更精確地說就是從 HTTPS 改用 SSH Key, 而官網也有向使用者解釋：\n As previously announced, starting on August 13, 2021, at 09:00 PST, we will no longer accept account passwords when authenticating Git operations on GitHub.com. Instead, token-based authentication (for example, personal access, OAuth, SSH Key, or GitHub App installation token) will be required for all authenticated Git operations.\n​\nPlease refer to this blog post for instructions on what you need to do to continue using git operations securely.\n​\nRemoval\nAugust 13, 2021, at 09:00 PST\n ​\n－HTTPS 和 SSH Key 的差別就像有 FaceID 不用而是手打密碼（誤 在幾年前 Github 還沒被微軟收購時，官方其實是推薦使用 HTTPS，但還是有提供 SSH Key 的連線方式，兩者差別在於：\n HTTPS：以 Github 來說明，在 Clone 的時候是需要輸入帳號密碼的，如果在 Clone 時並無要求輸入，大部分是因為電腦已經紀錄過帳密就不需要再重新輸入。 SSH Key：在電腦中設定好金鑰， Clone 時會經過比對，比對正確才能執行，因此不需要額外的帳號密碼。  兩者執行出來的結果會是一樣的，只是使用的方式不同，設定好 SSH Key 之後要執行 git clone 的時候，就可以使用 Clone via SSH 這個選項。\n​\n真香！官方教學設定 SSH Key 還有 Token 如果想用 Token 或是還沒設定過 SSH Key，可以參考官方的教學文章：\n Adding a new SSH key to your GitHub account Creating a personal access token  ​\n曾設定 SSH Key 只要一行 Command 就解決這問題 Push 左推右推都推不上去，但如果你已經設定過 SSH Key 基本上這個 Command 就解決了：\n$ git remote set-url origin git@github.com:{user_id}/{project_name}.git 實際操作範例，參考 Stackoverflow 開發者分享，一開始 Push 遇到這個錯誤\n檢視一下 git log 執行上述的 Command 後，記得要把你當前的 Branch 推上去（這裡是 master） ​\nRef  Cover Pic - flaticon 設定 Github SSH 金鑰 feat. Github SSH、HTTPS 的差異 Multiple SSH Keys settings for different github account Set up SSH with Sourcetree on macOS  ","permalink":"https://peterpowerfullife.com/blog/github-shut-down-password/","tags":null,"title":"GitHub 不能再使用密碼驗證，你有更好的選澤 - SSH Key"},{"categories":["Project Management 專案管理"],"contents":" 沒有技術背景能夠當產品經理嗎？ 沒有技術背景如何和工程師協作？ 所以產品經理要會技術嗎？達到哪種程度才行？  以上大概是許多人一直都有的疑問。擁有技術背景對我確實非常有幫助，但其實產品經理最重要的並不是技術背景，以下的資訊希望對你有些幫助。\n​\n目錄  清楚自己是什麼角色 Over-Communication（過度溝通） 懂技術對產品經理有哪些幫助？ RD 不是你的 UberEats  ​\n清楚自己是什麼角色 團隊裡的各個職務當中，RD 規劃技術架構、交付程式；UI/UX Designer 負責介面和流程設計，但產品經理絕對會參與一個產品從無到有的各個階段：\n 起初的收集需求、Persona、撰寫 Spec(BRD, MRD, PRD) 開發中各階段的任務優先排序 完成開發後的功能測試  以上部分省略，因為產品經理這個角色會因為你所待的公司、團隊而有所差異。\n有些公司職務抬頭雖是產品經理，但實際上只是在管理專案，像是：排程、追進度，完全沒涉及到產品規劃。那需求怎來的？大部分都是老闆去看競品有哪些功能、和身邊朋友閒聊得到的資訊，最後再請公司的 PM 們直接去開發類似的功能服務。\n這沒有對錯，也不要絕望(笑)，還是有公司的產品經理職務和工作內容是相吻合的，也有一些方式可以去做改變，產品經理不是只有做產品規劃而已，很多時候也需要懂得向上管理，最重要的是，必須清楚在團隊當中自己扮演的角色，以及工程師理想中的產品經理等。\n 延伸文章：“專案管理(下) - Project Manager職務和其工作細節“\n 除此之外，因應團隊不同的開發方式（Methodology）實際的交付流程也不同，像是 Agile/Scrum(敏捷式), Waterfall(瀑布式), Kanban(看板), 當然還有 Meteo Fall Development(隕石式開發) XD\n這裡並沒有要討論哪一種方式比較好，或是什麼團隊才真正利於產品經理成長等等，只要能識別出需求、打造出解決客戶痛點並提供對應的服務，絕對有讓你成長的機會，而當中所要學習的東西、付出的代價，不是你能夠想像的！\n​​\nOver-Communication（過度溝通） 過度溝通不是要你 Slack, Teams 上不斷地丟訊息給夥伴們，或是很白目的 嗨！在嗎？ 然後就沒有然後了 ..\n而是業務講解完一個 Domain knowledge、RD 講解完一個\u0008技術架構後，再用自己的方式內化吸收說給對方聽；反過來今天產品經理在規劃產品確保技術的可行性時，不管你的 PRD, 簡報多麽清楚，在說明完之後 RD 們有沒有完全理解這個需求？\n過程就像在打打乒乓球一樣，來來回回幾輪透過這樣的方式確認 Input, Output 確保大家的理解是一致的。\n​​\n懂技術對產品經理有哪些幫助？  以下當作參考，實際還是要以團隊為主，產品是 App, Web, 硬體, 韌體？ 那技術架構還是有很大的差異。\n PM 不用實際動手下去寫 Code 或是做一些技術上的決策，但至少要知道團隊的技術架構，RD 之間一定會用「行話」去做溝通，所以知道相關的技術性名詞和 RD 溝通不會有太多的隔閡，也會提升團隊對你的信任感。\n關於技術面大概要知道哪些東西？以下可以當作參考：\n 團隊是用 MVC 的架構嗎？還是前後端分離呢？ Front-end（前端）和 Back-end（後端）用哪些技術框架？ RD 知道業務邏輯後是怎麼拆分 Component 的？彼此之間的 Dependency 多深？ 如果要做 A/B Testing，技術團隊需要 PM 提供哪些東西呢？ 團隊的開發流程是哪一種呢？\u0008有採用 Git Flow 嗎？ 團隊是怎麼 Deploy(部署) 程式碼的？ Git branch 怎麼開？  ​​\n還有一些問題一定要非常清楚，因為開發過程如果炸掉出事也比較清楚該找誰協助：\n 團隊有沒有 Code Review 機制？ 團隊都什麼時候上 Code？有沒有職務代理人？ 如果我有技術問題是直接找 RD 嗎？還是找 Tech-lead 呢？ 有哪些環境(DEV, SIT, UAT, PROD)？如果明天就要給客戶 Demo，環境都可以正常運作嗎？可以請 Back-end 先倒預設資料嗎？  ​​\n－所以 PM 到底要不要「懂技術」？ 想必是要的，但不是真正下去寫，而是當問題發生你知道問題的根源、該尋求哪些資源去解決問題！\n當你了解技術架構不僅可以建立和技術團隊的信任感，知道技術的複雜度也利於擬定：\n 替代方案 風險評估等級 概算出開發時程  我也從實際經驗當中體悟到，重點不在於到底要不要有技術背景，而是保持學習的熱情，透過手上的資源去解決當前的問題。\n​​\nRD 不是你的 UberEats  喂！那個東西壞了，你馬上改一下 我 RD 出身的所以我知道這很簡單，快去寫 Code 吧！ 這很簡單吧？3 小時？ 4 小時？應該不用半天就好了！ 你就 VS Code 打開，看是哪一段直接摳過去會動就好啦！  如果今天你和大家還不熟，或是你根本不知道同事的底線在哪裡，對 RD 說這些話應該不用活了，這也是為什麼很多公司老闆、RD 認為 PM 就是只會出一張嘴，又裝自己真的會技術，這種溝通方式完全是自殺式行為 🤬🤬🤬。\n解決問題的能力是人人在生活、職場都必點的技能，隨著遇到的問題難度不斷提升，每次遇到棘手或沒處理過的問題都是在考驗著我們。\nRD 能透過他的工程角度一步步剖析，透過技術解決當前的問題，如果真的、真的有任何狀況，就直接向 RD 大大們求救，有些狀況你不知道問題出在哪，不知道該找誰幫忙，在團隊的任何人看到應該會協助你才是。\n另外會議的部分，對 PM 來說一整天下來可能有好幾場會議要參加，像是：\n 參與 UI/UX Designer 的 User Interview（用戶訪談） 收集 Stakeholder（利害關係人）對產品的想法 和 UI/UX Designer 確認設計稿及流程  還有太多太多寫不完 \u0026hellip;\n但如果今天 PM 約技術團隊好幾場會議，那不用一個禮拜大家可能都不理你了，這就像有些夥伴總是在每封 Mail 附註 ASAP 一樣意思(笑)。\n在需求上的協作，一定要盡可能確保 Spec, Task 是明確、齊全的情況下才和 RD 們敲定會議，或是內部有統一文件可以同步/非同步交流訊息也是方法之一。\n​​\n－生命共同體，不斷和團隊更新訊息 團隊當中人人都是不可缺少的一部分，產品就是 PM 釐清用戶需求、設計師確保介面及流程以及工程師的技術所打造出來的結晶。\n在開發之前的產品規劃期間讓 RD 緊密參與也有幾個好處：\n 對於設計稿有異議、技術可行性的問題能夠儘早提出並尋找其他的解決方式。 讓 RD 知道，透過他的精湛技術是要解決哪些真實的用戶需求，同時也灌輸產品思維給他們，和用戶建立同理心。  產品經理和 RD 之間的協作大大影響整個產品開發的有效性，除了自身的專業之外，懂一點人心，並不斷地維護彼此的信任也是同等重要的學習目標。\n​\nRef  meme梗圖倉庫  ","permalink":"https://peterpowerfullife.com/blog/howto-working-with-engineers/","tags":null,"title":"不管你是否具備技術背景，產品經理和工程師合作必須知道的事"},{"categories":["Product Development 產品開發"],"contents":"當你 \u0026hellip;\n  要優化一個產品，你必須先對這個產品有所認識\n  用戶反應產品體驗差，那要怎麼查看產品出了什麼問題？\n  團隊沒有設計師，你怎麼確認產品的 UI / UX 沒問題？\n  這裡好好來認識一下 10 大易用性原則，以及淺談 Heuristic evaluation(啟發式評估) 和 Usability testing(易用性測試)，而他們又有什麼差異？\n​\n目錄   10 大易用性原則能做什麼？\n  Usability testing 和 Heuristic Evaluation 是什麼？又有什麼差異？\n  如何進行易用性測試快速認識一個產品？\n​\n  10 大易用性原則能做什麼？ 簡單說這十個 易用性原則（Usability Principles） 它不是一個國際標準，純粹是一個收集很多易用性專家提出的研究成果所總結的 10 個經驗談。而這 10 個原則可以用來檢視產品有無符合易用性，也能夠去留意到一般用戶不會觀察到的細節。\n當團隊夥伴、實際用戶回饋產品很難用、使用體驗差，這時候團隊沒有設計師或是人力資源都用在其他產品的開發上，大家都沒空理你，這時怎麼辦？（我真的有經歷過 XD）\n1. Visibility of system status（狀態可視）\n2. Match between system and the real world（真實關聯）\n3. User control and freedom（操控自由）\n4. Consistency and standards（一致性）\n5. Error prevention（防呆設計）\n6. Recognition rather than recall（易取得訊息）\n7. Flexibility and efficiency of use（效率和彈性）\n8. Aesthetic and minimalist design（簡約美學）\n9. Help users recognize, diagnose, and recover from errors（異常處理）\n10. Help and documentation（FAQ 或使用指南）\n在軟體產品上，\u0008透過以下這 10 大易用性原則去做分析並有實際依據去評估產品，這樣做能夠提升對產品的眼光，好不好用不再只是一種主觀性的感覺，而當你要做優化迭代也有一個原則可循。\n​\n1. Visibility of system status（狀態可視） 系統能即時回饋，讓使用者察覺到狀態變化。\n手機螢幕從關閉狀態，一但收到 Line 訊息、新聞推播，螢幕會變亮，或是摩托車、汽車快沒油了燈會開始閃爍，人都喜歡控制手上的東西，這樣才有安全感。使用者在操作產品的過程，不同的操作會提示給使用者當前的狀態。\n像是 Uber 和 Uber Eats 服務都有具體讓使用者、乘客知道「你距離目的地多遠、你的餐點在哪裡」：\n​\n2. Match between system and the real world（真實關聯） 使用一般人的白話文，而不是專業術語去表達意思。\n像是：手機電話簿、指南針的方位、手操控電腦滑鼠 Hover 出現的 icon 提示點擊。\n不過大家最常見的應該就是網頁服務的 404 對吧？這種 Error Code 只有技術開發者才知道，一般人想知道的是為什麼操作失誤？是密碼錯了？少填些哪些資料？\n現實生活中根本不會知道 404 是什麼，系統在設計上應該要按照使用者的方式去溝通，透過熟悉的單字、概念就能表達實際含義。\n​\n3. User control and freedom（操控自由） 提供使用者清楚的進出通道及操作反悔。\n在設計系統時，清楚地標記「緊急出口」離開不必要的狀態，而且不用過多的確認，最糟糕的體驗，大概是使用者一定要走完所有流程才能返回上個步驟、跳脫操作 XD\n​\n4. Consistency and standards（一致性） 同一事物和同類操作的示意要保持一致。\n影音 Play(播放) Icon 常常會被誤用或是亂用，例如只是要示意一個多媒體區域放了播放 icon，這樣很容易造成使用者的混淆，會分不清楚什麼時候看到這個 icon 可以按，而什麼時候不能按。\n而大家都不陌生的 Microsoft 作業軟體就符合一致性設計：\n​\n5. Error prevention（防呆設計） 操作時不易犯錯的預設值或介面防呆機制。\n常見的像是帳號密碼的資訊輸入上，帳號限定為 Email 格式若填上電話，這時我們就會提示使用者輸入正確的內容，並具體提示錯誤在哪裏。\n參考 flyingV 群眾募資的註冊、登入頁面，以及 Google search URL 的提示：\n​\n6. Recognition rather than recall（易取得訊息） 提供必要的提示訊息，減少造成記憶讀取負擔。\n同樣是使用者輸入資訊的情境，要減少用戶自己去做記憶提取跟回想的動作，最好是連想都不用想，就可以直接使用自行定義的預設值。\n目前的智慧型手機，可以透過密碼登入到一個產品服務上，會主動問你要不要儲存現在的密碼？下次回來使用時直接透過 Face ID 或手機解鎖密碼，就能直接填上預設值。\n常見的服務不只在手機上，我們日常使用的軟體也有這樣的貼心設計：\n  Google Search \u0008- 搜尋時會自動帶入曾經訪問過的網站\n  Google Drive - 在首頁顯示\u0008「最近開啟檔案」\n  Uber - 顯示曾經去過的目的地，自動留存乘客「想再去一次」的地點\n​\n  7. Flexibility and efficiency of use（效率和彈性） 彈性提供操作方式，適合不同程度的新手與專家。\n一般針對產品的新手使用者，會需要一步一步提供明確的資訊來引導，而本身對產品非常熟悉的人、黏著度高的用戶根本沒有耐心一步一步來，為了效率他們會透過更改預設值、新增快捷鍵，更快、更有效率地完成自身的任務。所以針對兩種不同需求的使用者必須提供不同的武器、技能。\n任何軟體產品、網頁服務都有提供快捷鍵（shortcut 或 Hot key）：\n​\n8. Aesthetic and minimalist design（簡約美學） 刪除多餘訊息，避免覆蓋重要資訊。\n近幾年開始推崇極簡主義、極簡生活，有時候過多的設計只會造成使用者的困擾，在產品設計上如果有過多的提示訊息或是複雜的 UI 視覺化互動，使用者就必須花更多力氣在產品上，只需要提供必要的資訊，讓使用者的集中力提升、減少焦慮感。\n同樣可以參考 flyingV 群眾募資的提案百科教學 或 Google 首頁：\n​\n9. Help users recognize, diagnose, and recover from errors（異常處理） 清楚告知異常發生原因，並協助恢復正常。\n軟體系統總是會發生各種狀況，除了程式出問題，當然也有可能是使用者自己的操作造成的，例如：電話費忘記繳錢連不上手機網路，所以無法使用軟體產品？ 所以在設計系統時要考慮各種的 throws exception（例外狀況）。\n如果只顯示 error not found!! 或是 錯誤！ 這種模糊訊息，使用者一定會很錯愕不知道怎辦對吧？在使用者遇到異常問題的時候，我們設計產品的人只需要具體告知當前的情形，避免產生慌張或是怪罪系統的情緒，並且給予使用者可以自己解決的行動提示。\n例如電子豹 EDM 發送系統，在匯入資料發生錯誤時不僅提示狀態（成功、失敗），更具體說明什麼錯誤，並提供解決方式：\n​\n10. Help and documentation（FAQ 或使用指南） 提供自助查詢的文件，列出具體實現的步驟。\n不管是 ToB 或 ToC 產品，都應該要提供使用指南或者是詳細的 FAQ，最好的狀況就是不看操作手冊就能上手軟體系統，但這其實也牽扯很多面向，這裡不多做討論。\n產品開發團隊必須要以使用者為中心，具體地告訴使用者：要達成這個需求，需要哪些步驟來完成。\n操作手冊寫完後怎麼確保使用者一定看得懂？除了找起初的用戶訪談對象，在許可下詢問不同行的身邊親友是很好的方法之一。如果是 ToC 的產品文件一定要用「人話」去寫，而不是用「行話」。\n這部分可以參考 Dropbox, Slack 和 Netflix\n​\nUsability testing 和 Heuristic Evaluation 是什麼？又有什麼差異？ UX 始祖 Jakob Nielsen 在 Usability Engineering 提到，Usability testing 是以用戶為中心的互動式技術，使用者透過測試來評估產品，它反應了真實用戶如何使用一個軟體系統。\nHeuristic Evaluation(HE, 啟發式評估)，\u0008\u0008一開始看到這個翻譯還真的看不太懂是什麼意思，但透過原文認識 Heuristic 這個單字底層的含義，可以作為「捷徑」、「快速」、「要訣」。其中的易用性原則（Usability Principles） 就是上面提到的 10 個設計指南，可以確認、評估軟體設計上的易用性問題，透過易用性原則可以判斷軟體的 UI / UX 有沒有符合規範。 而易用性原則不是一個國際標準，純粹是一個收集很多易用性專家提出的研究成果所總結的 10 個經驗談。\n而 Usability testing 和 HE 最大的差異就是，HE 不是針對使用產品的用戶。 但我們會透過其中的易用性原則用來檢視產品有無符合易用性，也就是透過這個準則，我們能夠去留意到一般用戶不會觀察到的細節，是以比較全觀的角度看待產品。\n妥善運用這兩個方法，我們能夠\u0008在設計階段就能即時發現問題，進入開發前就幫公司省下一大筆錢呀！\n​\n如何進行易用性測試快速認識一個產品？  澄清和註明一下，我曾經待過沒有 UI / UX 設計師的團隊，這裡僅以快速認識一款產品並檢視有哪些問題，實際上有很多細節和訣竅是專業設計師才知道的，所以有些地方沒解釋清楚請見諒喔！\n 在 Persona（人物誌）提到產品經理第一天到職該做的事就是去翻閱 Persona, User Journey Map 相關文件，藉此了解產品以及日後如何做優化迭代、擬定產品策略。\n另外能以「用戶視角」去使用一款產品，那我們要怎麼進行？誰要進行？該準備什麼？\n－排定一連串的 Usability tasks 排定各種以「使用者」角度的 Scenario(情境) 去做任務測試，每一個 Scenario 會以 Usability tasks 呈現，以 Uber \u0008來舉例，大概是這樣：\n# Task1 - 選擇目的地 * 我是剛下班要趕去聚餐的上班族，打開地圖能長按 Pin icon 並拖曳選擇位置。 # Task2 - 選擇信用卡付款方式 * 乘車之前，我可以預先設定信用卡付款，能新增最多 5 張信用卡，並以 1 張作為我的預設信用卡付款。 當然，如果更嚴謹得話，我有看過外包團隊是用這樣的格式，供參考：\n Task（任務名稱, 編號） Research question（研究問題） Inputs（輸入） Steps（執行步驟） Success criteria（訂定成功的標準） Notes（備註）  另外，任務測試還分為 Exploratory tasks(探索) 和 Specific tasks(具體) 這兩個類型：\n  Exploratory tasks(探索)：探索\u0008型的測試一定要手動去進行。它偏向研究導向，沒有一定的標準答案，這種測試方式比較少見，需要透過非常資深的設計師、QA 去進行。\n  Specific tasks(具體)：上面一開始提到 Uber 測試任務就是屬於具體類型的測試，它有一定的答案，不會有任何的模糊地帶。\n​\n  －什麼時候進行？ 我建議是越早越好，你不會希望產品做到 6,7 成了還要重新設計吧？\n在設計階段\u0008進行這些測試、評估並即時發現問題，會幫助團隊省下很多資源，最重要的是產品上市後能真正解決用戶的問題，而他們用起來也開心～\n它看起來是一個重要不緊急的事情，但如果一直拖延的話最終它會向你反撲、排山倒海的客訴佔據你的工作，甚至會增加團隊整個營運成本（工時、人力、重工）。\n​\n－參與人員＆測試過程 團隊內部幾位夥伴針對產品列出相關的 Scenario 去做測試，不用團隊所有人都參加，但建議至少 UI/UX 設計師、QA 測試工程師、產品經理及 RD 都要推派一名參加。\n如果團隊沒有人知道怎麼測試，起初需要在 Mail \u0008多做一些說明，讓參與的人知道易用性原則是什麼，確保大家有一定的概念才進行。\n測試過程當中，也要詳細記錄過程的正面、負面問題。\n​\n－測試結果 依據影響級別 (High, Medium, Low) 給羅列出來，至於分屬哪一個級別會依據 ToB, ToC 不同的產品類型訂定不同的標準，不過一般會這麼區分：\n High =\u0026gt; 嚴重影響主流程、服務 Medium =\u0026gt; 雖不影響主流程、服務，但是體驗很差，必須繞了一大圈使用者才能完成任務 Low =\u0026gt; 介面 UI 上的樣式不符合規範、設計  最後記得，一定要有人去收集所有的回饋，把所有回饋進行分類、待執行優化的 backlog 這樣進行易用性測試才有意義！\n​\nRef  Jakob Nielsen - Usability Engineering usability.gov 10 Usability Heuristics for User Interface Design Download a free poster XXC@Note Image by Jakob Nielsen mindk Pic - Manja Vitolic  ","permalink":"https://peterpowerfullife.com/blog/howto-know-the-product/","tags":null,"title":"如何快速認識一個產品 - Usability Testing（易用性測試）"},{"categories":["SEO 搜尋引擎最佳化"],"contents":"如果你本身是 Blogger 或是雜誌編輯、報社工作人員等文字工作者，都需要透過圖片來提高視覺感受、輔助說明，這時候怎麼使用圖像來提升 Findability(可查找性、可發現性) 和網頁運作速度，就是一個必學的課題了。\n​\n目錄   為什麼要使用圖片？\n  圖片有助於 SEO 是什麼原理？\n  只有適合的格式，沒有正確的圖片格式\n  除了格式，大部分容易疏忽的細節\n​\n  為什麼要使用圖片？ 閱讀一篇文章、看一本書，有圖片的話就更格外地吸引人對吧？\n把概念、無形的東西用更具體、具象化的方式呈現，更容易讓人去聯想、加深記憶。\n在商業應用上，過去在實體店內消費者不僅可以看到產品，還可以去摸它，但現在已經走向 E-Commerce(電子商務) 時代，又因為疫情關係更導致業務、運送量大增，如何運用Visual Marketing(視覺行銷)以線上服務提供給 TA 就是非常重要的事情。\n你不一定要用圖片，但如果有的話絕對是一大加分，更可以優化搜尋引擎讓 TA、有需求的潛在顧客快速在網路上找到你。\n​\n圖片有助於 SEO 是什麼原理？ Sitemap(網站地圖) 就像是去醫院做健康檢查的報告一樣，這個檔案會有網站的各種網址，像是圖片連結、影片連結，只有電腦看得懂的XML文件等（最常使用的規範，更多內容請參考 Google 搜尋中心指南），透過提交 Sitemap 報告給搜尋引擎，讓搜尋引擎爬蟲去讀取報告的內容生成索引讓使用者搜尋。\n參考以下 Sitemap 範例（由 Google 搜尋中心指南提供），示範 http://example.com/sample1.html 這個網頁的 Sitemap。\n該網頁包含兩張圖片以及一個 http://example.com/sample2.html 項目，這個項目中又包含一張圖片以及圖片 Sitemap 中所有可選用的中繼資料。\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;urlset xmlns=\u0026#34;http://www.sitemaps.org/schemas/sitemap/0.9\u0026#34; xmlns:image=\u0026#34;http://www.google.com/schemas/sitemap-image/1.1\u0026#34;\u0026gt; \u0026lt;url\u0026gt; \u0026lt;loc\u0026gt;http://example.com/sample1.html\u0026lt;/loc\u0026gt; \u0026lt;image:image\u0026gt; \u0026lt;image:loc\u0026gt;http://example.com/image.jpg\u0026lt;/image:loc\u0026gt; \u0026lt;/image:image\u0026gt; \u0026lt;image:image\u0026gt; \u0026lt;image:loc\u0026gt;http://example.com/photo.jpg\u0026lt;/image:loc\u0026gt; \u0026lt;/image:image\u0026gt; \u0026lt;/url\u0026gt; \u0026lt;url\u0026gt; \u0026lt;loc\u0026gt;http://example.com/sample2.html\u0026lt;/loc\u0026gt; \u0026lt;image:image\u0026gt; \u0026lt;image:loc\u0026gt;http://example.com/picture.jpg\u0026lt;/image:loc\u0026gt; \u0026lt;image:caption\u0026gt;A funny picture of a cat eating cabbage\u0026lt;/image:caption\u0026gt; \u0026lt;image:geo_location\u0026gt;Lyon, France\u0026lt;/image:geo_location\u0026gt; \u0026lt;image:title\u0026gt;Cat vs Cabbage\u0026lt;/image:title\u0026gt; \u0026lt;image:license\u0026gt;http://example.com/image-license\u0026lt;/image:license\u0026gt; \u0026lt;/image:image\u0026gt; \u0026lt;/url\u0026gt; \u0026lt;/urlset\u0026gt; ​\n－Sitemap 製作工具  以下提供幾個製作 Sitemap 的工具，便於製作 sitemap.xml 檔案。\n ＊GlooMaps 以「頁面」為單位，簡單、快速繪製頁面之間的連結。\n​\n＊xml-sitemaps.com 手刻製作 Sitemap 檔案在起初網站進行開發時還算簡便、容易，但網站成長到一定規模就需要更進階的手法來製作，這個工具限定 500 個網址，網站不大其實已經非常夠用了。\n這裡以 UFC 混合武術格鬥賽的官網 為例，抓到對應的網址並有 61.49 Mb 的大小。\n​\n－圖片加上 alt 屬性描述 alt 是圖片的替代文字，也就是在圖片失效的時候所要呈現的文字，如果圖片可以正常顯示 alt 就不會有任何的功能。\n圖片的 alt 描述在 html 中的使用方式為：\n\u0026lt;img src=\u0026#34;圖片網址\u0026#34; alt=\u0026#34;圖片替代文字\u0026#34; title=\u0026#34;圖片標題\u0026#34;\u0026gt; alt 對圖片的 SEO 優化也同等重要，它不只是替代文字，更能夠提供搜尋引擎抓取圖片時清楚知道圖片的主題內容。\n這裡舉例好、壞的圖片 alt 描述：\n✅ \u0026lt;img src=\u0026quot;animal.jpg\u0026quot; alt=\u0026quot;animal\u0026quot;\u0026gt;  這個 alt 替代文字，還算可以，因為它的描述不是很具體。\n✅ \u0026lt;img src=\u0026quot;animal.jpg\u0026quot; alt=\u0026quot;giraffe under blue sky and white cloud\u0026quot;\u0026gt; 這是一個比較好的選擇，具體描述圖片中的內容（藍天白雲下的長頸鹿）。\n❌ \u0026lt;img src=\u0026quot;animal.jpg\u0026quot; alt=\u0026quot;\u0026quot;\u0026gt; 空的，完全沒填寫。\n❌ \u0026lt;img src=\u0026quot;animal.jpg\u0026quot; alt=\u0026quot;giraffe animal animals giraffe and animals\u0026quot;\u0026gt; 不建議為了填寫純粹加入幾個推疊關鍵字。\n​\n只有適合的格式，沒有正確的圖片格式 －該使用哪種圖片格式呢？ 在 UX Collective 網站上有一位 UX 設計師 Allen Hsu，將4種圖片格式JPG、PNG、GIF、SVG利用詼諧幽默的方式，教導我們這些麻瓜們在什麼情況下該用什麼檔案格式（上圖），雖然不是真的完全適用所有情況，但簡單的方式讓人一目瞭然最基礎的區分法。\n圖片的格式種類有好幾種，但最常見的有以下幾個：\n  JPG / JPEG：容量小，運用尺寸大的圖片和插圖，使用此檔案格式不僅不佔用空間，在清晰度、顏色對比都非常有幫助，是常用的圖片格式。\n  PNG：使用非破壞性資料壓縮方式，如果想要圖片保留背景透明度，就可以使用 PNG，但缺點是容量很大！\n  SVG：可縮放的向量圖形(Scalable Vector Graphics)，\u0008能呈現任何尺寸，不會出現馬賽克。\n  GIF：只顯示幾秒的動態圖片，缺點就是容易分散讀者注意力、容量大 Loading 速度較慢。\n​\n  －JPG 和 JPEG 的差別 很多人一定有想過，那 JPG 和 JPEG 有什麼差別？\n先說答案，是沒有差別的！！ 它們並沒有太大區別，甚至檔案格式名稱可以互換使用。\n為什麼會有差異呢？差異在哪？\n在早期 Windows 有命名格式限制，需要 3 個字母的檔案格式名稱，所以可想而知 .jpeg 就變成了 .jpg，但儘管 DOS 和 Windows 有命名限制，但 UNIX 系統沒有，所以 Mac 和 UNIX 使用者就繼續使用了 .jpeg 的檔案格式名稱。\n看完以上的比較和實際的應用場景後，一般圖片使用還是以 JPG / JPEG 較適合，既提升閱讀感也能輔助說明。\n​\n除了格式，大部分容易疏忽的細節  圖片檔案名稱、圖片有無壓縮、圖片版權問題等細節，這都是一般人常常忽略的地方。\n －圖片檔案名稱 如果要優化SEO(搜尋引擎最佳化)，那麼有結構性的關鍵字非常得重要。\n我曾經這樣命名圖片的檔名(笑)：\n 20190120_SEO-01 SEO_01  這有什麼問題？\u0008\u0008\u0008dash(-), underline(_) 這是可以的，但：\n  時間日期不太重要也不夠具體\n  關鍵字後面只有編號也沒什麼具體意義\n​\n  比較好的命名方式參考以下：\n SEO_改善圖片優化SEO-01 SEO_optimize-image-for-seo-01 SEO_OptimizeImageForSeo-01  這樣的命名除了夠具體之外，也有助於優化 SEO，因為我們以關鍵字作為開頭後續用相連的簡短敘述，這樣才有助於 Google 或其他搜尋引擎的爬蟲注意。\n​\n－壓縮圖片 你有沒有一種經驗，瀏覽網頁滾輪已經滑到最後了，但圖片好像看到老虎一樣都不出現？\n要確保圖片的格式、名稱之外，還要留意圖片本身容量的大小，上傳圖片前記得先壓縮圖片。\n這裡推薦幾個圖片壓縮工具：\n  ImageOptim（Mac專用）\n  ImageOptim（Linux, Windows專用）\n  Tinypng（最推薦的熊貓）\n  jpeg.io（任何格式的圖片都轉為壓縮過的 jpeg）\n  WP Smush（朋友使用 Wordpress 推薦的工具，但改版後變得難用了QQ）\n​\n  －圖片版權 不管是哪種圖片格式，一定要留意版權問題。\n幾年前成吉思汗健身房館長的服飾品牌 - Notorious(惡名昭彰) \u0008的 Logo 因為設計師誤用了別人的素材，因而主動主動賠償給原著。（純時事探討，非惡意抨擊）\n我們可以透過 Google 圖片和其中的過濾條件去找所需要的圖片，也可以在網路上找提供自由應用的資源去應用\u0008，以下附上我常用的圖庫區：\n  Unsplash\n  SSP\n  Pixabay\n  Wikimedia Commons\n  Freerange Stock\n​\n  Ref  Cover Pic - Photo by Solen Feyissa Visual marketing Image file formats Sitemaps XML format Google 圖片最佳做法 JPG與JPEG之間的差異 【硬塞科技字典】什麼是電子商務（E-Commerce）？ How to Improve SEO Performance: 3 Tips to Quickly Elevate Your Website’s Rankings and Increase Your Domain Authority 17 places the kids can see animals in the UAE 一圖搞懂JPG、PNG、GIF、SVG圖片檔案格式使用時機  ","permalink":"https://peterpowerfullife.com/blog/seo-image-howto-optimize-image-for-seo/","tags":null,"title":"SEO - 改善圖片，優化搜尋引擎"},{"categories":["Product Development 產品開發"],"contents":"如果看完前面分享過的 Persona, User Journey Map 後，想必你對自身產品絕對有足夠的認識，理解競品分析之前可以問問自己這幾個問題：\n 我的產品潛在用戶已經找到他們所需要的產品、服務了嗎？ 分析競品之前，我真的完全清楚自己產品的定位、優劣勢嗎？ 除了我的產品之外，還有其他公司 正在做（想要做） 和我同性質的產品嗎？  沒錯，在競品分析之前，你要先認識自己本身再來對外研究分析。\n市場競爭不全然是壞事，相反地會因為「競爭」讓參與者當作是一種進步的動力，藉以提供更好的產品、服務給使用者。不管是處於穩定發展還是正找尋自己的 niche(利基市場) 的產品，若懂得做競品分析，對自身產品和產品策略一定有絕對的幫助。\n​\n目錄  B2B vs B2C 初入競品分析會遇到什麼問題？你的目的是什麼？ 想要更快做競品分析的方式？那就用 4P3C 吧！ 競品分析做完了，然後呢？  ​\nB2B vs B2C 這裡針對競品分析稍微解釋一下，B2B 和 B2C 在產品開發、競品分析還是有一些差異：\n B2C 只要改一個小小的功能可能就直接對營收、滿意度有直接影響，例如：VoiceTube 每天限定看三部影片，需付費解鎖造成使用者不滿。 B2B 除了面向企業用戶以外，還有另一塊 B2B2C 的需求（幫企業做產品再讓企業販售給消費者）。  對於 B2B 來說產品賣不賣得出去有時候不單只是產品策略和供需問題，業務和行銷端怎麼切入市場、和客戶之間的關係如何，都是能否拿到訂單的因素。\n​\n初入競品分析會遇到什麼問題？你的目的是什麼？ 你可以試著在瀏覽器搜尋競品分析，相信會出現很多非常優質的教學文章，但重點可能多到讓你不知道從哪裡上手，看完之後又覺得不知道怎麼開始？\n其實你需要在競品分析之前先問問自己：\n 為什麼要做競品分析？你的目的是什麼？ 競品分析廣到產業、公司、關聯性產品、品牌定位等，你是要分析哪一個層面？  ​\n－為什麼要做競品分析？你的目的是什麼？ 以下這幾點可能是驅使你要做競品分析的原因：\n 在你之前，誰做了哪些產品、服務？結果如何？ 幫助自己更深層地認識整個產業、產品發展趨勢 尋求投資者，能具體陳述自己產品的優勢、切入哪個市場？ 同產業的競爭者不斷地推陳出新，我們如何跟上別人或做出更好的產品？ 預備未來，產品 / 公司什麼時候要做 Pivot(轉型)、規劃全新的產品生命週期 老闆聽信身邊朋友的各種訊息後，馬上要團隊做這件事（別懷疑很常發生XD  ​\n－競品分析，是要分析哪一個層面？  供應鏈 產業地位 內容策略 訂價策略 行銷、銷售策略 技術應用（Tech Stack 競品提供產品的具體服務 社群媒體（用哪種平台去曝光 SWOT（分析優劣勢、機會和威脅  很多對吧？這些東西做完不曉得要花你多少時間？嚇到了嗎ＸＤ\n不管是你分析的原因、層面，其實不只有以上這些而已，還有非常多的原因驅使產品經理去做競品分析這件事，\n但無論如何一定要先確保你做競品分析的動機還有分析層面，方向對了深入去執行才會有產出結果。\n​\n想要更快做競品分析的方式？那就用 4P3C 吧！ 如果你不知道怎麼開始做競品、沒有任何方向，也不知道要分析哪個層面，那就從 4P3C 開始吧！\n4P3C 它們是一種 Marketing Mix(行銷組合) 策略，包含可控制、不可控制的變數，對於規劃、推動產品非常有幫助，做內、外部分析也非常適用。\n這個組合包含以下，沒有一定的分析順序：\n​\n－4P（可控制的變數）   Product 產品   Price 價格   Promotion 促銷   Place 地點   ​\n＊Product 產品 把自己當作使用者、客戶，去體驗、嘗試使用，從這當中可以觀察：\n 為什麼產品要這樣設計？ 為什麼流程是這樣規劃？ 最主要是解決哪個問題？  這個環節決定產品和整個服務，一間公司推出產品時一定會經過市場分析、研究，確保產品在市場中有一定的需求才會推出。\n​\n＊Price 價格 定義 Pricing Structure(價格結構)，通常價格低會給人品質不好的感覺，但現在有許多服務都是採用訂閱制的方式去訂價，和買斷的價格相比不會差太多，畢竟沒人想做賠錢的生意。\n而剛進入一個市場面臨競爭時，公司也會採取比競爭者更低價的方式去吸引使用者，之後等到累積一定的使用人數和規模後再提高價格、變相漲價等方式（養、套、殺）。\n這裡會去比較競品的訂價、抽成、手續費及各種價格策略等，我們也能從價格去回推幾個問題：\n 這個產品的成本是多少，並含有哪些成本？ CPV (Customer Perceived Value, 顧客感知價值) 降價、漲價對市占率影響多大？ 自身產品價格和競品相差多少？   ”註：顧客感知價值（Customer Perceived Value，CPV）是指在獲取產品或服務過程中，顧客感知到的利益與其所付出的成本權衡後對產品或服務效用的評價。 這是一種主觀感受。“\n ​\n＊Promotion 促銷 仔細去研究競品的促銷及方式是什麼？像是優惠券、免運費、手續費、贈品、使用期限？它會影響到品牌在顧客心中的認知。\n不管是透過付費、免費方式來做促銷，其目的就是提升曝光、訂單、會員數等，這也是在做促銷活動非常重要的關鍵，有這些具體的指標(目的)，在活動結束後也便於追蹤整個成效。\n​\n＊Place 地點 地點、通路可以看出一個產品的銷售模式。\n產品由實體店家、業務在固定銷售點販售，或是客戶透過訂購方式配送，理解如何把產品交到客戶手上、原物料供應給合作夥伴等供應鏈。 ​\n－3C（不可控制的變數）   Company 公司   Customer 客戶   Competition 競爭對手   ​\n＊Company 公司 在做外部競品 3C 分析之前一定要先認識自己，所以這分析方式也適用在自家的公司產品上，這是許多產品經理會忽略的環節，總覺得是公司上層或行銷部門的事情，自己只要大概知道就好，但若想打造好的產品，產品經理一定要對自身公司有所理解，參考如下：\n Product Vision 產品願景 Enterprise Mission 企業使命 CIS （Corporate Identity System, 企業識別系統 Location 地點 Logo  以上這幾點都是認識一間公司的方式，其中 Place(地點) 是因為很多新創公司都會進駐在一些科學園區，像是金融監理沙盒、TTA(台灣科技新創基地)等，我們就可以知道這間公司主要打造哪些產品，有哪些資源可以運用。\n除了理解一間公司的優、劣勢，若想要持續在產品上優化或是 Pivot，必須在這個環節找到自己的 Superpower，這樣才能找到新的機會、超越競爭者。\n​\n＊Customer 客戶 你可能會覺得我們可以從競品的 Persona, User Journey Map 去認識產品的 TA、潛在用戶，但競品怎麼可能會把這些報告給你對吧？我們就能夠從競爭者的產品、廣告、電子報、行銷文案等去回推競品設定的 TA。\n另外要注意的是，投資者、股東並不是客戶，有些公司不會去留意顧客、消費者的聲音，反而會為了投資者的意見去改變策略。\n​\n＊Competition 競爭對手 首先要先知道自己處在哪個市場再從中去分析有幾個競爭對手。\n從競爭對手去分析行銷策略、合作夥伴、員工等，還可以留意競爭對手曾犯過哪些錯、流失哪些客戶並從中學習，模擬不同的策略手法發現新的機會。\n​\n競品分析做完了，然後呢？ 上面我們已經知道在進行競品分析之前，一定要先確認好自己做這件事的最終目的，那做完了，然後呢？\n需要留意結果有沒有匹配一開始設定的分析目的，此外了解自己和競品後，可以做用戶訪談、收集社群的回饋，另一方面也要看整個產業狀況下決策，這有助於發現市場上的缺口做產品更新、改善。\n最後可以找老闆或相關部門討論\u0008自身產品和競品以下幾個重點：\n 我們和競品的 TA 優、劣勢（包含自身產品在產業中長期優勢、和競品比較的劣勢） 市場趨勢及產業現況 預測競爭對手後續發展  ​\nRef  How to Use Battle Cards in Your Sales Process Cover-Pic  ","permalink":"https://peterpowerfullife.com/blog/pm-basic-competitive-analysis/","tags":null,"title":"產品經理的硬實力 - 最清楚易懂的競品分析"},{"categories":["Tool 工具"],"contents":"嘿！你有沒有同樣的經驗，明明沒關掉軟體或網頁，為什麼它突然不見了 \u0026hellip; 😥😥\n這裡紀錄一下發生的時機點以及解決方式。\n​\n－解決方式 執行步驟參考以下：\n 選取應用程式或切換到應用程式 螢幕上方會有應用程式的工作 bar 選取「視窗 Window」後再點擊「縮放 Zoom」  ​\n－發生的時機點 我自己個人的經驗是當你有轉接外接螢幕，把視窗移動到外接螢幕上，使用完直接把轉接頭拔下來就會發生這個問題。\n比較好的方式，就是在使用完畢前，把視窗移回到 Mac 電腦螢幕上就好了。\n​\nRef  Cover Pic  ","permalink":"https://peterpowerfullife.com/blog/tool-mac-window-backonto-screen/","tags":null,"title":"Apple Mac - 出事啦！視窗跑出螢幕外，如何把視窗找回來？"},{"categories":["Product Development 產品開發"],"contents":"前面提過，進入產品開發之前，我們需要做好一個產品策略，而了解產品的潛在用戶是誰還不夠，因為一頁式的 Persona 只是純粹形容這個用戶是誰、有哪些特徵、行為目的等。\n可是 Persona 並沒有具體記載一個用戶使用產品的前、中、後時間軸，此時我們就需要 User Journey Map(用戶體驗地圖, UJM) 來幫助我們透析一個用戶使用產品的週期，這是用同理心以用戶角度去觀察使用產品的旅程。\n​\n－目錄  先釐清用戶／客戶的差別 什麼是User Journey Map(用戶體驗地圖, UJM)? User Journey Map 有哪些元素？ 來吧！開始製作做一份 User Journey Map 為什麼需要做 User Journey Map？  ​\n先釐清用戶／客戶的差別 在認識 User Journey Map(用戶體驗地圖, UJM)之前，有必要釐清這兩者的差異。\nUser Journey(用戶旅程) 和 Customer Journey(客戶旅程) 主要差別在於：\n Customer Journey 是針對已經是產品使用者，他在購買產品後和產品、客服團隊、公司的互動，近一步再行銷購買其他服務、產品。 User Journey 則是產品的潛在用戶，對公司來說把潛在用戶轉為主要客群提供服務、獲得盈利是最終目標。  ​\n什麼是User Journey Map(用戶體驗地圖, UJM)? 大家都有寫日記的經驗吧？\n簡單說 User Journey Map 就是用戶使用產品的日記，而其中最重要的環節就是時間，什麼時間點發生什麼事、操作到哪個流程突然閃退等等。\n以 Uber 來說，它的用戶體驗地圖就是：\n 在某個地點想要回家 認知有多種工具、途徑可以回家（Uber、一般計程車、捷運、公車等） 考慮 Uber，查詢相關資訊、下載 App 軟體 決定搭乘並操作 App 叫車 取得 優惠券、折扣碼 推薦 Uber 給親友享更多折扣  根據不同的身份、週期有不同的時間點，如果是一位已經使用過 Uber 的客戶來說，應是如下：\n 打開 Uber App 軟體 猶豫要選哪種車款方案（精英、尊榮） 考慮完價格、時間後，選取車款方案 等待 Uber 司機 上車搭乘 Uber 抵達目的地  Persona(人物誌) 和 User Journey Map(用戶體驗地圖) 都是擬定產品策略很重要的環節，除了清楚掌握哪些時間點用戶會接觸到產品，更是決定要開發什麼功能、制定產品的 Roadmap(產品路線圖、產品藍圖)。\n​\n－若我們沒有 User Journey Map .. 你我的智慧型手機都有GPS、Map 對吧？\n想像一下今天外出旅遊手機沒電時，這時候沒辦法使用定位和導航是不是就迷路了呢？\n打造一個產品、找到潛在用戶、解決客戶問題、持續循環帶來營收，這感覺很簡單但也非常困難，因為你必須要找到適合產品發展的市場。\n如果沒有 User Journey Map，就只是空有熱情沒有方法、策略去提供真正應有的產品、服務，更不用想可以把潛在用戶轉為帶來盈利的主要客群。\n你必須解決用戶的痛點、提供價值，這也是做一個產品的目的。\n​\nUser Journey Map 有哪些元素？ ​\n－第一層：Lens（用戶角度的基本訊息） Users（角色） 一個產品會有多個用戶，而不同的角色在整個體驗旅程會有不同的解決方案，例如：Uber 共有 2 個主要用戶 - 乘客和駕駛。\n我們必須針對不同的用戶去打造不同的體驗地圖，藉此了解每個用戶的真實狀況、潛在痛點。\nScenario（發生的情境、場景） 有了角色後，接著需要我們產品的 Solutions(解決方案)、Features(功能)去解決他們的問題，而根據不同的 Scenario 會有不同的體驗旅程，必須清楚知道不同角色在體驗地圖的目標。\n例如：晚上 11 點多剛看完電影要回家，卻意識到快 12 點沒捷運可以坐了，這時候我就會優先考慮 Uber，叫車、搭車回家。\n​\n－第二層：Experience（體驗） 使用產品過程中的各個階段(phases)的不同感受(feeling)：\n 行為 想法 情感  這環節我認為是最難的一部分，因為你接觸不到使用者怎麼會知道他們的感受呢？對吧？\n或許我們可以在軟體服務上設置一個 ChatBot、問卷，去索取用戶的回饋，這些方式都很好，不過更好的方式是實際和用戶訪談(User Interview, User Research)，了解他們的困境並實際做出產品解決他們的問題。\n有機會和用戶對談可以實際感受到用戶的情緒、想法，比起在電腦前面擬定各式各樣的 Scenario 還要更有溫度，但用戶通常不太能具體闡述自己的問題，或是在特定的場合說出非預期的感受，因次需要具備一定的觀察技巧（爾後再補充）。\n​\n－第三層：Insights（內化的見解） 依據用戶使用產品的體驗，去分析出：\n 痛點 潛在機會  藉此來優化迭代產品、開發新功能。\n知道哪些情境和用戶的感受後，我們要做的事情就是從中去找到潛在的機會，解決用戶的痛點提供更好的產品、服務。\n身為產品經理應當要去注意產業中的競爭者，但一昧地抄襲競品，卻忘記自己產品的願景、初衷是非常可惜的一件事，要和競爭者拉開差距，第一步就是做好用戶體驗地圖！\n​\n來吧！開始製作做一份 User Journey Map  上面已經清楚知道有哪些元素後，那麼該怎麼開始呢？\n ​\n－定義範圍 \u0008我們希望這個 Map 多大、多小？\n也就是使用者從開始操作到結束整個流程？還是只有操作某個功能達到什麼目的就好？\n把範圍劃分出來，才能夠大概知道需要多少時間完成這份報告。\n​\n－把 Persona 和 User Journey Map 連結 一但把範圍劃分出來後，我們需要把前面做好的 Persona 放到整個體驗地圖當中。\n而這個 Persona 就是用戶、使用產品的角色！\n多去理解「為什麼」有助於釐清用戶以什麼角度切入使用這個產品，例如：\n 使用 Uber 軟體系統的乘客都是成年人嗎？ 未成年的用戶可不可以搭乘？搭乘需不需同時把路線、概況傳給家長？  ​\n－定義 Scenario 和用戶期望 在用戶體驗這個產品的過程中，會發生什麼事？我們需要根據 Persona 的用戶特質、背景，去打造相關的服務，也就是擬定 Scenario 相關事件。\n把 Scenario 明確定義好，透過體驗時的每個事件了解用戶使用產品的期望，例如：\n 使用 Uber 軟體系統的乘客，要搭乘 30m Up 長途車程的乘客肚子餓怎麼辦？ 使用 Uber 軟體系統的駕駛，遇到不戴口罩的乘客怎麼辦？ 使用 Uber 軟體系統的乘客，遇到駕駛言語騷擾怎麼辦？  ​\n－列出 Touch points(接觸點) 用戶使用到產品一定會有一個接觸點，這就是一種互動行為，而根據不同的 Scenario，用戶和產品的接觸點會有所不同、關係和順序也不同。\n直白說接觸點就是我們產品為用戶服務的環節，例如：看完電影想回家的用戶打開 Uber App、坐 Uber 抵達目的地後對駕駛的評分等，這些都是用戶和產品的接觸點。\n​\n－釐清 User Intention(用戶意圖) 除了把接觸點給列出來，我們還要去思考 User Intention(用戶意圖)。\n 用戶用我的產品、服務是想解決什麼問題？ 為什麼用戶要使用我的產品、服務？有沒有其他選擇？ 產品提供的服務真的有解決到用戶的痛點嗎？  釐清這些資訊、了解用戶的意圖，都是站在使用者的角度去思考，也是解決用戶問題的第一步。\n​\n－用戶的情緒曲線 留意用戶在每個行為過程中，情緒有哪些起伏和感受？例如：\n 用戶在結帳時突然閃退 用戶在結帳時，自動詢問要不要把發票存手機載具？  情緒感受會決定用戶使用的心情，而我們設計的產品、服務正反映了用戶的心理狀態。\n所以在 User Journey Map 透過可視化「起起落落、上上下下」的情緒，可以清楚知道產品需要朝哪個地方改進。\n​\n－把資訊統整到 User Journey 頁面做驗證 上面這些步驟完成後，會把資訊更新、統整到\u0008 User Journey 的頁面，和 Persona 一樣至少會有一頁，以能夠清楚表達完整的資訊為主。\n可以根據網路上已經製作好、公開下載的 Template(樣板) 去做使用、修正符合自己需要的版型，可參考以下：\n Miro - CustomerJourney Map Template Visual Paradigm Online UX Pro Xtensio Storyboarder Google  最後我們會確保以上內容都是事實，絕對沒有為了產出報告而去憑空捏造它，之後需要定期去收集用戶的回饋並改善、優化產品的服務。\n​\n為什麼需要做 User Journey Map？  問題越大，支票就越大。 解決用戶的問題、解決多少用戶的問題、提供多少價值這都是帶來收益的關鍵。\n 團隊開心做完產品後卻發現很少客戶使用，或是 Churn Rate(流失率)很高，這時怎麼辦？\n要改善之前你必須先發現原因，而從 User Journey Map 可以發現用戶體驗產品時的各個細節，像是：用戶點選「結帳」按鈕卻不斷地 Loading 沒有反應、線上客服永遠沒辦法即時解決問題等，這些原因都是影響用戶使用產品的體驗。\n所以，了解產品用戶自然能夠提升用戶體驗，自然能夠幫助公司品牌、產品塑造忠誠度、擁獲死忠鐵粉。\n​\nRef  userpilot answerdigital When and How to Create Customer Journey Maps UX User Journey Map  ","permalink":"https://peterpowerfullife.com/blog/pm-basic-user-journey-map/","tags":null,"title":"產品經理的硬實力 - User Journey Map(用戶體驗地圖)"},{"categories":["Tech 技術"],"contents":"隨著所開發的專案日益增加，散佈在各處的 node_modules 檔案也越來越多，而這些專案多到你早就忘記放在哪了 \u0026hellip;\n一起來認識 npkill，讓我輕鬆快速刪除了 5.8 GB 的 node_modules 檔案。\n​\n－目錄  不需安裝 npkill 也能使用 本人電腦硬體、執行環境 如何運作？  ​\n不需安裝 npkill 也能使用 只要電腦本身已經有安裝 Node、NPM(Node Package Manager) 套件管理工具，你不需要安裝 npkill 也能使用：\n$ npx npkill 如果還是想要安裝它，可參考以下 command：\n$ npm i -g npkill ​\n本人電腦硬體、執行環境 僅參考：\n Apple MacOS nvm, npm（v7.10.0 及 v12.13.0） Terminal  ​\n如何運作？  這裡我僅輸入執行 command 去刪除 node_modules 檔案，並沒有安裝。\n 輸入 $ npx npkill command 後，會開始掃描電腦含有 node_modules 的檔案，同時列出完整路徑、檔案大小。\n其中須特別留意，電腦系統當中有些軟體、程式需要 node_modules 才能運作，誤刪會有點麻煩。貼心的 npkill 會透過 ⚠️ 圖案和鮮豔顏色標示。\n透過鍵盤 ↓ ↑ 上下鍵 在檔案間移動，此時若要刪除只需要按下 Space(空白鍵) 就會開始刪除 node_modules 檔案，如果要中斷執行想退出可以在鍵盤輸入 Q 或是 ⌘ command + C（Microsoft WindowsOS 應輸入 Ctrl + C）。\n已刪除的檔案 Terminal 會顯示 DELETED，而本次執行我一共刪除了 5.8 GB 的 node_modules 檔案。\n​\nRef  Cover Pic \u0026amp; Content  ","permalink":"https://peterpowerfullife.com/blog/tech-npm-npkill/","tags":null,"title":"npkill - 如何快速刪除 node_modules"},{"categories":["Product Development 產品開發"],"contents":"在產品開發的前期，我們需要做好一個產品策略，而建立產品策略的第一步，就是要了解產品的潛在用戶是誰。\n試著想一下，今天你要做一個叫車服務平台，心中理想的產品會長怎樣呢？開車的駕駛是誰？乘客族群的年齡區間？\n這問題如果去問身邊的朋友、工作團隊的夥伴，相信會得到各種不同的答案 \u0026hellip;\nPersona(人物誌) 就是用來解決我們對於產品的使用者有不同想法、認知的問題，是設計師梳理、設計流程的工具外，同時也是產品經理訂定產品策略很重要的環節。\n​\n－目錄   什麼是 Persona(人物誌) ？\n  有沒有做 Persona 有差嗎？\n  Persona 的基本要素＆執行細節\n  對於 Persona 的迷思\n  執行步驟及細節\n  Persona 是產品經理擬定產品策略的重點之一\n  產品經理第一天到職該做的事\n  Persona 做完了，然後呢？\n  補充：工具樣板\n​\n  什麼是 Persona(人物誌) ?  TA(Target Audience) 中文意思為目標族群。\n Persona 最早是由互動設計大師 Alan Cooper 在1983年提出這個概念。\n他在 1980 年期間寫了多個軟體應用程式，其中包含 Windows 的 Microphone II 和 SuperProject(超級專案)， 之後成為微軟的 Visual Basic 程式，後續面對快速發展的軟體產業開始為其他公司提供諮詢服務，幫助業主設計出好用、好上手的軟體程式。\n長久經驗和熱忱讓他發現並歸納出「易於使用的共通點」，並引入到互動設計、產品設計的方法學，在產品設計階段，透過同理心去描繪虛擬的使用者來具象化產品使用場景、角色需求，因而誕生了這套「Persona」設計工具。\n我在日常生活中買任何東西，像是：生活用品、禮物等，常常會想一個問題 - 這間公司企業是怎麽訂定 TA 的輪廓特徵？\n當你要向市場販售你的服務、產品，必須要知道 TA 有哪些，理解產品要給哪些族群使用、哪些族群是我的潛在用戶？知道這些你的產品才有可能在市場上立足並找到 PMF，這時候就需要 Persona 以虛構的方式來描繪出潛在 TA 。\n產品的 TA 可能有很多個，因為你的產品不會只有一個用戶，所以在製作 Persona 需要多個角色的數據資料，但也不用太多，通常 2 ~ 5 個就好， 在這 5 個 Persona 當中再去分層重要、不重要的角色，這樣做的好處是：\n  足夠多的 Persona 數量，確保真的知道潛在市場、TA\n  同時釐清「哪些不是產品的用戶」也是幫助團隊工作更有效率的方法\n​\n  有沒有做 Persona 有差嗎？ Persona 這個字源自於希臘，原意是 「面具」 的意思，也就是站在用戶的角度，戴上使用者這個面具去想像用戶使用這個產品有哪些想法和需求。\n團隊設計叫車系統的 UI/UX ，常常需要和產品經理討論視覺設計及體驗流程，和 RD 討論\u0008UI 版型呈現及技術可行性，這時候如果沒有定義好 Persona，設計師覺得藍色是大眾色系所以 UI 就用藍色，但另一邊產品經理卻覺得叫車系統用環保色系綠色比較好 \u0026hellip;\n這時候怎辦？到底該聽誰的？如何下決定？當產品經理和設計師對用戶有不一樣的輪廓想像時，從中可以發現彼此的溝通是非常沒有效率的。\n此時如果有一個定義好的 Persona ，設計師跟產品經理溝通用戶需求時，就可以訂定目標族群是沒有買車同時又有環保精神，這時候設計叫車系統時使用環保色系綠色可能比較符合用戶的需求。\nPersona 通常是透過使用者研究、針對不同使用者行為創建而成的，因為產品的使用者針對不同的問題、情境會有不同的動機、想法和行為模式，產品經理和團隊在做設計的時候必須要瞭解用戶的想法才能開始做設計。\n​\nPersona 的基本要素＆執行細節 一個好的 Persona 會有哪些元素呢？可以想像你在看 Persona 時就像在閱讀一個同理心地圖，看完後大致可以瞭解這個人的樣子、行為動機和內在想法，它不單只是一個數據、兜湊出來的角色。\nPersona 的基本要素有四大項，其包含基本資料、人格特質、行為動機和問題需求。\n​\n－基本資料   姓名\n  性別\n  照片\n  年齡\n  職業\n  家庭\n  教育\n  居住地\n​\n  －人格特質   外向\n  內向\n  主動\n  被動\n​\n  －行為動機 其中上述的人格特質會影響一個人的行為動機。\n  個人習慣\n  生活偏好\n  行為（角色目前採取的行動、替代方案、感到不方便的事）\n​\n  －問題需求 觀察用戶針對某個產品遇到哪些問題，有什麼樣的需求需要被解決。\n​\n－補充 其他包含：\n 忠誠度（角色和產品的關係，是新客、潛在用戶還是鐵粉） 目標（角色要解決的問題、希望避免的損失、希望獲得的好處） 情感期望（用戶想成為的自我形象、想滿足的期望、產生行為的動力） 背景故事（與產品有關係的身分、社會認同、技能、背景經驗、興趣習慣） 角色的一句話（最能代表他所處情境、態度與個性的台詞，不相關沒關係可以當作是側寫）  有了這四大要素，基本資料、人格特質、行為動機、問題與需求，基本上可以幫助我們快速的從生理、心理層面去瞭解我們的用戶。\n 最後切記，雖然知道了 Persona 的元素，但我們不要純粹找個表填一填就以為虛構好一個 Persona，這樣對整個 UX 設計流程是沒有幫助的。\n ​\n對於 Persona 的迷思 －第一個迷思 Persona 其實有所謂的：\n Marketing Persona UX Persona  這兩個著重的東西其實都不一樣，Marketing Persona 是用市場調查的方式擬定的；UX Persona 則是基於真實人物和故事做使用者研究的用戶輪廓圖。\n兩者的關鍵區別在於 Marketing Persona 比較著重在顧客購買產品的一些關鍵要素，像是他的年齡、地點和財務狀況，而 UX Persona 比較著重在使用者使用某個產品的一些行為情境，像是他的動機需求。\n不過 UX Persona 比 Marketing Persona 還要更具體、更貼近實際用戶，因為它是真的經過用戶研究去深入理解用戶。\n簡單區分的話：\n  Marketing Persona = Buyer\n  UX Persona = User\n  而在實際產品當中，通常也會出現以上這兩個 Persona，例如：叫車系統軟體產品中，針對未成年但持有智慧型手機的青年是 UX Persona，而幫小孩付費的爸媽是 Marketing Persona。\n​\n－第二個迷思 很多人會覺得 Persona 只能依照研究結果而打造 \u0026hellip;\n對，基本上這樣沒錯！可是在開發過程當中團隊會使用 Agile(敏捷開發)，這其實是沒有時間讓設計師做使用者研究，更別說再去透過這個研究結果打造一個 Persona。\n不過在業界，設計師也一樣可以用迭代的方式去產出 Persona，也就是Proto Persona ，它本身是快速建置而成的收納版本，也就是 Persona 的原型，是根據我們的假設而成立的，可以幫助設計師在設計初期與團隊聚焦使用。\n目前大部分看到的 Persona 和大部分公司在討論的 Persona 都是 Qualitative persona（質化Persona），它是透過研究結果建置而成的，也可以算是 Proto Persona 驗證後的版本。\n而有一些大公司有更多時間和資源會去製作像 Statistical Persona（量化Persona），它是透過質化 Persona 加上比較多的數據作出更細的版本。\n不過在步調比較快的的公司因為需要花比較多的時間製作，所以基本上不會去使用量化的版本的，Persona 不是只能透過研究結果建置而成，應該要配合團隊的開發模式去運用不同程度驗證、建置 Persona。\n​\n執行步驟及細節 傳統上製作 Persona 需要一段時間的使用者研究並透過收斂才能建置，但可以透過迭代法製作 Persona 的四個步驟，非常適合敏捷開發的團隊使用。\n以叫車系統來舉例，我們要怎麼定義 Persona 呢？\n－第一步（發想人物原型） 發想產品的人物誌原型，產品經理、設計師這個時候會召集團隊，花十五到二十分鐘的時間一起去發想人物誌，接著共同把它分享出來。\n老闆可能會覺得他想像的駕駛乘客應該是既有的計程車司機，而工程師想像的可能是全民皆駕駛，大家這階段可以一起討論哪一部分不實際、過程中都是可以持續修正的。\n​\n－第二步（建立質化 Persona） 這個階段，設計師會去找潛在 TA 做用戶訪談及研究，去瞭解他們身為駕駛 / 乘客的行為問題。\n用戶研究結束之後，設計師會有更多的用戶資料去完善原本的人物誌原型，像是會去了解用戶比較常使用什麼樣的方式叫車，或比較常做什麼樣的行為。這些重複的 Pattern 可以幫助設計師濃縮建立一個質化 Persona ，也就是我們所說的優化 Persona 原型。\n​\n－第三步（強化數據，建立量化 Persona） 有了質化 Persona 之後，第三部設計師可以運用更多的數據去強化我們的質化 Persona。\n像是可以去瞭解使用者（駕駛 / 乘客）在行為上面會用哪些既有服務、想另外體驗的全新模式等，不同的比例有了這些數據加上 Persona 之後就會變成我們的量化 Persona。\n​\n－第四步（分辨 User、Buyer） 這一步驟其實不見得要做，如同之前提到的，有一些產品用戶跟購買者可能是不一樣的，所以在某些情況下可能要考慮不同的 Persona。\n叫車系統的 User 是未成年族群，但 Buyer 可能是未成年族群的家長。理想的 Persona 不會只有一個，實際的情況下可能會有 2 ~ 5 個，在這 5 個 Persona 去代表不同的群體，但足以概括整個產品的用戶、樣貌。\nPersona 經過團隊設計師或產品經理收斂歸納之後，會有主要族群、次要族群，可以為我們的開發團隊在眾多的用戶裡面去瞭解不同的族群樣貌。\n最後記得，在設計產品的過程中，外在的環境會不斷地改變我們的人的行為，所以在製作 Persona 的時候也要記得不斷的迭代，才有辦法有效的去運用在我們的設計決策上。\n​\n－執行細節（補充） 另外特別留意以下：\n  Persona 最好限制在一頁，方便閱讀、清楚明瞭。\n  基本資料的照片非常重要，因為沒有照片感覺不到溫度及真實感，雖然 Persona 是一個虛構角色，但它還是必須依靠同理心去制定多種角色藉以釐清需求。\n  最重要的是目標，專注在要解決的問題，不要添加太多個人細節。\n  背景故事和忠誠度沒有直接關係，像是統一獅球隊粉絲不一定要會打棒球。\n  注重行為本身，不應該以人口特徵來建立，例如說男性 20 到 40 歲。\n​\n  補充：工具樣板  工具只是實踐的手段之一，但經過整理後簡單、清楚的文件看起來也比較舒服，以下參考相關工具。\n 網路上有大大小小的樣板可供參考，針對產品市場及需求可能會有不一樣的指標，不過基本上離不開上述提及的基本要素。\n  插畫素材 - Blush\n  Persona 樣板 - Cacoo\n  Persona 樣板 - Xtensio\n  Persona 樣板 - Hubspot\n​\n  Persona 是產品經理擬定產品策略的重點之一 之前提過，只要是人們使用的東西(動物或某個群體也算)，包含軟、硬體甚至還有非常多品項、種類都是屬於產品的一種，它們都有一個共通點就是 「被使用的產品」！\n如果沒有擬定 Persona 也就沒辦法做好產品策略：\n 無法解釋產品或產品功能背後的策略、原因 列了多項產品功能，卻沒有專注在最主要群體的需求上 沒辦法優先解決用戶問題 沒辦法根據用戶的反饋去迭代、優化產品功能  另外，有些公司都是把 Persona 歸類在 UX Designer 的工作項目， 但從以上內容可以得知做好產品策略應也是產品經理必須執掌的一部分，至於 PM 和 UX Designer 如何協作每間公司文化跟流程都不一樣。\n​\n產品經理第一天到職該做的事 PM 第一天上班除了把軟硬體及工作環境設置好以外，你必須思考該如何快速上手你的工作。\n除了親身去體驗、使用產品之外，閱讀既有產品的 Persona, User Journey Map 等相關文件，藉此了解產品以及日後如何做優化迭代、擬定產品策略。\nPersona 文件可以幫助產品經理：\n  了解用戶發現實際需求\n  產品開發階段需對標 Persona 進行產品開發\n  視產品生命週期不同階段擬定不一樣的產品策略\n  和用戶建立關係，站在用戶角度、用客戶的語言溝通（不說行話）\n  應對用戶的問題和回饋，當用戶提出意見或反饋時能立即處理\n  幫助行銷部門撰寫貼近 TA 的文案\n​\n  Persona 做完了，然後呢？ Persona 整理完之後必須帶上產品使用情境，例如：\n 當用戶「接近午夜的時間看完電影要回家時」，他會「搭 Uber」 當用戶「遇到疫情 4 級警戒不能隨意外出買午餐」，他會「叫外送」 當用戶「不想用紙筆記帳」，他會「使用雲端軟體產品輔助記帳」  最後，了解用戶、挖掘 TA 不能只靠 Persona。\n因為 Persona 是點狀的它沒有時間軸的概念，例如：Uber 用戶可能是一位剛看完電影要回家的城市青年，但 Persona 沒有紀錄什麼時間點會使用 Uber 這個平台做哪些事情、有沒有其他需求等等，這時候就需要 User Journey Map(用戶體驗地圖) 透析一個用戶使用產品的週期，精準知道用戶使用產品的旅程。\n​\nRef  Alan Cooper Blush 插畫素材 Universe User Personas by Arthur Chayka Love, Hate, and Empathy: Why We Still Need Personas Cacoo - Persona Template Hubspot Usabilitytools Wiki UX personas vs. marketing personas: what’s the difference? Empathy Mapping: The First Step in Design Thinking 3 Persona Types: Lightweight, Qualitative, and Statistical  ","permalink":"https://peterpowerfullife.com/blog/pm-basic-persona/","tags":null,"title":"產品經理的硬實力 - Persona(人物誌)"},{"categories":["Project Management 專案管理"],"contents":"上篇內容提到專案管理的基礎觀念、解構工作等，這一篇來了解專案經理這個職務，以及專案管理工作有哪些細節。\n​\n－目錄  專案經理職務內容是什麼？和產品經理有什麼差別？ 專案生命週期及流程 專案溝通計劃表 台灣環境的 PM = Product + Project 😅  ​\n專案經理職務內容是什麼？和產品經理有什麼差別？ 網路上一堆針對產品經理、專案經理的工作職務差異說明，簡單說，大方向的定義就是：\n 產品經理專職開發什麼產品（What） 專案經理專職什麼時候開發產品（When）  ​\n－直接看業界徵才JD（Job Description）  這裡以 17LIVE 公司職務徵才JD為範例，理解其職務內容和差異。\n ＊17Live - Product Manager 產品經理 職務內容為：  和設計師、資料科學家以及用戶研究專員協作，參與產品開發、找到新的商業模式。 收集需求和使用回饋，撰寫 PRD(產品需求規格書)。 和 Project Manager(專案經理) 協作，制定開發產品優先順序及時間排程。 制定關鍵產品指標、監測產品效能。   延伸文章：“做一道菜的食譜 - PRD(Product Requirements Document)產品需求規格書\u0008“\n ＊17Live - Project Manager 專案經理 職務內容為：  專案經理只有一個重點：協助團隊準時交付高質量的程式碼，清楚影響專案的大小事，這個職務不需要參與產品設計、實驗，也不用分析產品數據，執行就是 KPI，團隊就是專案經理的產品。\u0008   規劃、安排資源，並讓團隊知道所有資源分配概況。 制定專案計畫，並監控、追蹤進度。 確保所有專案能在預算、能力圈準時交付。 識別出專案的資源配置差距並改善。 制定專案目標、範圍，集結所有利害關係人確保技術可行性。 透過敏捷開發方式和產品經理、工程團隊協作，並迭代交付新功能。  ​\n－總結差異性 Product Manager(產品經理)：經過產品規劃、開發將產品順利推上市，帶領團隊成員打造滿足市場、客戶需求的產品。\nProject Manager(專案經理)：整合可利用的內外部資源，在合理的時程、資源及功能範疇下，準時交付專案。\n從 JD 及差異性可以理解到專案經理需要具備幾個特質：\n 資源整合、協調溝通，了解專案的風險及複雜程度 良好的時間管理，清楚知道專案中的 Milestone 需要何時完成 理解力及統整訊息的能力，做好 WBS 將大方向需求解構成小的任務 抗壓性高，能做好情緒管理，有任何差錯總是先釐清、解決問題而不是責怪團隊  ​\n專案生命週期及流程  無論是專案還是產品都有它們的生命週期，而一個專案的生命週期包含這五個連續性的階段，這裡就以上篇提到的家族旅遊計畫簡單描述一個專案生命週期和作業流程。純粹範例當作參考，專案實際執行上其實會遇到更多麻煩的事情。\n ​\n－啟動  清楚知道家族旅遊的目的（Ex：增進感情、慶祝某位成員生日、純粹遊玩） 展開旅遊前，調查多少人籌辦旅遊計畫 旅遊所需要的資金、時間（食宿、遊玩、幾天等） 旅遊的相關風險、備案（交通延遲等外力影響） 去程、回程的具體時間  ​\n－規劃  排定時程（每日行程表） 成本評估（時間、金錢、人力\u0008及小組） 整理所有行程相關文件、窗口（保險、護照、遊客歷史病例等）  ​\n－執行  遊客有無參與已排定行程  ​\n－追蹤監控  確認遊客出入安全 與小組相關負責人同步資訊  ​\n－結束  確保每位遊客平安順利準時回家 挑選下一次家族旅遊的專案負責人 詢問大家的旅遊回饋  ​\n專案溝通計劃表 這裡以上篇提到的家族旅遊計畫為例，擬定一個溝通計畫表。\n*註：PJM = 專案經理\n為了避免無謂的會議，很多時候因為要配合因應制度的會議、應付表面功夫的會議，這時就必須去準備相關會議資料、甚至是純粹陪同參與。\n專案經理的職責之一就是把專案溝通計劃表明定下來，幫助自身和團隊去剔除這種無謂的會議，除了徹底執行溝通計畫，同時也要定期評估各項溝通活動的執行成效，必要時也得修正溝通計畫。\n一個專案當中會有溝通計畫表，大概會有以下內容：\n 專案利害關係人：這個專案和誰有關 溝通方式、工具（用什麼方式和管道溝通、溝通頻率、溝通內容有哪些） 指定專案負責人（誰做什麼、做哪些事情）  ​\n台灣環境的 PM = Product + Project 😅 從前輩及身邊好友的經歷分享，在海外 PM 一職會定義非常清楚，Product Manager(產品經理) 和 Project Manager(專案經理) 工作內容是各自獨立的，不會同時身兼產品、專案經理。\n過去，我曾經待過一間公司任職產品經理但同時也要負責專案管理的工作，公司人手不夠或老闆本身不是 PM, RD 背景出身的話就會有這個問題，所以是好還是壞？\n為什麼領一份薪水要做兩個職務的工作內容？為什麼我這麼倒霉進到這樣的公司？講不完，有太多太多可以抱怨了 \u0026hellip;\n我建議可以學習轉念，接不接受因人而異，但沒有適不適合，只有你喜不喜歡。\n如果專職產品經理，而公司也需要你做專案的工作內容(或相反)，其實你可以好好去充實自己：\n 你還是產品經理，務必要把產品策略、開發等工作做好，進而開發出用戶所期望的產品 向專案經理學習，好好累積專案管理實務上的能力 多了這個經歷，你也能知道自己是最終是喜歡開發產品還是管理專案  如果個人還是想專職在一個職務上，以下建議供參考：\n 面試時應好好與公司、主管溝通詢問會不會有這個需求 去海外發展，以矽谷為例，大部分的軟體公司 PM 都是專職一個職務(產品或專案)  ","permalink":"https://peterpowerfullife.com/blog/projectmanager-and-jobdetail/","tags":null,"title":"專案管理(下) - Project Manager職務和其工作細節"},{"categories":["Product Development 產品開發"],"contents":"標題雖為產品經理如何和 QA(Quality Assurance) 合作， 但實際上應是 PM 如何和整個團隊協作才是，此篇文章純粹紀錄團隊和 QA 之間的協作，以及自己經歷的相關紀錄。\n​\n目錄  測試項目不明確 / 彼此的誤解 不切實際的時程 Retro也不要落掉QA的環節  ​\n測試項目不明確 / 彼此的誤解 QA 預期某功能的成果和團隊預期的不一致，不斷地 back and forth(來來回回) 卻始終沒有結果，針對產品的測項(測試項目)如果沒有定義清楚，QA 自然不知道要測試哪些東西、不知道實際測試結果和預期結果之間的落差，但這個問題可以及早定義出標準。\n​\n－PRD 應涵蓋 Feature Design Checklist  當你使用某個產品時發現，咦！這是 Bug 嗎？好怪呀！\n但客服人員卻跟你說：沒事的！這是 Feature ＸＤ\n 很多時候我們在產品設計、規劃，必須要把 feature 各個狀態明確定義出來，才不會讓產品用起來有種四不像的感覺或是很差的體驗。\n對使用者來說他們要的是直觀、好上手的產品，可是要開發出這樣的產品給使用者其實是有難度的，最好的方式就是 - 把自己當作傻瓜。\n有這樣的同理心，基本上就會預想到大部分會發生的 Scenarios，也才能列出對應的 Feature design checklist 進而設計出易於使用的產品、功能。\n在 PRD 當中可以把 QA 所需要的 Feature Design Checklist 列入進去，藉此可以讓 QA 知道功能的預期結果去比對實際的測試結果，其中相關的 Acceptance Criteria(驗收標準) 不僅僅是給 QA 看的，同時也是 RD 在 Local Env 開發所要完成的功能場景。\n而這份 Feature Design Checklist 清單會包含：\n  狀態\n 預設 等待 失敗 成功 重複使用的保存狀態    裝置\n 硬體裝置 螢幕大小 瀏覽器    功能\n 使用者怎麼使用這個功能？ 使用者如何發現產品有這個功能？ 使用者首次使用(Onboarding) 時，如何指導用戶？    角色\n 根據不同權限的使用者畫面該如何呈現？（UI） 根據不同權限的使用者需要定義不同的 workflows （UX）    ​\n－什麼是 Edge Cases Edge case(極端、邊界案例) 是非常少見的非預期狀況。\n在軟體產品當中，Edge Cases 會破壞使用體驗，所以必須明確地義非預期狀況下的 maximums(最大值) 和 minimums(最小值)。\n就算團隊沒有 QA，這時候 PM 也要想辦法生出來，多溝通、討論才能設想流程相關的 Edge Cases，這是非常重要的事情！\n不過 unexpected(不在預期) 的狀態為什麼這麼重要？\n因為 RD 在開發階段一定自然會遇到針對不同功能的狀態顯示，如果沒有 UI, Edge Cases 他們只能自己通靈腦補去做假設，而在有限的時間之內，可憐的 RD 怎麼可能想得出最好的解決方案？\n​\n－Edge Cases Checklist 除了 Feature Design Checklist 之外，很多時候讓 QA 煩惱的是一些 Edge case(極端、邊界案例) 相關的問題， 因為使用者操作使用產品時，一定會遇到不在預期中的的極端狀況，產品在規劃階段定義清楚極端狀況的反饋、處理，就能夠避免使用者的抱怨。\n通常我們會針對所開發的產品，訂定相關的 Edge Cases，例如：\n 搜尋結果沒找到 A 功能對現有功能的影響、彼此連動 Mail 可以連續點擊 Send(送出) 郵件 系統的問題而不是使用者的錯誤，必須提示讓使用者知道 產品結帳頁面的 CTA 下單按鈕，能夠不斷重複地點擊結帳 使用者向系統要求的資訊而我們沒辦法提供給他，該如何提示給使用者 沒有網路怎麼辦？某功能進行到一半沒網路會發生什麼情況？顯示的訊息是什麼？ 無限上傳圖片，使用者或許不太可能上傳超過一千張圖片，但系統會如何處理成千上萬的圖片呢？有沒有明確定義 maximums(最大值) 和 minimums(最小值)？  以上這幾種具體的 Edge Cases 其實更抽象來看就是這幾種層面：\n Validation(驗證) Submission(送出) Permission(權限) Content(內容) Role(角色)  而在 PRD 列出 Edge Cases 的好處是：\n 交出高品質的產品 提高客戶滿意度 / 降低客訴 減少 release 後的 bug / issue 大家準時下班ＸＤ  ​\n－更多、更多、更多地溝通 PM 產出 PRD 後接著和團隊過一次 Kick-off Meeting，務必要請 QA 也參與這個會議，通常 QA 還沒看到 Acceptance Criteria 只確認相關的 UserStory 就會提出產品、功能會遇到的問題並提出對應方式，而相關的預期行為也就要補充到 Acceptance Criteria 這個 Section 當中。\n除此之外，PM 一定要再三和 QA 確認驗收標準，任何影響到功能運作的情境都要不斷地補充、溝通。\n最後，如果時間允許也請 QA 針對這份 PRD 列出 Acceptance Criteria，因為很多時候雙方的標準不一樣自然就增加溝通的成本。\n​\n不切實際的時程 團隊都知道 Deadline，但始終沒有預留 buffer 給 QA 做好測試 \u0026hellip;\n除了不切實際的時程之外，更多時候是漏掉測試所需要的時間然後就匆匆忙忙地上線，最後 \u0026hellip; 最後東西就爆了。\n​\n－如何抓時程？ 概算、預估 RD 所需要的開發時間一直是 PM 的難題之一，而我針對排程計畫通常會這麼做：\n Break down 功能模組，切細再切細 由 RD 概算開發時間  把大功能、產品主流程服務切成各種小等分，例如網頁的 UI Layout, Fetch API 這些 Task 分開並各抓時間出來，最後再由 RD 親自去概算一個時間，這樣才能大致精準抓出開發所需要的時程。\n以上是團隊協作必須要有的默契和認知，那 QA 這裡怎麼抓時程？\n  跑 Scrum Sprint 讓 RD, QA 一起估算 Story Point，把開發、測試時間一併計算進去。 不是敏捷的開發流程，不管有沒有 QA Team，我都會把 RD 所概算出的開發時間(理想) 乘以 1 倍(實際)，而這些時間其實就是 QA 的測試時程，同時也讓 RD 解相關的技術問題。   而在 RD 完成所有開發工作之前，QA 同時也要提供 Test cases sheet(測試項目列表) 和團隊溝通。\n​\n－Bug 也有優先順序 QA 開始測試時，貓抓老鼠的遊戲就此登場囉～\n這時候 RD 都是雙手合十祈禱不要有 Bug，就算有也不要叫我修ＸＤ\n簡單的換位思考，QA 要的就是測試、交付高質量的產品，但工程部門一心只想要趕快把東西交付而忽略測試，純粹是利益不同的問題。\n測試同時會產出 Bug Report，但 PM 一定要積極主動確保哪些 Bug 不會拖到 Deliver 的時間，在時間有限的情況之下， 有些 Bug 不修也不影響產品的主流程，或只是 UI 上需要微調的部分，這些情況不應該影響到 release ，所以一定要和 QA 保持溝通。\n​\nRetro也不要落掉QA的環節 如果團隊是跑 Agile(敏捷開發)，在 Retrospective Meeting(回顧會議) 一定要好好討論 QA 的工作環節。\n我們可以在 Retro 當中討論這些問題：\n 哪些功能 QA 花最多時間測試？ 哪些 Bug 是 RD 花最多時間去修復的？ 哪些 Bug 是在 release 之前就能發現的？什麼原因不能在 release 前就修好呢？ QA 在開測項有無遇到什麼問題？ 最後，任何想到的 Edge case(邊界案例) 一定要記錄到下一次的 Test cases sheet(測試項目列表)  產品的版本、功能一個又一個不斷地 release， 開發順利的同時也必須從經驗和大家的建議去進步，為的是省下 QA 的測試時間、為 RD 排除各種狀況專心寫 Code。\n謝謝每個團隊中的 QA 夥伴，即使在產品的 Roadmap 訂定市場的突破點，但 QA 就是站在使用者和差勁的 UI/UX 中間，為產品做最後的把關！\n​\nRef  Cover Pic - epicpxls Pic - thenounproject  ","permalink":"https://peterpowerfullife.com/blog/pm-how-to-collaborative-with-qa/","tags":null,"title":"貓抓老鼠的故事 - 產品經理如何和 QA 合作？"},{"categories":["Product Development 產品開發"],"contents":" PRD（Product Requirements Document）產品需求規格書是什麼？它是做一道菜所需要的食譜 \u0026hellip;\n 開出一份合格的 PRD 是產品經理的基本功、硬實力（不過我認為這當中也牽涉到軟實力的養成）之一。\n廚師出菜都有食譜了，開發一個產品 PM 怎能沒有 PRD 呢？所以在產品開發及現有產品優化、迭代，我們都需要寫好一份 PRD。\n​\n目錄  一份完整的PRD有哪些內容？ 沒有PRD會有哪些問題？ PRD也可以很簡短、精細 認清團隊及公司的方向  ​\n一份完整的PRD有哪些內容？  PRD 的用意是促進團隊成員彼此的溝通，雖然它有一個極度完整的內容， 但只要能對團隊有利、能快速理解真實需求及方向那就不一定要有這份 PRD，一張 A4紙、一頁PPT都可以完成，但必須要包含以下這幾個內容。\n   Objective / Goal\n 產品需求背景 PRD 內容名詞解釋 User Story User interaction（UI / UX）    Product Structure and flow\n Functional map User Flow（Flow chart） UI Flow Business Logic    Timeline and constraints\n Date（Start, End, and Pull in the date） Budget Timeline Resources Dependencis    Document status\n 版本 修改紀錄    More info / Other\n i18n 語言文字字串 Database structure Database table relationship    ​\n沒有PRD會有哪些問題？ PRD 就是做一道菜的食譜，如果今天一個完全沒有烹飪經驗的人，你跟他說要做 Jellied Eels(鱔魚凍)，你覺得他會知道怎麼做嗎？做出來的菜色，Hell\u0026rsquo;s Kitchen(地獄廚房) 的 Gordon 會滿意嗎？\n曾經在外上課時，業師提及 PRD 這東西只適用在 Waterfall(瀑布式開發)，而敏捷(Agile) 不需要，當時我是不信，一直都不信，今天不管是何種 Methodology，基本的 PRD、SPEC 一定要有！\n依我的經驗，有些公司沒有 PRD、完整產品規格這種 Sense，基本上大概是：\n 細節從頭到尾永遠透過口頭溝通 你想得到灑在雲端各處的各種檔案 RD 們通靈東補西補來完成開發  不管是經營者、執行者，你會想待在這樣的團隊嗎？\n​\n－沒有 Clean Code 只有 Dirty Code  RD 的 Code 髒掉跟 PRD 哪有關係？嘖關係可大了！\n 需求不斷變更的情況，RD 的 Code 都不知道髒到哪種程度了，然後 branch 一直往外開， 但今天只要開發人員異動，後續接手的人豈不是很倒霉？\n同時需求不明確造成開發週期變更，最倒霉的絕對是 RD，他們開始要加班、延誤上線，反正 RD 就是要把東西做出來， 但最重要的是他會開始不喜歡自己、貶低自己在團隊中的價值。\n​\n－公司沒有高度的策略戰術 如果一間公司沒有 PRD 的素養，那相信在企業經營策略、行銷戰術也沒有完整、具體規劃，大概就是走一步算一步，因為 PRD 和 MRD, BRD 有高度相關性（本篇不探討）。\n最終產品做爛，大家再來推責、互相甩鍋，一但有這樣的文化產生、後續的合作也不會多好，傷害已經造成了，就算後續補再好、再精細的 PRD 都沒辦法挽救團隊的向心力。\n​\n－產品無法良好的優化、迭代 沒有 PRD 也行啦！產品最後很勉強地上線，公司上下開始面臨客服問題的鳥事。\n之後要進行產品的優化迭代，怎麼著手？怎麼改？完全是憑感覺，然後再東漏西漏，這邊補一下那邊補一下，PM 和 RD 寶貴的時間就永遠浪費在這。\n​\nPRD也可以很簡短、精細  相信不管身為 PM 還是 RD，一定會覺得：\n難道 PRD 前期規劃一定要花這麼長的時間、這麼齊全的內容才能開始開發嗎？\n 其實 PRD 也可以很簡短、精細，一共有這四個部分：\n 產品目標 產品功能 測試及上線 總體資源（時間、預算、人力）  ​\n－定義產品目標 其包含：\n 產品現況 目標 背景 假設  一開始就把產品目標定義好非常重要，如果 PM 不知道這個產品的最終目標是什麼，勢必進入開發時樓一定越蓋越歪，甚至無法完成。\n定義產品目標一定要特別留意，它必須夠具體、夠人性化且易懂，藉此驗證我們非常清楚這個產品的用途，不會有天馬行空的假設出現。\n透過以下問題歸納總結並梳理我們的想法：\n 這個產品是給誰使用的呢？使用者要怎麼使用它？這個產品是 2B 還是 2C呢？若只屬其中一種，未來如何延伸呢？( B2B2C) 為什麼我們要做這個產品？產品有合適的市場嗎？公司對這項產品的期待是什麼？ 我們一定要自己動手做？有沒有現成的架構、方式去開發出這項產品？ 產品開發期間如何做好測試？需要達成哪些指標才能把產品上市？  還有很多細項可以探討，不過最重要的是避免產品目標和解決方案的混淆，把目標定義出來可以讓我們知道終點、目的地，但不是一個到達終點的地圖！\n​\n－產品功能 當知道產品的目標後，就必須把產品功能給詳細描繪出來，其包含：\n User Story User interaction（UI / UX） Functional map User Flow（Flow chart）  此時幾乎已經進入準開發階段，因為團隊會開始去想如何達成產品的目標？\n所以必須時時聯想使用者如何使用這個產品？\n 從使用者角度這個產品的核心重點功能是什麼？ 使用者如何和這個產品互動？ 開發者本身的 Domain 和客戶理解的日常用語是一致的嗎？  而具體描述產品的功能，有經驗的 PM 一定會透過 User Story 來描繪具體的情境，進而把需求、產品互動流程、使用者給串再一起。\n​\n－產品測試及上線 軟體產品在上線前我們一定會透過 CI/CD 做自動化流程：\n Build code Unit Test 從 UIT, SAT, 更新到 PROD 環境  而在功能完整開發出來之前，一定會經過上述一系列的流程，至於什麼時候產品可以上線？取決於以下幾點：\n Functionality（功能）：Prod(正式版) 產品需要包含哪些東西？基本的功能有哪些？ Usability（可用性）：核心重點功能它應該要夠簡單、不煩瑣，快速解決使用者的需求及問題，也就是講求高水準的可用性 Reliability（可靠性）：有沒有經過壓力測試？UI 有沒有一致且是否遵照 DS(Design System)？哪些 Bug 是真的可以勉強接受使用者也不會抱怨的？ Performance（效能）：產品每個獨立功能所運作的時間是多久？例如忘記密碼填寫 Email 後多久會收到信？ Supportability（可支持性）：團隊有沒有足夠人力來因應產品上線的功能優化？團隊 AM(Account Managr) 是否會取得用戶得回饋並反映給團隊？  ​\n－總體資源（時間、預算、人力）  在總體資源當中的時間是最讓人容易混淆的部分？這個時間是 Scrum Sprint 的時間還是產品上市的時間？\n 我自己的經驗是，團隊就算最後把產品做完，但有可能 AM、老闆或是客戶一句話就讓這產品遲遲不上線， 所以只要大概知道使用者及公司所期望的產品上線時間是什麼時候，而 PM 應帶領團隊回頭來看 PRD，完成所有的功能需要多少時間？可能是幾個 Cycle 的 Sprint 等等。\n預算及人力的部分，為了打造這個產品，PM 手上的預算有多少？我必須動用多少人、天及資金才能完成產品如期上線？而就目前來說團隊還缺少哪些資源？\n​\n認清團隊及公司的方向 我曾經任職一間公司是完全沒有 PRD、Spec 這東西的， 公司也沒有做好交接事項，很多問題都還要公司同仁去私訊離職的員工。 但今天如果有 PRD 以及相關的 Spec，就能避免這些無謂的舉動，更不會有上述沒有PRD會有哪些問題？提到的這幾個問題。\n而如果一位新進的 PM 遇到的這樣的狀況，一定要立即讓主管甚至是老闆知道， 因為接下來做的產品絕對會有很多問題，你以為只是在既有產品上疊加功能，但你不知道這些功能可能會影響到現有平台的用戶。\n如果是待在這樣的團隊必須要有心理準備，或許這就是長年以來的文化， 先不要把它視為一種不好的習慣，反而要去思考、挖掘最根本的原因是什麼。\n有可能公司高層根本不懂技術、不懂產品開發的細節，只專注在是否獲利如何切入產品的市場。 而歷年的 PM 可能偷懶、RD 覺得有沒有都沒差，經年累月下來就變成了公司的一個習慣，剛加入一個團隊一定要知道這些細節。\n","permalink":"https://peterpowerfullife.com/blog/pm-basic-prd/","tags":null,"title":"產品經理的硬實力 - PRD(產品需求規格書)"},{"categories":["Product Development 產品開發"],"contents":"​\n目錄  痛點（恐懼） 癢點（憧憬中的自我幻想） 爽點（需求能即時滿足） B2B 產品注重痛點；B2C 則是爽點   下面會帶到 B2C(Client, User) 和 B2B(Business) 注重的不同層面和切入點，但其實有非常多可以探討，之後我會紀錄在另一篇文章。\n 職涯當中有幸參與大大小小的產品開發、規劃，而成功上市的產品解決了哪些問題？有哪些共通點呢？\n有些產品本身有很多問題，但還是有龐大的死忠客戶 \u0026hellip;\n有些產品本身的價格在市面上比其他競品還要高，但還是有客戶願意買單 \u0026hellip;\n了解產品心理學，在市場找到突破點是每位 PM 的任務之一。\n​\n痛點（恐懼） 你的產品要有大量的使用者那麼要先解決客戶的痛點，產品經理或是行銷領域，產品的痛點是人人討論的議題。\n產品的痛點不代表需求，很多人以為只要滿足使用者的需求就是解決客戶的痛點，但其實不是，正確來說痛點是使用者沒用這個東西會死、天會塌下來的感覺。\n例如：沒有實支實付的保單你沒錢付醫療雜費、沒有這個財務系統你就得多聘僱兩位會計財務等 \u0026hellip;\n痛點是利用人的內心恐懼感，進而達成行銷的目的。\n​\n癢點（憧憬中的自我幻想）  你也想成為鋼鐵人？\n 癢點就是滿足使用者的內心憧憬，只要你用了這個產品，你就能成為那個偶像明星、置身在美好的情境裡。\n許多修圖軟體、App 都是透過癢點來滿足使用者，像是：\n 美圖秀秀，人人都是網美 FaceApp，預測年老的自己  近期疫情嚴峻全國三級警戒，相信很多上班族都開始 WFH 或是分流工作，遠端視訊會議一定少不了的，其中：\n Gather Town，虛擬辦公 Game Boy RPG 遊戲，能夠選定角色、地圖，能根據心情更換名字、造型，雖然大家遠端工作，透過角色扮演盡情群聚，讓工作多了一份樂趣。 IKEA虛擬美圖背景，各種空間虛擬背景，只要使用這個背景就好像住在這些美輪美奐的空間裡。體現了 IKEA 的價值觀 - 美好居家生活之外，也讓消費者心癢癢想直接買一整套主題的傢俱回家。  癢點，簡單說就是要滿足客戶想像中的自己。\n​\n爽點（需求能即時滿足）  早上訂、下午到。\n 只要在網路上購買東西，除了價格、商品真偽以外，消費者最在意的就是我買的東西何時會送到我手中？\n除了線上購物之外，像是家庭刨冰機、章魚燒器具等各種生活品，都是爽點的一種。\n消費者滿足、愉悅的心裡狀態，需求能夠被即時滿足，這就是爽點。\n​\nB2B 產品注重痛點；B2C 則是爽點  純屬個人觀察，若覺得觀點有誤、思路不符邏輯請告訴我。\n 我的觀察是這樣，2008年金融海嘯後全球產業開始以科技為主金融及其他產業為輔，從那時候開始進入創業時代，創業者都是想解決自身遇到的問題走向這條路，而他人的問題也有可能是你我遇到的問題 （B2C）。例如我們生活中常常用到一些小工具，只要感受到滿足 （爽點） 基本上錢就掏出來了，這是 B2C。\n那 B2B 呢？你的產品面對的不是你我單一個用戶而已，而是一整間公司包含上上下下的部門、員工，有時候你的需求方到底是出錢的老闆還是使用這產品的員工？光是 User Interview（用戶訪談）可能就要花一段時間了。\n那所以 B2C 產品比較好做嗎？倒不是，因為不管 2B, 2C 都有各自會面臨到的問題需要解決，但如果你的產品可以解決對方的問題、消除用戶的恐懼（痛點），基本上就成功一半了，後續把客服、營運、客製化、售後服務、用戶回饋並改善做好，你的 2B 產品不見得沒市場，有時候售出後的其他服務反而更賺錢。\n​\nRef  Pic - Unsplash  ","permalink":"https://peterpowerfullife.com/blog/product-psychology/","tags":null,"title":"痛點、癢點、爽點，為產品在市場找到突破點"},{"categories":["Project Management 專案管理"],"contents":"​\n目錄  什麼是專案？ 專案和專案管理有什麼不同？ 專案管理需要做任務控管、解構工作項目 專案經理本身的工作有哪些細節？  ​\n什麼是專案？ 英文為 Project、中國稱作為項目，專案字眼上是一種抽象名詞，它是為了完成某一個目標因而具體規劃的活動。\n一個專案通常有以下幾個元素：\n Schedule（時程） Scope（功能範疇） Resource＆Cost（成本, Ex:人力、資金） Quality（產出成果）  ​\n專案和專案管理有什麼不同？ Project Management（專案管理）是從 Management（管理）衍伸而來的，其中最大的差異就是專案管理有時間限制及最後的產出結果。\n專案管理是一個隨著時間而持續性的過程，在不同的時間點針對現有的資源去做不同的配置， 在這種科學性的管理模式當中，需要較為廣泛的多元技能，像是：\n  技術能力\n  產品知識\n  人員管理能力\n  業務能力\n  風險評估與控管\n  溝通能力\n  ​\n－專案目標會決定所有一切。 老闆、客戶可能對細節會有一些認知誤差，甚至是專業上的不足，這會影響 PM 在報價、時間以及人力資源的安排， 所以在專案規劃及進行階段，PM 一定要時常問自己：有哪些地方我沒想到？會有哪些意外導致專案失敗？ 進而把外在影響力降到最低。\n當你進行專案時發現：\n夥伴不支持、能力不足、缺少技能、沒有承諾、不參與、過於忙碌無法專注在此專案、文件不完整、溝通不良等 \u0026hellip;\n以上幾點是專案失敗常見的原因，專案開跑時就務必留意這些警訊。\n​\n專案管理需要做任務控管、解構工作項目 控管顧名思義需要做控制、管理及規劃。\n正常情況來舉例，以 NBA 職業籃球來說，你不可能叫一個後衛去守中鋒，頂多只會做協防而已，專案也是，這當中依據參與人員的能力、專長去進行每一個任務。\n就像我們在吃螃蟹，你不可能拿起螃蟹就直接吃，一定會需要把殼敲開、用牙齒去咬開外殼才能吃到裡面的肉。一步一步劃分工作項目、大的專案工作分解成可執行、可預估時間的小任務，這就是解構工作項目。\n​\n－WBS  Work Breakdown Structure（解構工作）\n 專案需要做有效的任務管理，必須要把大的專案解構成較小、可執行的任務，因為這樣更易於去管理，能在執行初期就看出問題，做適當的資源配置、調整人力。\n在軟體產業當中，如果能把每個任務切小不僅方便 Debug\u0008，同時助於團隊理解開發所需要的時程。\n每一個任務都有明確定義具體完成細節、截止時間，所以在起初的任務安排就非常重要。\n專案的成功與否也取決於能否及時完成任務，所以 Prioritization（優先順序）必須要非常清楚， 同時也要知道任務之間的關係、連動及影響性，因為很有可能其中一個任務沒完成其他的任務就難以延續下去。\n​\n－WBS 資訊內容 一個 WBS 解構報告當中的資訊包含以下：\n 具體任務 工期（起始、結束）日期 任務之間的相依關係(Dependency) 潛在風險  ​\n－WBS 範例練習 大家都有旅遊的經驗對吧？聯誼、家族旅遊、畢業旅行等，生活當中的每個活動都是一種專案也可以進行 WBS，馬上來看看以下的家族旅遊計畫。\n  地理位置\n 地點    費用（自費、公基金）\n 計算人數 列出可能的花費（交通、食宿）    時程\n 時間調查 天數    行程內容（大方向）\n 旅宿（哪些飯店旅宿 餐館（哪些餐廳 交通（哪一種交通工具    風險管理\n 找旅行社申請相關證明 找保險公司保旅遊相關保險 Plan B,C 備案（因應天災等外力影響）    ​\n－WBS 可視化輔助工具 上方簡單列出一個家族旅遊計畫如何進行 WBS，在實際專案當中通常會搭配圖表讓細節可視化一目瞭然，因而會搭配相關工具做呈現。\n Canva - 線上創作絕佳工作分解結構 Online Visual Paradigm Excel  ​\n專案經理本身的工作有哪些細節？ 這篇內容分享了專案管理的基礎觀念、解構工作等，下一篇紀錄著專案經理這個職務，以及專案管理工作有哪些細節。\nRef  Pic - inloox  ","permalink":"https://peterpowerfullife.com/blog/project-and-projectmanagement/","tags":null,"title":"專案管理(上) - 先搞懂專案才能做好專案管理"},{"categories":["Project Management 專案管理"],"contents":"在軟體開發領域的團隊當中常常要和別人（RD、QA、Marketing等）溝通需求，但不管今天是什麼年紀、職務其實都需要「溝通」這項技能。\n只是因為習慣了工作、生活，我們會覺得這不是一個技能， 「溝通」一個需求、「描述」一個問題等，都需要良好的敘事能力，才能傳達正確的資訊進而解決問題、放大產出。\n我常常會在生活上去練習溝通這件事，一起來看看生活中的產品經理 - 彼得剪髮紀。\n​\n目錄  建立期待值 我要剪什麼髮型（需求） 一次只說一件事（溝通） 反思專業領域  ​\n建立期待值 三分靠長相，七分靠髮型 XD\n第一次給沒合作過的設計師剪頭髮勢必會有距離感，千萬不要覺得設計師一定知道我們要的感覺。\n剪出來如果不如預期，這絕對是正常的，真的！不要什麼都怪設計師、怪手藝不好，先把自己的需求明確地和設計師溝通吧！\n那我可以怎麼做？就是盡可能把自身的需求具體傳達給設計師。\n​\n我要剪什麼髮型（需求） 剪出自己想要的髮型，這是一個需求，但我一定會具體知道：\n  了解自己\na. 髮質軟、硬\nb. 頭型\nc. 平時會不會整理\n  為什麼我要剪這個髮型？\na. 純粹跟個潮流\nb. 這髮型適合我的頭型、臉型，具有修飾感\nc. 不知道剪什麼髮型就嘗試看看（探索中）\n  我要怎麼剪出這個髮型？\na. 自己剪\nb. 髮廊\nc. 知名髮廊（連鎖、名人御用設計師）\nd. 家庭理髮\n  如果剪壞了、不滿意了，要修剪成什麼樣的髮型？\na. 光頭\nb. 平頭\nc. 設計師自由發揮\nd. 摸摸鼻子走人 \u0026hellip;\n  ​\n一次只說一件事（溝通） 在剪頭髮時除了自身苦惱要剪什麼樣的感覺，另外該怎麼傳達想法給設計師也是一個難點。\n雖然今天你是客戶，但跟陌生人講話還是有點難以啟齒，覺得陌生、害羞的感覺。而如何鼓起勇氣去跟設計師溝通這真的沒有一定方法，因為很多人天生就不太喜歡說話或是不跟陌生人講話，這是教不會、學不來的。\n當你有很多事情要交代、很多問題想要溝通，一次只講一件事就非常重要了。\n想想哦，你一次霹哩啪拉講一堆設計師能夠吸收多少？當你一次只講一件事能幫助別人抓到你想表達的重點之外，最重要的是，對執行者來說，他知道這就是我要做好的事情。\n整個流程參考以下：\n  查詢髮廊、設計師的經歷\na. 擅長哪種感覺，例如：日韓系、美式、中短髮或中長髮等\nb. 看看設計師在社群平台上的作品\nc. 髮廊的評價\n  拿之前剪過的型和設計師溝通\na. 提供照片\n  事先做好功課\na. 髮型名稱，例如：美國大兵頭、日韓空氣感、日韓中分微捲蓬鬆\n  Step by step\na. 先剪一部分再剪其他地方，例如：先把頭兩側推平推短，再剪瀏海、後側\nb. 先修出型，確定是想要的感覺再剪短\n  ​\n反思專業領域 以上有沒有一種既視感？\n其實作為 PM 或 RD，我們常常需要和老闆、夥伴及客戶溝通討論，這裡我沒有明確提及換位思考，但它也是完美溝通的元素之一。\n溝通感覺是一件很簡單的事，但其實涉及很多學問、心理因素。\n生活中把握每一次練習的機會，讓自己在團隊、專業領域發揮作用吧～\n","permalink":"https://peterpowerfullife.com/blog/life-pm-haircut/","tags":null,"title":"【生活中的產品經理】－彼得剪髮紀（溝通需求）"},{"categories":["Product Development 產品開發"],"contents":"以前端開發者的角度來看，其實前端不懂商業邏輯也不影響功能開發，因為只要：\n PM 把 Spec 開好 Designer 把 Mockup 弄出來  實作前再過一次功能互動，其實大部分就可以實現了（剩下技術問題），那為什麼做技術研發，要搞懂商業邏輯呢？\n​\n目錄  從產品角度看待開發技術 從技術角度想到業務層面沒想到的地方 成就感驅動 RD 深層理解產品商業邏輯 解析產品需求估算開發成本 RD 該如何搞懂商業邏輯？  ​\n從產品角度看待開發技術 一個產品從概念進入到開發階段，RD 知道產品主要的核心功能、帶給使用者的價值， 這時候就會去思考如何透過自己喜愛的技術去共同開發產品，而這時候就需要去思考開發產品所需要的商業邏輯。\n​\n－RD 邁向攻頂之路 了解 Domain knowledge 只有好處沒壞處，一般來說 RD 的職涯升職大概是：\nJunior RD =\u0026gt; Senior RD =\u0026gt; RD Lead / Tech Lead\n\u0026ndash;\nRD 技術好，從公司角度來看是不可或缺的資產，但回頭看自身的職涯，技術再提升一個檔次就會升上 Sr.RD ，若要邁向攻頂之路，必須要懂得需求管理、DDD（Domain Driven Design）。\n​\n從技術角度想到業務層面沒想到的地方 了解商業邏輯，才能從技術的角度想到業務層面沒想到的地方，如果不了解商業邏輯，就不知道產品到底想要做什麼功能， 甚至連需求的商業邏輯都搞不清楚。\n在這種情況的合作模式就是需求來了，RD 接住，然後 PM 排開發時程、開發資源。\n但是 \u0026hellip;\n也許這個需求的設計不合理，你不知道～\n也許這個需求有更好的解決方式，你不知道～\n也許這個需求可以透過現成的技術架構、第三方套件解決，你也不知道～\n都不豬到 \u0026hellip; 只能任人宰割了\n​\n成就感驅動 RD 深層理解產品商業邏輯 作為 RD，把產品功能透過程式實踐出來， 這種虛實整合的成就感是一般人難以理解的，但要獲得這份成就感勢必會驅使 RD 去理解商業邏輯。\n只有了解商業邏輯，才能從更全面的視角去規劃當前、未來的應用技術，因為也許這時間點適合用 A 方法， 但產品開發完成進入用戶成長階段，用戶數量一多也許當時的 A 方法就不適用了。\n不了解商業邏輯，會離用戶的真實需求非常遙遠，越難發現其中的痛點和挑戰，沒辦法提出自身的思路和解決方案，進而解決用戶的難題。\n作為RD，自然希望親手打造解決用戶痛點、體驗友善的產品， 如果產品能得到用戶及團隊認同並產生影響力，那自然會特別有成就感。\n​\n解析產品需求估算開發成本 對 RD 來說，開發一個產品功能最常見的成本有時間成本、開發成本（不只這樣）， 如果懂得產品的商業邏輯才能概算出具體的成本：\n 用什麼技術解決？ 資料的結構長怎樣？ 產品功能彼此間的影響？  RD 如果不懂這些問題，無法把真實需求轉換成技術，那就很難合理估算出開發成本，這時只能讓 PM 來壓時程了（喂）\n​\nRD 該如何搞懂商業邏輯？ RD 要搞懂商業邏輯一定會需要這兩個能力：\n 產品服務的 Domain knowledge Domain knowledge 實踐轉換為程式碼功能（虛實整合的能力）  不過要搞懂商業邏輯，具體可以和 Domain Expert（領域專家）、PM 尋求幫助和溝通。 上述提及的兩種能力不可能兩三天一蹴可幾，需要在日常、工作專案去培養，平常可以這麼做：\n​\n－培養抽象化的能力 培養邏輯思考必須要有抽象化能力，也就是把事物抽象化、重新賦予定義。\n訓練抽象化能力有很多種做法，舉凡寫文章、自我對話、玩魔術方塊等，但我自身的經驗和體悟是透過自己的話去描述所見所聞，進一步去定義推理、歸納。\n​\n－和團隊建立共同語言 開發系統發現團隊對於代名詞、術語沒有一個共識，進而產生龐大的溝通門檻，這是一件很耗心力的事情，但其實和團隊建立共同語言它並不困難。\n團隊早期建立共同語言，白話溝通、文件化，就是建立共同語言的第一步了。\n而當下次在會議或小組討論，大家就能夠很清楚知道彼此論述的重點是什麼，進而降低團隊溝通的代溝。\n​\nRef  Pic - NetWork Unknown Owner  ","permalink":"https://peterpowerfullife.com/blog/rd-must-to-know-business-logic/","tags":null,"title":"為什麼 RD 需要搞懂商業邏輯？"},{"categories":["Project Management 專案管理"],"contents":"每一位 PM 執行專案時都一定會遇到時程 Delay 的問題，造成延誤的原因並沒有標準答案，但都存在一些因素，所以執行者本身很難預測何時能完成開發。\n在我的經驗當中，隨著時間的累積、多人參與專案及改變開發流程等，以下是我認為有助於改善產品開發預估時間的思維，這沒有絕對 *3，但可以幫助我們提高預估時程的準確性。\n​\n目錄  你不是在管理時程，而是在管理大家的期望 做個有同理心的產品經理 剛上任的PM怎麼估時程？ 做最壞的打算，做最好的準備  ​\n你不是在管理時程，而是在管理大家的期望 PM 不是只有把文件寫一寫出一張嘴而已，其中一個很大的責任就是激發團隊每個人的自信心，這聽起來很簡單但具體可以怎麼做呢？\n 產品開發前的任何 Meeting（不論是 Scrum Sprint, Waterfall），讓所有夥伴知道這一次產品所要開發的內容、範疇有哪些 （這裡就不細說用什麼文件來闡述），一但開發團隊知道 Scope 有多廣，就可以預期產品功能的難易度 確認每位夥伴都清楚功能的背景，為什麼需要這功能？這功能可以帶給產品什麼效益？ 時程會估算錯誤，不可能完全準確！所以如果認為這功能的複雜度＋過去經驗來評估，認定無法如期交付，那盡可能每天讓 PM 了解狀況 這東西很困難牽太多複雜的邏輯，如果現階段做不出來，PM 一定要主動幫助團隊做 Task Breakdown，至少要做到什麼程度，然後再把這項功能排到下個階段延續做下去  簡單說，一開始要給大家一個 Expected value(期望值)，這樣相對會更有信心去做手上的工作並一一完成產品的各種功能。 產品經理不是真的要管理產品發佈的日期，而是管理大家對這個產品的期望！\n​\n做個有同理心的產品經理 如果PM 本身有技術背景或是能理解技術複雜度，並且實際參與開發的經驗，就能夠明白開發產品功能困難度在哪裡，一開始就可以先概算每個功能所需耗費的時間。\n舉例來說，今天要做一個公司前台官網，這個官網會需要呈現的資訊有：\n 關於我們 聯絡我們 語言切換（中、英、日）  只有三個頁面資訊還是很難評估時間對吧？所以再進一步，我們去做以下的解構工作。\n​\n－Work Breakdown Structure（解構工作）  延伸文章：“專案管理(上) - 先搞懂專案才能做好專案管理“\n 網頁前端頁面依據大方向的主要資訊再切分更小的執行任務，其包含：\n  UI 介面\n  首頁\n  關於我們頁面\n  聯絡我們頁面\n    API\n 聯絡我們頁面，用戶可以留下個人資料 資料庫需要去儲存使用者從官網傳送的個人資訊（資料欄位、限制等）    最後進入會議和 RD 討論時，PM 可以先依據自己和團隊合作的經驗，去概算每個人的熟練度所需要多少時間，這樣心中就會有一個大概的時程。\n這裡稍微提醒一下，概算時程的部分不需要讓 RD 知道，這僅是給自己掌握一個大概的時程，實際開發的時程還是以開發團隊討論的結果為主 （請不要隨便霸凌RD好ㄇQQ）。\n​\n－如果產品經理沒有技術背景那怎麼預估時程呢？ PM 沒有技術背景比較難預估開發時程，這確實是許多大部分 PM 遇到的難題，但可以借力使力去估算時間：\n 請 Tech Team Leader 協助 找團隊當中最資深的夥伴協助  這時候就非常考驗平常在團隊的人際關係了ＸＤ\n​\n剛上任的PM怎麼估時程？ 如果今天是一位新加入公司的 PM，可以透過以下的方式去估算時程：\n  閱讀過往開發的相關文件、查看專案管理工具的開發時間\n  理解過去專案當中團隊的開發速度、時程，同時還要知道哪些夥伴比較理解商業邏輯、和功能的應用場景。\n  凡事都有第一次遇到不要怕，贏要衝，輸要縮！都還沒輸過就得親身嘗試一下，把這個責任扛起來跑一次 Cycle，不要預期自己能做的非常完美，但一定要落實做好每個步驟，並且隨時和開發團隊提問不懂的部分。\n  ​\n做最壞的打算，做最好的準備 隨著時間的流逝，距離產品的發佈日期越來越接近，這時候期望值就越真實，接受期望的變化就更加地困難。\nPM 要能夠在開發期間定時盤點已完成、未完成的功能，再把剩下未開發、開發到一半的功能去分類。我通常會採用 Eisenhower\u0026rsquo;s Decision matrix 方式(上圖)，最後再依據功能的完整性、重要性，區分：\n Highest High Medium Low Lowest  最後得到一個目前產品功能的 Prioritization，撥雲見日後就是火力全開專注開發 High 以上等級的任務。\n這跟 MVP 的精神 MoSCoW 有很大的關係，也是開發產品極為重要的一環，後續我會再分享～\n​\nRef  Pic Pic - Decision matrix  ","permalink":"https://peterpowerfullife.com/blog/project-management-empathy/","tags":null,"title":"管理開發時程，做個有同理心的產品經理"},{"categories":["Product Development 產品開發"],"contents":"​\n目錄  生活中的小故事 生命週期的定義 一個人的生命週期 產品的生命週期 成為一流的產品經理  ​\n生活中的小故事 在探討 Product Lifecycle(產品生命週期) 之前，我們可以想想手機用戶買新手機的問題：\n 上一次買 Apple iPhone 是什麼時候呢？ 買的是幾代？ 最新發表的 iPhone 是幾代？  上述這幾個問題會取決於一個手機用戶是否會購買 iPhone 手機，因為如果知道再過一個月就要發表新機了，不太可能會有人願意買比較舊款的，對吧？\n​\n生命週期的定義 這裡我只提生命週期，並沒有提到產品的生命週期～\n其實不只是產品，任何東西都有它的生命週期，客觀概述生命週期本身的定義，那應該是：\n一個人、一件事、一隻動物或一台手機等，它們所經過的每個階段。\n而在每個階段都會有不一樣的事情發生，這其實就是指生命週期的過程。\n​\n一個人的生命週期  受孕 出生 童年 青春期 成年 老年  我們每個人在生命週期不同的階段都會有不同的思維模式，以收信的例子來說：\n​\n－童年 VS 成人收到信件的感受和反應     童年 成年     感受 期待、興奮、開心 焦慮   實際事件 情書或任何有趣的事情 X! 彼得銀行寄帳單來討錢    ​\n產品的生命週期  在理解產品的生命週期之前，可以再回頭想一下上述「生命週期的定義」，試著把你認為的「產品生命週期」給寫下來～\n  概念  當你開發一個產品之前，一定會有想法、概念，雖然會開始規劃，但這些都還只是「概念」階段。   開發  清楚知道要打造什麼產品，透過一連串的開發、迭代去驗證產品概念本身。而決定先以 MVP （Minimum Viable Product, 最小可行性產品） 驗證市場的需求，這會介於概念和開發階段，還不知道產品要做到什麼程度、潛在 TA 的真實需求是什麼？透過快速地把產品推到市場並得到回饋，不斷地修正及調整方向。   推動  用中文表達很難理解，其實應該要以 Launch 比較合適。這階段就是推出產品，讓使用者、用戶可以真正地去體驗你的產品。   成長  當產品推出後，透過各種行銷手法去推動、販售和宣傳產品，開始越來越多的用戶，就會進入 Growth（成長階段）， 通常成長階段會是團隊上上下下最振奮的時候，因為根據產品的性質（toB or toC）和市場熱度，很有可能在一夕之間就湧入大量用戶。   成熟  在成長一波之後，產品會趨近於「成熟穩定」的階段，這時期不太會去改動產品的各種細節，而市場上大多數的用戶也聽過、用過甚至購買過你的產品。 這個時期，產品的生命週期會停留在這一段很長的時間，甚至用戶不再使用你的產品，而這就是進入「衰退」階段。   衰退  產品銷售量和利潤持續下降，行銷活動和資源都縮減到最低水，市場已經有其它功能更好、價格更低的替代品出現，這時產品的生命週期走向盡頭，完全退出市場或是被他公司收購合併創造出新一代的產品。    ​\n成為一流的產品經理  文章開頭提到 iPhone 的故事，可以試著想想目前這支手機是在生命週期哪個階段呢？\n 產品的生命週期和人的生命週期一樣，當你預期、察覺和發現它正要進入衰退階段時，就勢必得做些什麼去維護、補救， 但我個人認為這太晚了，其實在產品進入成長階段時，仔細觀察產品在市場上的互動及回饋，這時就必須開始提前佈局、規劃，思考產品更多的可能性。\n在當下大環境的洪流當中，若發現產品未來可能沒有太多的可能性，或是無法帶來太多的商業價值，這時候勢必得要做 Pivot，也就是說上圖那條紅線其實是可以操控的，為產品、團隊及公司開闢一條全新的方向和道路。\n什麼時候才要做 Pivot？這必須要真正把產品開發出來，並丟到市場去驗證才會得到結果。\n在舊版 iPhone 成長的同時，產品經理和團隊內部應該要有新的產品概念，確保每一項產品不會同時處在衰退階段。\n至於該如何提前佈局和規劃又是另一個議題了，找時間再和大家分享 Metrics（指標），清楚定位產品所屬的階段。\n​\nOther Apple Buyer’s Guide 是MacRumors 網站提供給購買者參考的指南。每一篇產品週期分析都有「Recent Rumors」，可以詳細知道 Apple 產品近期狀況或是變化。\n","permalink":"https://peterpowerfullife.com/blog/product-lifecycle/","tags":null,"title":"Product Lifecycle 產品生命週期"},{"categories":["Product Development 產品開發"],"contents":" 這篇文章主要是探討數位化轉型的過程，以及開始進入軟體開發的初期階段需要留意的細節。\n內容不會提到 RD 把 Domain Knowledge（知識領域）DI（注入）到程式碼當中，這議題很深、很廣，有機會再分享。\n ​\n目錄  數位化轉型的定義＆什麼是DDD? 數位化轉型面臨的問題 數位化轉型實務經驗（進入軟體開發的過程） 數位化轉型的小魔法（Tips）  工作經驗當中，打造新產品或是把當前既有的服務做數位化轉型，在做數位化轉型如果懂得 DDD（Domain Driven Design）， 這對產品開發有絕對的幫助，甚至可以少浪費一些時間去摸索原先的服務（流程、習慣、文化） \u0026hellip;\n​\n數位化轉型的定義＆什麼是DDD?  愛你既有的產業、認識你既有的環境，在數位化轉型的過程中，不僅是 PM, 更是每位夥伴都該有的共識。\n 數位化轉型的定義就是把既有的產品，轉型以數位科技服務的過程。 舉例來說，火車票只能在火車售票台購買實體票券，而透過數位化轉型就能使用購買車票的服務軟體購買電子票券。\nDomain Knowledge（知識領域），它是數位轉型所圍繞的核心， 在既有的產品服務，一旦開始要做轉型會需要知道 Key Point(問題點)以及 Solution(解決方式)。 在一間公司，尤其是PM, RD若不懂這一塊的 Domain KnoHow（知識問題），那最終開發出來的產品會有很多問題，甚至是無法取代原先的服務方式。\nDomain Driven Design 是基於領域專業知識來解決複雜商業邏輯的軟體開發方法論。\n​\n－DDD注重以下三個重點  跟 Domain Expert（專業領域專家） 合作並且定義出 Domain 的範圍及相關解決的方案。 切分 Domain（領域）為多個 SubDomain（子領域），並專注在核心SubDomain（子領域）。 透過一系列設計模式，把 Domain Knowledge（知識領域）注入到 Model（程式模型）中（本篇不探討）。  ​\n數位化轉型面臨的問題 在導入數位轉型也不是一件容易的事情，因為會牽扯到幾個問題：\n 原有的產品服務是 toB 或 toC 既有團隊、公司組織的人事如何安排 需不需要雇用專業人士或請外包團隊協助開發數位系統  上述是數位轉型比較常見的問題，但在我經歷的產品開發過程，問題不單單只有這些 \u0026hellip;\n每個產業注重的面向、優先順序都不同，在極少與顧客互動的產業中，組織可能會先轉型營運流程的層面，透過結合數位科技簡化組織的管理以及部門與部門間的業務，導入新科技讓工程流程變得更有效率等。\n在金融、觀光、媒體產業等，組織可能會把重心放在價值主張，從根本層面的探討所提供的產品和服務，像媒體業的公司就會問出「我們是一個販售財經期刊的公司？還是一個提供顧客充足資訊與解析，讓顧客更好的洞悉市場生態，並做更理性且智慧的選擇的企業？」如果答案是後者，業者可能就會將更多的重心放在傳遞（Delivery）與顧客體驗的層面上。\n在數位領域中更成熟的組織，不僅轉型了其營運流程以及價值主張; 成為極為靈敏且以顧客體驗為核心的企業，數位成熟的組織更是建立了一整個數位生態，並從能力、文化、與整個生態系統上驅動轉型，成為一個不斷去挑戰、測試、並且極為靈敏的轉型組織。\n而像是麥肯錫、IBM 等組織常提起的數位再造（Digital Reinvention）則是一個組織核心價值的根本轉化。也是前面提到的，從根本層面探討目前提供的產品與服務，並重新定義價值主張。在這個階段，組織必須要徹底審視＆洞悉 User Journey（顧客旅程），並定義出需要被優化或是新增的環節點，再建立明確的策略。\n​\n數位化轉型實務經驗（進入軟體開發的過程） 以我在 Healthcare（醫療）領域，幫助醫院做數位轉型，把傳統的紙本病例轉變為電子病歷的經驗，進入軟體開發階段之前，就需要跟原有服務的專業人士（院長、護理師）做需求訪談，以便確定需求，最後需求確定完再整理好 Spec，需要給服務單位知道產品開發的範圍、時程，也同時讓軟體開發單位了解其中的 Domain Knowledge（知識領域）。\n 這裡也建議，若客戶允許的話，安排長時間去觀察原先的服務流程， 因為有些「細節」是只有使用者才知道，而這也是站在使用者角度去思考產品的易用性，而非主觀的認知，這是成為一個傑出的 PM 必須要學會的事情。\n 當 PM 把整理好的 Spec 交付給軟體開發單位，通常 PM 會開一份比較完整、具體的 PRD（後續再分享細節）給開發團隊，這份 PRD 會有：\n User Story 完整描述功能的背景 實務上的 Business Logic（業務邏輯） UI相關文件（Prototype、WireFrame、Mockup）  而開發團隊會根據 UserStory、Business Logic和 UI 去拆分 Task、Subtask，Task 會是一個具體的執行任務，Ex：UI Layout、Fetch API等各種待執行的任務。\n 開發團隊在實作階段，通常一但下手開始開發就停不下來了， 所以 PM 一定要交付具體明確的 PRD 以便團隊開發出預期的產品且實際解決使用者的問題。\n ​\n數位化轉型的小魔法（Tips） 如果你還不知道怎麼開始的話，有幾個方式提供給你參考：\n 長時間觀察客戶的操作流程 每天問使用者三個問題（Domain KnoHow、使用經驗等） 每個月和使用者做 User research（深層理解用戶行為） 定期參加相關產業活動同時觀察 Competitors  ​\nRef  Wiki Domain-Driven Design: What is it and how do you use it? OOSGA  ","permalink":"https://peterpowerfullife.com/blog/domain-driven-design-01/","tags":null,"title":"數位化轉型不可不知 Domain Driven Design"},{"categories":["Product Development 產品開發"],"contents":" 本身不是專業設計師，僅和設計師合作所學到的經驗來做記錄和分享，若有得罪之處和誤解，請見諒～\n ​\n－目錄  什麼是 Design System？ Design System 的優缺點？ 為什麼打造軟體產品前最好先搞懂 Design System？ 如何建構 Design System？ 重頭做一次，絕對不要再發生這些事  ​\n什麼是 Design System？ Design System 其實就像台灣國小生的生字簿：\n 筆劃（設計風格規範） 部首（重複使用的介面設計元素(UI element)） 分類（重複使用的互動設計元素(像是檔案管理)）, Ex: 方向（上下左右）  Design System 就是一種規範、標準，只要遵循它的規則基本上不太會出錯。 它在任何領域無所不在，但不只是視覺介面設計的風格規範而已，更是連貫點、線、面的體現出產品本身，以及產品開發階段開發者所遵循的設計語言。\n​\nDesign System 的優缺點？ ​\n－優點  因為有一個規範可循，可以減少設計和技術的溝通成本（即使團隊架構逐漸龐大、產品跨國開發） 一致性的設計語言，專注在用戶需求、產品本身，以利於產品開發。  ​\n－缺點  限制創意 建構初期時間壓力大，需要在短時間內思考非常地深遠，以便後續產品開發、重構  其實很有趣，雖說它減少產品開發中的溝通成本，卻也在建構初期耗費設計上的時間、心力（請給公司設計部門一個讚）\n​\n為什麼打造軟體產品前最好先搞懂 Design System？ 如果以軟體科技領域來說，Design System 可能會被歸類為設計部門的職責， 但我認為只要是開發自有產品，而不是一般接案、代工公司，那基本上公司從上到下都要知道 Design System，因為它會在產品投入開發後發揮強大的影響力！甚至在跨產品團隊逐漸擴大成為一種標誌性的識別。\n​\n－身份不同會有不同的體悟  對 Designer 而言，Design System 是一種復用的元件集合。 對 RD 而言，Component 是遵循 Design System 所開發出的 UI 復用元件。  一旦 Design System 建立完成後，RD 就能夠遵循 Design System 開發出團隊所需要的共用元件， 但在開發共用元件之前，如果 RD 不知道 Design System 就埋頭開始開發，那麼在不懂的情況下所開發出的元件，可能會造成視覺落差、破壞中長期產品的標誌性識別。\n這也是為什麼打造軟體產品之前，最好先搞懂 Design System 的原因之一。\n​\n如何建構 Design System？ 建構 Design System 需要同時思考到產品本身、產品標誌性識別甚至是 CIS，一但有這些共識，就會開始以下步驟：\n  盤點 Visual Audit (視覺審核)\n 確認元素和品質    建立 Visual Design Language(視覺設計共同語言)\n 顏色 尺寸 字體    打造 UI Library\n  Documentation（文件化）\n 標準建立完的最後一步就是文件化以利後續溝通，至於用什麼方式呈現就單看團隊的決定。    UI Library 建構的工具百百種，這裡不一一紀錄，可以參考：\n The Top 89 Design Systems Open Source Projects Figma Community Flexport\u0026rsquo;s design system  ​\n重頭做一次，絕對不要再發生這些事 設計團隊很用心地完成 Design System、前端工程部門也遵照設計規則去開發出內部的 Component Library，可是做完之後我們遇到了以下問題。\n​\n－若有多個專案和需求，根本來不及提供給需求方 如果今天只有一個產品線\u0008，設計師和工程師還可以一步一步地設計、開發，但今天若有多個產品線，所需要的 Component 都不一樣那根本就沒辦法應付\u0008。\n來不及提供怎麼辦？不做了嗎？當然不是！ 開發部門先捨棄設計規則，一但設計團隊把 Design system 釋出後再無縫接軌替換 Component。\n在這階段 PM 需要知道有哪些 Component 是沒有遵照 Design system，因為同時設計和開發的情況下 Component 會有多個版本，一不小心這個 Component 在 A 產品、B 產品就會長不一樣。\n​\n－必須有專責的開發部門、窗口 在團隊當中人員的調動都是很正常的，可是如果原本負責公司內部 Component Library 的 RD 有任何異動，這時候誰要維護、開發？\n為了避免這種事情發生，團隊一開始就要明定由哪個 PM、團隊負責，這非常重要！\n它也是屬於產品的一部分，由 Component 所疊加上去的功能，是最貼近使用者、客戶的產品\u0008\u0008\u0008。\n​\nRef  Wiki - Design system inside-design - guide-to-design-systems Pic-01 Pic-03  ","permalink":"https://peterpowerfullife.com/blog/design-system/","tags":null,"title":"開發軟體產品前請先搞懂 Design System"},{"categories":["Product Development 產品開發"],"contents":"​\n目錄  什麼是 Prototype? 為什麼需要 Prototype? 模擬 Scenario Visualization High \u0026amp; Low Fidelity Prototype Usability Testing（易用性測試） 最後的最後  ​\n什麼是 Prototype? 從英翻中的字義上來看，通常會理解為「原型」、「雛型」。 不過在科技軟體領域，通常不會用中文來表達，一般都會說 Prototype，因為用「英文」才不會失去它的真實含義。\nPrototype 它是產品的初步樣貌，至於產品的初步樣貌每個人、團隊有不同的定義，這應該在 Product RoadMap 階段就要定義好。\n​\n為什麼需要 Prototype?  驗證產品未來的可行性 開發成本低，對新創團隊來說可以省下很多資源 產品有初步的 Prototype 才可以向世人、市場去 Demo，得到真實的回饋  ​\n模擬 Scenario PM 一定要會 Prototype 這項技能，因為當你遇到產品的這些狀況：\n 開發新產品 現有產品有新的需求進來  單純把邏輯寫成文件（PRD），可能還是會漏掉一些細節，也會有一些誤差存在。\n​\nVisualization PM 在說明需求時，團隊如果還沒有建立一個具體共識那每個人就會想到不同的服務和功能。\n 一顆圓形的水果\n你會想到什麼？蘋果？橘子？柳丁？龍眼 \u0026hellip;\n 如果 PM 會 Prototype 這項技能，那就能夠透過Prototype 和大家做一個視覺化溝通，這樣就可以確保：\n 設計和開發團隊後續能開發出產品所需要的樣貌、功能 你爽、我爽、大家都爽，最怕沒有共識往錯誤的方向開發，最後大家還要重做 （自建Meteo Fall Development(隕石式開發)？） 團隊能夠開發出產品，且符合市場使用者的期待  ​\nHigh \u0026amp; Low Fidelity Prototype Prototype 可分為 High \u0026amp; Low fidelity ：\n Low Fidelity Prototype（低擬真） High Fidelity Prototype（高擬真）  ​\n－Low Fidelity Prototype（低擬真） 開發產品的樣貌、雛形之前，一開始會先從低擬真去開發，原因：\n 省時 省錢 讓團隊每個人快速進入狀況，我把它定義為 Product Zone（產品境界），可理解成一種 Flow（心流） 藉以理解產品的設計、要解決的真實問題。  ​\n－High Fidelity Prototype（高擬真） 至於高擬真通常比較少用，因為這種方式的缺點：\n 耗時 耗工（做高擬真不如直接進入開發）   什麼情況會用到高擬真呢？以下是我個人的經驗和見解：\n  安全性及金流相關服務 團隊的產品涉及到硬體開發，需要 ID(工業設計)，因為成本高方向錯就難回頭了  ​\nUsability Testing（易用性測試）  其實這個 Block 範疇很大、很廣，日後有機會再和大家做細部分享，但 Prototype 可以做初步的 Usability Testing。\n ​\n－Definition 簡單理解一下 Usability Testing 的定義吧。\nUsability Testing 是透過使用者的真實體驗來評估產品是否滿足用戶需求的方法，它反應真實用戶的使用經驗。 它可以幫助產品（服務）更加貼近用戶的習慣，產品做出來，可以用但不代表貼近用戶的真實需求，所以才需要做 Usability Testing。\n​\n－閉上眼睛想像一下 試想一下，當團隊耗時了一個月完成開發高鐵訂票軟體系統，結果就在上線那天整個炸掉不能訂票，這時是不是完蛋了？所以產品在 Testing \u0026amp; Deployment 之前，若有 Prototype 就可以提前預見產品會遇到的問題、產品用起來的爽度等。\n以上種種細節，透過 Prototype 和團隊討論，就是一個簡單的Usability Testing（易用性測試）。\n​\n－最後的最後 最後，關於 Prototype 的相關工具有百百種，這裡就不紀錄和分享了，\u0008PM 在Prototype 出來之前，一定是比團隊任何人還要早進入 Product Zone，如果有產品的初步樣貌，那麼工具只是一種實踐的手段罷了。\n​\nRef  Wiki - Usability testing Wiki - Prototype Pic  ","permalink":"https://peterpowerfullife.com/blog/prototype/","tags":null,"title":"Prototype Mystery"},{"categories":["Product Development 產品開發"],"contents":"目錄  紀錄這篇文章的契機 什麼是產品？ 為什麼要開發產品？ 需要哪些資源才能做出一個產品？ 要怎麼找到人開發產品？ 怎麼拿到錢來開發產品？ 組成產品的三個要素 商業領域的職務 產品經理要做哪些事? 產品經理的日常（大方向） 產品經理是商業策略的角色之一  ​\n紀錄這篇文章的契機 在台灣，高中、大學的科系可能有數學系、資工系、法律系，但讀者有聽過產品管理系、產品學系嗎？ 現在可能有，但在我學涯階段是沒有產品管理類似的科系，有的話也只有歐美國家才有這種科系。 這也是為什麼產品管理、開發困難的地方之一，因為你並沒有一個途徑可循。\n另外侄子姪女漸漸長大了，有時候問到工作內容，再紀錄「帶小朋友認識產品經理的世界」這篇文章之前，想先透過這篇文章幫助更多人大方向理解產品經理的工作。\n​\n什麼是產品？ 只要是人們使用的東西（動物或某個群體也算），包含軟、硬體，甚至還有非常多品項、種類都是產品的一種。\n它們都有一個共通點就是 「被使用的產品」！\n​\n為什麼要開發產品？ 產品是製造出來滿足人們、或某個群體的需求或慾望。\n簡單說就是，有些人需要什麼，而勢必有些人就得要去做些什麼。\n想想生活上的水壺、課程、手錶等，這些都是因為需求而產生的。\n​\n需要哪些資源才能做出一個產品？  這裡我只討論產品本身，後續有機會分享「帶小朋友認識產品經理的世界」這篇文章，我會詳述產品和商品的差異。\n 打造一個產品真的非常難、也非常耗費資源！\n但不管怎麼樣，有一項資源是不論要製造什麼產品都需要的，那就是「人」！\n因為，我們總需要人來做些什麼才能做出一個產品 （先不討論機器人這件事，因為機器人在前期也是需要人來規劃、開發、管理）\n​\n要怎麼找到人開發產品？ 我們需要人來開發產品，那要怎麼找到這些人來做產品呢？\n找人幫你做東西？是不是相對要提供什麼價值呢？錢？股份？經驗累積？\n大部分，都是透過錢找到人來開發產品。\n​\n怎麼拿到錢來開發產品？ 簡單說，賣東西就可以賺錢了！真的！\n但在那之前，勢必要有一筆資金投入資源開發產品， 所以這也是許多創業者的壓力來源，要找各種管道籌備資金 （這裡不詳細說明怕偏離主題）\n產品賣出去拿到錢就可以投入更多資源開發、生產更多的產品。\n​\n組成產品的三個要素  組成產品的三個要素（產品不分軟體、硬體，甚至是飲料等）飲料跟科技也是有關的，它需要機器的相關製程\n更生活化的例子，以 iPhone 來舉例，其實會需要以下這些角色來開發 iPhone 這個產品。\n －科技  軟、硬體工程師  ​\n－設計 產品的樣貌（顏色、形狀）、產品的使用體驗（流程、功能、解決使用者哪些痛點）\niPhone 手機看起來怎樣？用起來怎樣？\n 產品設計師 工業設計師  ​\n－What？ 最後一個問號其實就是商業！商業行為是支撐產品的關鍵要素之一！\n這也是有些產品經理本身不理解、似懂非懂的一個環節，但產品經理其實跟商業有非常大的關係！\n​\n商業領域的職務 哪些關鍵人物為商業領域工作呢？\n Business Development Sales Marketing CEO  以上這些職務會需要去幫助公司持續在市場運作。\n​\n產品經理要做哪些事？  上面那張圖完整說明了產品經理的工作內容。\n 產品經理的工作，涉及到使用者體驗、技術、商業以及溝通。 所以說這職務真的非常不容易！不僅僅是開發產品而已，所以需要非常大的學習力和拼勁，才有可能把產品推上市！\n​\n－產品經理的日常（大方向） 以一個軟體領域的產品經理角度來看，不細述細節，其大方向包含：\n 和 RD 討論我們可以做出什麼產品，要用什麼技術等 和 Designer 討論使用者可能會希望如何體驗產品 和 Marketing 溝通如何曝光、營運、銷售產品  以上這幾點都做到，這也就促成了一個商業行為，產品也就成功了！（通常是這樣，但沒那麼簡單和容易）\n​\n產品經理是商業策略的角色之一 理解完上述，其實可以知道產品經理就是了解科技、設計以及商業行為運作，所以產品經理也是屬於商業策略的角色之一！\n例如：很多人喜歡 Rolex，所以 Rolex 就請人設計、生產、製造，賺錢來支付薪水給員工，不段循環形成更多的商業活動。 賣東西給別人就是在經營生意，因為商業是產品不可分割的一部分。\n如果沒有商業，也就沒有產品！因為產品是透過商業來支撐的，產品因商業而存在， 對於產品管理，這是一個非常重要的核心思想！這也是能否不斷成長的關鍵之一！\n​\nRef  Pic - Martin Eriksson（mind the product）  ","permalink":"https://peterpowerfullife.com/blog/what-is-product-manager/","tags":null,"title":"讓我帶你認識產品經理的世界"}]