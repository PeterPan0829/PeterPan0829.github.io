[{"categories":["Product Development"],"contents":"在產品開發的前期，我們需要做一個好的產品策略，建立產品策略的第一步，就是要了解產品的消費者潛在用戶是誰。\n－目錄  什麼是 Persona(人物誌)？ Persona 的基本要素＆執行細節 Persona 工具樣板 Persona 是產品經理擬定產品策略的重點之一 產品經理第一天到職該做的事 Persona 做完了，然後呢？  什麼是 Persona(人物誌)？  TA(Target Audience) 中文意思為目標族群。\n Persona 最早是由互動設計大師 Alan Cooper 在1983年提出這個概念。\n他在 1980 年期間寫了多個軟體應用程式，其中包含 Windows 的 Microphone II 和 SuperProject(超級專案)， 之後成為微軟的 Visual Basic 程式，後續面對快速發展的軟體產業開始為其他公司提供諮詢服務，幫助業主設計出好用、好上手的軟體程式。\n長久經驗和熱忱讓他發現並歸納出「易於使用的共通點」，並引入到互動設計、產品設計的方法學，在產品設計階段，透過同理心去描繪虛擬的使用者來具象化產品使用場景、角色需求，因而誕生了這套「Persona」設計工具。\n我在日常生活中買任何東西，像是：生活用品、禮物等，常常會想一個問題 - 這間公司企業是怎麽訂定 TA 的輪廓特徵？\n當你要向市場販售你的服務、產品，必須要知道 TA 有哪些，理解產品要給哪些族群使用、哪些族群是我的潛在用戶？知道這些你的產品才有可能在市場上立足並找到 PMF，這時候就需要 Persona 以虛構的方式來描繪出潛在 TA 。\n產品的 TA 可能有很多個，因為你的產品不會只有一個用戶，所以在製作 Persona 時需要多個角色的數據資料，但也不用太多，通常 2 ~ 5 個就好， 在這 5 個 Persona 當中再去分層重要、不重要的角色，這樣做的好處是：\n 足夠多的 Persona 數量，確保真的知道潛在市場、TA 同時釐清「哪些不是產品的用戶」也是幫助團隊工作更有效率的方法  Persona 的基本要素＆執行細節 要打造一個滿足用戶需求的產品，我們需要 Persona 來打開用戶神秘的面紗。\nPersona 的目的是了解你的產品用戶，其中基本的要素包含：\n 基本資料（照片、年齡、性別、職業、家庭、教育、居住地） 角色的一句話（最能代表他所處情境、態度與個性的台詞，不相關沒關係可以當作是側寫） 背景故事（與產品有關係的身分、社會認同、技能、背景經驗、興趣習慣） 情感期望（用戶想成為的自我形象、想滿足的期望、產生行為的動力） 忠誠度（角色和產品的關係，是新客、淺在用戶還是鐵粉） 目標（角色要解決的問題、希望避免的損失、希望獲得的好處） 行為（角色目前採取的行動、替代方案、感受不方便的事情）  －執行細節 另外特別留意以下：\n  Persona 最好限制在一頁，方便閱讀、清楚明瞭。\n  基本資料的照片非常重要，因為沒有照片感覺不到溫度及真實感，雖然 Persona 是一個虛構角色，但它還是必須依靠同理心去制定多種角色藉以釐清需求。\n  最重要的是目標，專注在要解決的問題，不要添加太多個人細節。\n  背景故事和忠誠度沒有直接關係，像是統一獅棒球粉絲不一定要會打棒球。\n  注重行為本身，不應該以人口特徵來建立，例如說男性 20 到 40 歲。\n  Persona 工具樣板  工具只是實踐的手段之一，但經過整理後簡單、清楚的文件看起來也比較舒服，以下參考相關工具。\n 網路上有大大小小的樣板可供參考，針對產品市場及需求可能會有不一樣的指標，不過基本上離不開上述提及的基本要素。\n 插畫素材 - Blush Persona 樣板 - Cacoo Persona 樣板 - Xtensio Persona 樣板 - Hubspot  Persona 是產品經理擬定產品策略的重點之一 之前提過，只要是人們使用的東西(動物或某個群體也算)，包含軟、硬體甚至還有非常多品項、種類都是屬於產品的一種，它們都有一個共通點就是 「被使用的產品」！\n如果沒有擬定 Persona 也就沒辦法做好產品策略：\n 無法解釋產品或產品功能背後的策略、原因 列了多項產品功能，卻沒有專注在最主要群體的需求上 沒辦法優先解決用戶問題 沒辦法根據用戶的反饋去迭代、優化產品功能  另外，有些公司都是把 Persona 歸類在 UX Designer 的工作項目， 但從以上內容可以得知做好產品策略應也是產品經理必須執掌的一部分，至於 PM 和 UX Designer 如何協作每間公司文化跟流程都不一樣。\n產品經理第一天到職該做的事 PM 第一天上班除了把軟硬體及工作環境設置好以外，你必須思考該如何快速上手你的工作。\n除了親身去體驗、使用產品之外，也要閱讀既有產品的 Persona 相關文件，藉此了解產品以及日後如何做優化迭代、擬定產品策略。\nPersona 文件可以幫助產品經理：\n 了解用戶發現實際需求 產品開發階段需對標 Persona 進行產品開發 視產品生命週期不同階段擬定不一樣的產品策略 和用戶建立關係，站在用戶角度、用客戶的語言溝通（不說行話） 應對用戶的問題和回饋，當用戶提出意見或反饋時能立即處理 幫助行銷部門撰寫貼近 TA 的文案  Persona 做完了，然後呢？ Persona 整理完之後必須帶上產品使用情境，例如：\n 當用戶「接近午夜的時間看完電影要回家時」，他會「搭 Uber」 當用戶「遇到疫情 4 級警戒不能隨意外出買午餐」，他會「叫外送」 當用戶「不想用紙筆記帳」，他會「使用雲端軟體產品輔助記帳」  最後，了解用戶、挖掘 TA 不能只靠 Persona。\n因為 Persona 是點狀的它沒有時間軸的概念，例如：Uber 用戶可能是一位剛看完電影要回家的城市青年，但 Persona 沒有紀錄什麼時間點會使用 Uber 這個平台做哪些事情、有沒有其他需求等等，這時候就需要 User Journey Map(用戶體驗地圖) 來釐清（待續）。\nRef  Alan Cooper Blush 插畫素材 Universe User Personas by Arthur Chayka Love, Hate, and Empathy: Why We Still Need Personas Cacoo - Persona Template Hubspot Usabilitytools  ","permalink":"https://peterpowerfullife.com/blog/pm-basic-persona/","tags":null,"title":"產品經理的硬實力 - Persona(人物誌)"},{"categories":["Project Management"],"contents":"上篇內容提到專案管理的基礎觀念、解構工作等，這一篇來了解專案經理這個職務，以及專案管理工作有哪些細節。\n－目錄  專案經理職務內容是什麼？和產品經理有什麼差別？ 專案生命週期及流程 專案溝通計劃表 台灣環境的 PM = Product + Project 😅  專案經理職務內容是什麼？和產品經理有什麼差別？ 網路上一堆針對產品經理、專案經理的工作職務差異說明，簡單說，大方向的定義就是：\n 產品經理專職開發什麼產品（What） 專案經理專職什麼時候開發產品（When）  －直接看業界徵才JD（Job Description）  這裡以 17LIVE 公司職務徵才JD為範例，理解其職務內容和差異。\n ＊17Live - Product Manager 產品經理 職務內容為：  和設計師、資料科學家以及用戶研究專員協作，參與產品開發、找到新的商業模式。 收集需求和使用回饋，撰寫 PRD(產品需求規格書)。 和 Project Manager(專案經理) 協作，制定開發產品優先順序及時間排程。 制定關鍵產品指標、監測產品效能。   延伸文章：“做一道菜的食譜 - PRD(Product Requirements Document)產品需求規格書\u0008“\n ＊17Live - Project Manager 專案經理 職務內容為：  專案經理只有一個重點：協助團隊準時交付高質量的程式碼，清楚影響專案的大小事，這個職務不需要參與產品設計、實驗，也不用分析產品數據，執行就是 KPI，團隊就是專案經理的產品。\u0008   規劃、安排資源，並讓團隊知道所有資源分配概況。 制定專案計畫，並監控、追蹤進度。 確保所有專案能在預算、能力圈準時交付。 識別出專案的資源配置差距並改善。 制定專案目標、範圍，集結所有利害關係人確保技術可行性。 透過敏捷開發方式和產品經理、工程團隊協作，並迭代交付新功能。  －總結差異性 Product Manager(產品經理)：經過產品規劃、開發將產品順利推上市，帶領團隊成員打造滿足市場、客戶需求的產品。\nProject Manager(專案經理)：整合可利用的內外部資源，在合理的時程、資源及功能範疇下，準時交付專案。\n從 JD 及差異性可以理解到專案經理需要具備幾個特質：\n 資源整合、協調溝通，了解專案的風險及複雜程度 良好的時間管理，清楚知道專案中的 Milestone 需要何時完成 理解力及統整訊息的能力，做好 WBS 將大方向需求解構成小的任務 抗壓性高，能做好情緒管理，有任何差錯總是先釐清、解決問題而不是責怪團隊  專案生命週期及流程  無論是專案還是產品都有它們的生命週期，而一個專案的生命週期包含這五個連續性的階段，這裡就以上篇提到的家族旅遊計畫簡單描述一個專案生命週期和作業流程。純粹範例當作參考，專案實際執行上其實會遇到更多麻煩的事情。\n －啟動  清楚知道家族旅遊的目的（Ex：增進感情、慶祝某位成員生日、純粹遊玩） 展開旅遊前，調查多少人籌辦旅遊計畫 旅遊所需要的資金、時間（食宿、遊玩、幾天等） 旅遊的相關風險、備案（交通延遲等外力影響） 去程、回程的具體時間  －規劃  排定時程（每日行程表） 成本評估（時間、金錢、人力\u0008及小組） 整理所有行程相關文件、窗口（保險、護照、遊客歷史病例等）  －執行  遊客有無參與已排定行程  －追蹤監控  確認遊客出入安全 與小組相關負責人同步資訊  －結束  確保每位遊客平安順利準時回家 挑選下一次家族旅遊的專案負責人 詢問大家的旅遊回饋  專案溝通計劃表 這裡以上篇提到的家族旅遊計畫為例，擬定一個溝通計畫表。\n*註：PJM = 專案經理\n為了避免無謂的會議，很多時候因為要配合因應制度的會議、應付表面功夫的會議，這時就必須去準備相關會議資料、甚至是純粹陪同參與。\n專案經理的職責之一就是把專案溝通計劃表明定下來，幫助自身和團隊去剔除這種無謂的會議，除了徹底執行溝通計畫，同時也要定期評估各項溝通活動的執行成效，必要時也得修正溝通計畫。\n一個專案當中會有溝通計畫表，大概會有以下內容：\n 專案利害關係人：這個專案和誰有關 溝通方式、工具（用什麼方式和管道溝通、溝通頻率、溝通內容有哪些） 指定專案負責人（誰做什麼、做哪些事情）  台灣環境的 PM = Product + Project 😅 從前輩及身邊好友的經歷分享，在海外 PM 一職會定義非常清楚，Product Manager(產品經理) 和 Project Manager(專案經理) 工作內容是各自獨立的，不會同時身兼產品、專案經理。\n過去，我曾經待過一間公司任職產品經理但同時也要負責專案管理的工作，公司人手不夠或老闆本身不是 PM, RD 背景出身的話就會有這個問題，所以是好還是壞？\n為什麼領一份薪水要做兩個職務的工作內容？為什麼我這麼倒霉進到這樣的公司？講不完，有太多太多可以抱怨了 \u0026hellip;\n我建議可以學習轉念，接不接受因人而異，但沒有適不適合，只有你喜不喜歡。\n如果專職產品經理，而公司也需要你做專案的工作內容(或相反)，其實你可以好好去充實自己：\n 你還是產品經理，務必要把產品策略、開發等工作做好，進而開發出用戶所期望的產品 向專案經理學習，好好累積專案管理實務上的能力 多了這個經歷，你也能知道自己是最終是喜歡開發產品還是管理專案  如果個人還是想專職在一個職務上，以下建議供參考：\n 面試時應好好與公司、主管溝通詢問會不會有這個需求 去海外發展，以矽谷為例，大部分的軟體公司 PM 都是專職一個職務(產品或專案)  ","permalink":"https://peterpowerfullife.com/blog/projectmanager-and-jobdetail/","tags":null,"title":"專案管理(下) - Project Manager職務和其工作細節"},{"categories":["Product Development"],"contents":"標題雖為產品經理如何和 QA(Quality Assurance) 合作， 但實際上應是 PM 如何和整個團隊協作才是，此篇文章純粹紀錄團隊和 QA 之間的協作，以及自己經歷的相關紀錄。\n－目錄  測試項目不明確 / 彼此的誤解 不切實際的時程 Retro也不要落掉QA的環節  測試項目不明確 / 彼此的誤解 QA 預期某功能的成果和團隊預期的不一致，不斷地 back and forth(來來回回) 卻始終沒有結果，針對產品的測項(測試項目)如果沒有定義清楚，QA 自然不知道要測試哪些東西、不知道實際測試結果和預期結果之間的落差，但這個問題可以及早定義出標準。\n－PRD 應涵蓋 Feature Design Checklist  當你使用某個產品時發現，咦！這是 Bug 嗎？好怪呀！\n但客服人員卻跟你說：沒事的！這是 Feature ＸＤ\n 很多時候我們在產品設計、規劃，必須要把 feature 各個狀態明確定義出來，才不會讓產品用起來有種四不像的感覺或是很差的體驗。\n對使用者來說他們要的是直觀、好上手的產品，可是要開發出這樣的產品給使用者其實是有難度的，最好的方式就是 - 把自己當作傻瓜。\n有這樣的同理心，基本上就會預想到大部分會發生的 Scenarios，也才能列出對應的 Feature design checklist 進而設計出易於使用的產品、功能。\n在 PRD 當中可以把 QA 所需要的 Feature Design Checklist 列入進去，藉此可以讓 QA 知道功能的預期結果去比對實際的測試結果，其中相關的 Acceptance Criteria(驗收標準) 不僅僅是給 QA 看的，同時也是 RD 在 Local Env 開發所要完成的功能場景。\n而這份 Feature Design Checklist 清單會包含：\n 狀態  預設 等待 失敗 成功 重複使用的保存狀態   裝置  硬體裝置 螢幕大小 瀏覽器   功能  使用者怎麼使用這個功能？ 使用者如何發現產品有這個功能？ 使用者首次使用(Onboarding) 時，如何指導用戶？   角色  根據不同權限的使用者畫面該如何呈現？（UI） 根據不同權限的使用者需要定義不同的 workflows （UX）    －什麼是 Edge Cases Edge case(極端、邊界案例) 是非常少見的非預期狀況。\n在軟體產品當中，Edge Cases 會破壞使用體驗，所以必須明確地義非預期狀況下的 maximums(最大值) 和 minimums(最小值)。\n就算團隊沒有 QA，這時候 PM 也要想辦法生出來，多溝通、討論才能設想流程相關的 Edge Cases，這是非常重要的事情！\n不過 unexpected(不在預期) 的狀態為什麼這麼重要？\n因為 RD 在開發階段一定自然會遇到針對不同功能的狀態顯示，如果沒有 UI, Edge Cases 他們只能自己通靈腦補去做假設，而在有限的時間之內，可憐的 RD 怎麼可能想得出最好的解決方案？\n－Edge Cases Checklist 除了 Feature Design Checklist 之外，很多時候讓 QA 煩惱的是一些 Edge case(極端、邊界案例) 相關的問題， 因為使用者操作使用產品時，一定會遇到不在預期中的的極端狀況，產品在規劃階段定義清楚極端狀況的反饋、處理，就能夠避免使用者的抱怨。\n通常我們會針對所開發的產品，訂定相關的 Edge Cases，例如：\n 搜尋結果沒找到 A 功能對現有功能的影響、彼此連動 Mail 可以連續點擊 Send(送出) 郵件 系統的問題而不是使用者的錯誤，必須提示讓使用者知道 產品結帳頁面的 CTA 下單按鈕，能夠不斷重複地點擊結帳 使用者向系統要求的資訊而我們沒辦法提供給他，該如何提示給使用者 沒有網路怎麼辦？某功能進行到一半沒網路會發生什麼情況？顯示的訊息是什麼？ 無限上傳圖片，使用者或許不太可能上傳超過一千張圖片，但系統會如何處理成千上萬的圖片呢？有沒有明確定義 maximums(最大值) 和 minimums(最小值)？  以上這幾種具體的 Edge Cases 其實更抽象來看就是這幾種層面：\n Validation(驗證) Submission(送出) Permission(權限) Content(內容) Role(角色)  而在 PRD 列出 Edge Cases 的好處是：\n 交出高品質的產品 提高客戶滿意度 / 降低客訴 減少 release 後的 bug / issue 大家準時下班ＸＤ  －更多、更多、更多地溝通 PM 產出 PRD 後接著和團隊過一次 Kick-off Meeting，務必要請 QA 也參與這個會議，通常 QA 還沒看到 Acceptance Criteria 只確認相關的 UserStory 就會提出產品、功能會遇到的問題並提出對應方式，而相關的預期行為也就要補充到 Acceptance Criteria 這個 Section 當中。\n除此之外，PM 一定要再三和 QA 確認驗收標準，任何影響到功能運作的情境都要不斷地補充、溝通。\n最後，如果時間允許也請 QA 針對這份 PRD 列出 Acceptance Criteria，因為很多時候雙方的標準不一樣自然就增加溝通的成本。\n不切實際的時程 團隊都知道 Deadline，但始終沒有預留 buffer 給 QA 做好測試 \u0026hellip;\n除了不切實際的時程之外，更多時候是漏掉測試所需要的時間然後就匆匆忙忙地上線，最後 \u0026hellip; 最後東西就爆了。\n－如何抓時程？ 概算、預估 RD 所需要的開發時間一直是 PM 的難題之一，而我針對排程計畫通常會這麼做：\n Break down 功能模組，切細再切細 由 RD 概算開發時間  把大功能、產品主流程服務切成各種小等分，例如網頁的 UI Layout, Fetch API 這些 Task 分開並各抓時間出來，最後再由 RD 親自去概算一個時間，這樣才能大致精準抓出開發所需要的時程。\n以上是團隊協作必須要有的默契和認知，那 QA 這裡怎麼抓時程？\n  跑 Scrum Sprint 讓 RD, QA 一起估算 Story Point，把開發、測試時間一併計算進去。 不是敏捷的開發流程，不管有沒有 QA Team，我都會把 RD 所概算出的開發時間(理想) 乘以 1 倍(實際)，而這些時間其實就是 QA 的測試時程，同時也讓 RD 解相關的技術問題。   而在 RD 完成所有開發工作之前，QA 同時也要提供 Test cases sheet(測試項目列表) 和團隊溝通。\n－Bug 也有優先順序 QA 開始測試時，貓抓老鼠的遊戲就此登場囉～\n這時候 RD 都是雙手合十祈禱不要有 Bug，就算有也不要叫我修ＸＤ\n簡單的換位思考，QA 要的就是測試、交付高質量的產品，但工程部門一心只想要趕快把東西交付而忽略測試，純粹是利益不同的問題。\n測試同時會產出 Bug Report，但 PM 一定要積極主動確保哪些 Bug 不會拖到 Deliver 的時間，在時間有限的情況之下， 有些 Bug 不修也不影響產品的主流程，或只是 UI 上需要微調的部分，這些情況不應該影響到 release ，所以一定要和 QA 保持溝通。\nRetro也不要落掉QA的環節 如果團隊是跑 Agile(敏捷開發)，在 Retrospective Meeting(回顧會議) 一定要好好討論 QA 的工作環節。\n我們可以在 Retro 當中討論這些問題：\n 哪些功能 QA 花最多時間測試？ 哪些 Bug 是 RD 花最多時間去修復的？ 哪些 Bug 是在 release 之前就能發現的？什麼原因不能在 release 前就修好呢？ QA 在開測項有無遇到什麼問題？ 最後，任何想到的 Edge case(邊界案例) 一定要記錄到下一次的 Test cases sheet(測試項目列表)  產品的版本、功能一個又一個不斷地 release， 開發順利的同時也必須從經驗和大家的建議去進步，為的是省下 QA 的測試時間、為 RD 排除各種狀況專心寫 Code。\n謝謝每個團隊中的 QA 夥伴，即使在產品的 Roadmap 訂定市場的突破點，但 QA 就是站在使用者和差勁的 UI/UX 中間，為產品做最後的把關！\nRef  Cover Pic - epicpxls Pic - thenounproject  ","permalink":"https://peterpowerfullife.com/blog/pm-how-to-collaborative-with-qa/","tags":null,"title":"貓抓老鼠的故事 - 產品經理如何和 QA 合作？"},{"categories":["Product Development"],"contents":" PRD（Product Requirements Document）產品需求規格書是什麼？它是做一道菜所需要的食譜 \u0026hellip;\n 開出一份合格的 PRD 是產品經理的基本功、硬實力（不過我認為這當中也牽涉到軟實力的養成）之一。\n廚師出菜都有食譜了，開發一個產品 PM 怎能沒有 PRD 呢？所以在產品開發及現有產品優化、迭代，我們都需要寫好一份 PRD。\n－目錄  一份完整的PRD有哪些內容？ 沒有PRD會有哪些問題？ PRD也可以很簡短、精細 認清團隊及公司的方向  一份完整的PRD有哪些內容？  PRD 的用意是促進團隊成員彼此的溝通，雖然它有一個極度完整的內容， 但只要能對團隊有利、能快速理解真實需求及方向那就不一定要有這份 PRD，一張 A4紙、一頁PPT都可以完成，但必須要包含以下這幾個內容。\n  Objective / Goal  產品需求背景 PRD 內容名詞解釋 User Story User interaction（UI / UX）   Product Structure and flow  Functional map User Flow（Flow chart） UI Flow Business Logic   Timeline and constraints  Date（Start, End, and Pull in the date） Budget Timeline Resources Dependencis   Document status  版本 修改紀錄   More info / Other  i18n 語言文字字串 Database structure Database table relationship    沒有PRD會有哪些問題？ PRD 就是做一道菜的食譜，如果今天一個完全沒有烹飪經驗的人，你跟他說要做 Jellied Eels(鱔魚凍)，你覺得他會知道怎麼做嗎？做出來的菜色，Hell\u0026rsquo;s Kitchen(地獄廚房) 的 Gordon 會滿意嗎？\n曾經在外上課時，業師提及 PRD 這東西只適用在 Waterfall(瀑布式開發)，而敏捷(Agile) 不需要，當時我是不信，一直都不信，今天不管是何種 Methodology，基本的 PRD、SPEC 一定要有！\n依我的經驗，有些公司沒有 PRD、完整產品規格這種 Sense，基本上大概是：\n 細節從頭到尾永遠透過口頭溝通 你想得到灑在雲端各處的各種檔案 RD 們通靈東補西補來完成開發  不管是經營者、執行者，你會想待在這樣的團隊嗎？\n－沒有 Clean Code 只有 Dirty Code  RD 的 Code 髒掉跟 PRD 哪有關係？嘖關係可大了！\n 需求不斷變更的情況，RD 的 Code 都不知道髒到哪種程度了，然後 branch 一直往外開， 但今天只要開發人員異動，後續接手的人豈不是很倒霉？\n同時需求不明確造成開發週期變更，最倒霉的絕對是 RD，他們開始要加班、延誤上線，反正 RD 就是要把東西做出來， 但最重要的是他會開始不喜歡自己、貶低自己在團隊中的價值。\n－公司沒有高度的策略戰術 如果一間公司沒有 PRD 的素養，那相信在企業經營策略、行銷戰術也沒有完整、具體規劃，大概就是走一步算一步，因為 PRD 和 MRD, BRD 有高度相關性（本篇不探討）。\n最終產品做爛，大家再來推責、互相甩鍋，一但有這樣的文化產生、後續的合作也不會多好，傷害已經造成了，就算後續補再好、再精細的 PRD 都沒辦法挽救團隊的向心力。\n－產品無法良好的優化、迭代 沒有 PRD 也行啦！產品最後很勉強地上線，公司上下開始面臨客服問題的鳥事。\n之後要進行產品的優化迭代，怎麼著手？怎麼改？完全是憑感覺，然後再東漏西漏，這邊補一下那邊補一下，PM 和 RD 寶貴的時間就永遠浪費在這。\nPRD也可以很簡短、精細  相信不管身為 PM 還是 RD，一定會覺得：\n難道 PRD 前期規劃一定要花這麼長的時間、這麼齊全的內容才能開始開發嗎？\n 其實 PRD 也可以很簡短、精細，一共有這四個部分：\n 產品目標 產品功能 測試及上線 總體資源（時間、預算、人力）  －定義產品目標 其包含：\n 產品現況 目標 背景 假設  一開始就把產品目標定義好非常重要，如果 PM 不知道這個產品的最終目標是什麼，勢必進入開發時樓一定越蓋越歪，甚至無法完成。\n定義產品目標一定要特別留意，它必須夠具體、夠人性化且易懂，藉此驗證我們非常清楚這個產品的用途，不會有天馬行空的假設出現。\n透過以下問題歸納總結並梳理我們的想法：\n 這個產品是給誰使用的呢？使用者要怎麼使用它？這個產品是 2B 還是 2C呢？若只屬其中一種，未來如何延伸呢？( B2B2C) 為什麼我們要做這個產品？產品有合適的市場嗎？公司對這項產品的期待是什麼？ 我們一定要自己動手做？有沒有現成的架構、方式去開發出這項產品？ 產品開發期間如何做好測試？需要達成哪些指標才能把產品上市？  還有很多細項可以探討，不過最重要的是避免產品目標和解決方案的混淆，把目標定義出來可以讓我們知道終點、目的地，但不是一個到達終點的地圖！\n－產品功能 當知道產品的目標後，就必須把產品功能給詳細描繪出來，其包含：\n User Story User interaction（UI / UX） Functional map User Flow（Flow chart）  此時幾乎已經進入準開發階段，因為團隊會開始去想如何達成產品的目標？\n所以必須時時聯想使用者如何使用這個產品？\n 從使用者角度這個產品的核心重點功能是什麼？ 使用者如何和這個產品互動？ 開發者本身的 Domain 和客戶理解的日常用語是一致的嗎？  而具體描述產品的功能，有經驗的 PM 一定會透過 User Story 來描繪具體的情境，進而把需求、產品互動流程、使用者給串再一起。\n－產品測試及上線 軟體產品在上線前我們一定會透過 CI/CD 做自動化流程：\n Build code Unit Test 從 UIT, SAT, 更新到 PROD 環境  而在功能完整開發出來之前，一定會經過上述一系列的流程，至於什麼時候產品可以上線？取決於以下幾點：\n Functionality（功能）：Prod(正式版) 產品需要包含哪些東西？基本的功能有哪些？ Usability（可用性）：核心重點功能它應該要夠簡單、不煩瑣，快速解決使用者的需求及問題，也就是講求高水準的可用性 Reliability（可靠性）：有沒有經過壓力測試？UI 有沒有一致且是否遵照 DS(Design System)？哪些 Bug 是真的可以勉強接受使用者也不會抱怨的？ Performance（效能）：產品每個獨立功能所運作的時間是多久？例如忘記密碼填寫 Email 後多久會收到信？ Supportability（可支持性）：團隊有沒有足夠人力來因應產品上線的功能優化？團隊 AM(Account Managr) 是否會取得用戶得回饋並反映給團隊？  －總體資源（時間、預算、人力）  在總體資源當中的時間是最讓人容易混淆的部分？這個時間是 Scrum Sprint 的時間還是產品上市的時間？\n 我自己的經驗是，團隊就算最後把產品做完，但有可能 AM、老闆或是客戶一句話就讓這產品遲遲不上線， 所以只要大概知道使用者及公司所期望的產品上線時間是什麼時候，而 PM 應帶領團隊回頭來看 PRD，完成所有的功能需要多少時間？可能是幾個 Cycle 的 Sprint 等等。\n預算及人力的部分，為了打造這個產品，PM 手上的預算有多少？我必須動用多少人、天及資金才能完成產品如期上線？而就目前來說團隊還缺少哪些資源？\n認清團隊及公司的方向 我曾經任職一間公司是完全沒有 PRD、Spec 這東西的， 公司也沒有做好交接事項，很多問題都還要公司同仁去私訊離職的員工。 但今天如果有 PRD 以及相關的 Spec，就能避免這些無謂的舉動，更不會有上述沒有PRD會有哪些問題？提到的這幾個問題。\n而如果一位新進的 PM 遇到的這樣的狀況，一定要立即讓主管甚至是老闆知道， 因為接下來做的產品絕對會有很多問題，你以為只是在既有產品上疊加功能，但你不知道這些功能可能會影響到現有平台的用戶。\n如果是待在這樣的團隊必須要有心理準備，或許這就是長年以來的文化， 先不要把它視為一種不好的習慣，反而要去思考、挖掘最根本的原因是什麼。\n有可能公司高層根本不懂技術、不懂產品開發的細節，只專注在是否獲利如何切入產品的市場。 而歷年的 PM 可能偷懶、RD 覺得有沒有都沒差，經年累月下來就變成了公司的一個習慣，剛加入一個團隊一定要知道這些細節。\n","permalink":"https://peterpowerfullife.com/blog/pm-basic-prd/","tags":null,"title":"產品經理的硬實力 - PRD(產品需求規格書)"},{"categories":["Product Development"],"contents":"－目錄  痛點（恐懼） 癢點（憧憬中的自我幻想） 爽點（需求能即時滿足） B2B 產品注重痛點；B2C 則是爽點   下面會帶到 B2C(Client, User) 和 B2B(Business) 注重的不同層面和切入點，但其實有非常多可以探討，之後我會紀錄在另一篇文章。\n 職涯當中有幸參與大大小小的產品開發、規劃，而成功上市的產品解決了哪些問題？有哪些共通點呢？\n有些產品本身有很多問題，但還是有龐大的死忠客戶 \u0026hellip;\n有些產品本身的價格在市面上比其他競品還要高，但還是有客戶願意買單 \u0026hellip;\n了解產品心理學，在市場找到突破點是每位 PM 的任務之一。\n痛點（恐懼） 你的產品要有大量的使用者那麼要先解決客戶的痛點，產品經理或是行銷領域，產品的痛點是人人討論的議題。\n產品的痛點不代表需求，很多人以為只要滿足使用者的需求就是解決客戶的痛點，但其實不是，正確來說痛點是使用者沒用這個東西會死、天會塌下來的感覺。\n例如：沒有實支實付的保單你沒錢付醫療雜費、沒有這個財務系統你就得多聘僱兩位會計財務等 \u0026hellip;\n痛點是利用人的內心恐懼感，進而達成行銷的目的。\n癢點（憧憬中的自我幻想）  你也想成為鋼鐵人？\n 癢點就是滿足使用者的內心憧憬，只要你用了這個產品，你就能成為那個偶像明星、置身在美好的情境裡。\n許多修圖軟體、App 都是透過癢點來滿足使用者，像是：\n 美圖秀秀，人人都是網美 FaceApp，預測年老的自己  近期疫情嚴峻全國三級警戒，相信很多上班族都開始 WFH 或是分流工作，遠端視訊會議一定少不了的，其中：\n Gather Town，虛擬辦公 Game Boy RPG 遊戲，能夠選定角色、地圖，能根據心情更換名字、造型，雖然大家遠端工作，透過角色扮演盡情群聚，讓工作多了一份樂趣。 IKEA虛擬美圖背景，各種空間虛擬背景，只要使用這個背景就好像住在這些美輪美奐的空間裡。體現了 IKEA 的價值觀 - 美好居家生活之外，也讓消費者心癢癢想直接買一整套主題的傢俱回家。  癢點，簡單說就是要滿足客戶想像中的自己。\n爽點（需求能即時滿足）  早上訂、下午到。\n 只要在網路上購買東西，除了價格、商品真偽以外，消費者最在意的就是我買的東西何時會送到我手中？\n除了線上購物之外，像是家庭刨冰機、章魚燒器具等各種生活品，都是爽點的一種。\n消費者滿足、愉悅的心裡狀態，需求能夠被即時滿足，這就是爽點。\nB2B 產品注重痛點；B2C 則是爽點  純屬個人觀察，若覺得觀點有誤、思路不符邏輯請告訴我。\n 我的觀察是這樣，2008年金融海嘯後全球產業開始以科技為主金融及其他產業為輔，從那時候開始進入創業時代，創業者都是想解決自身遇到的問題走向這條路，而他人的問題也有可能是你我遇到的問題 （B2C）。例如我們生活中常常用到一些小工具，只要感受到滿足 （爽點） 基本上錢就掏出來了，這是 B2C。\n那 B2B 呢？你的產品面對的不是你我單一個用戶而已，而是一整間公司包含上上下下的部門、員工，有時候你的需求方到底是出錢的老闆還是使用這產品的員工？光是 User Interview（用戶訪談）可能就要花一段時間了。\n那所以 B2C 產品比較好做嗎？倒不是，因為不管 2B, 2C 都有各自會面臨到的問題需要解決，但如果你的產品可以解決對方的問題、消除用戶的恐懼（痛點），基本上就成功一半了，後續把客服、營運、客製化、售後服務、用戶回饋並改善做好，你的 2B 產品不見得沒市場，有時候售出後的其他服務反而更賺錢。\nRef  Pic - Unsplash  ","permalink":"https://peterpowerfullife.com/blog/product-psychology/","tags":null,"title":"痛點、癢點、爽點，為產品在市場找到突破點"},{"categories":["Project Management"],"contents":"目錄  什麼是專案？ 專案和專案管理有什麼不同？ 專案管理需要做任務控管、解構工作  什麼是專案？ 英文為 Project、中國稱作為項目，專案字眼上是一種抽象名詞，它是為了完成某一個目標因而具體規劃的活動。\n一個專案通常有以下幾個元素：\n Schedule（時程） Scope（功能範疇） Resource＆Cost（成本, Ex:人力、資金） Quality（產出成果）  專案和專案管理有什麼不同？ Project Management（專案管理）是從 Management（管理）衍伸而來的，其中最大的差異就是專案管理有時間限制及最後的產出結果。\n專案管理是一個隨著時間而持續性的過程，在不同的時間點針對現有的資源去做不同的配置， 在這種科學性的管理模式當中，需要較為廣泛的多元技能，像是：\n  技術能力\n  產品知識\n  人員管理能力\n  業務能力\n  風險評估與控管\n  溝通能力\n  －專案目標會決定所有一切。 老闆、客戶可能對細節會有一些誤差，甚至是專業上的不足，這會影響 PM 在報價、時間以及人力資源的安排， 所以在專案規劃及進行階段，PM 一定要時常問自己：有哪些地方我沒想到？會有哪些意外導致專案失敗？ 進而把外在影響力降到最低。\n專案管理需要做任務控管、解構工作 控管顧名思義需要做控制、管理及規劃。\n正常情況來舉例，以 NBA 職業籃球來說，你不可能叫一個後衛去守中鋒，頂多只會做協防而已。\n專案也是，這當中依據參與人員的能力、專長去進行每一個任務。\n－WBS  Work Breakdown Structure（解構工作）\n 專案需要做有效的任務管理，必須要把大的專案解構成較小、可執行的任務，因為這樣更易於去管理，能在執行初期就看出問題，做適當的資源配置、調整人力。\n在軟體產業當中，如果能把每個任務切小不僅方便 Debug\u0008，同時助於團隊理解開發所需要的時程。\n每一個任務都有明確定義具體完成細節、截止時間，所以在起初的任務安排就非常重要。\n專案的成功與否也取決於能否及時完成任務，所以 Prioritization（優先順序）必須要非常清楚， 同時也要知道任務之間的關係、連動及影響性，因為很有可能其中一個任務沒完成其他的任務就難以延續下去。\n－WBS 範例練習 大家都有旅遊的經驗對吧？聯誼、家族旅遊、畢業旅行等，生活當中的每個活動都是一種專案也可以進行 WBS，馬上來看看以下的家族旅遊計畫。\n  地理位置\n 地點    費用（自費、公基金）\n 計算人數 列出可能的花費（交通、食宿）    時程\n 時間調查 天數    行程內容（大方向）\n 旅宿（哪些飯店旅宿 餐館（哪些餐廳 交通（哪一種交通工具    風險管理\n 找旅行社申請相關證明 找保險公司保旅遊相關保險 Plan B,C 備案（因應天災等外力影響）    －WBS 輔助工具 上方簡單列出一個家族旅遊計畫如何進行 WBS，在實際專案當中通常會搭配圖表讓細節可視化一目瞭然，因而會搭配相關工具做呈現。\n Canva - 線上創作絕佳工作分解結構 Online Visual Paradigm Excel  Ref  Pic - inloox  ","permalink":"https://peterpowerfullife.com/blog/project-and-projectmanagement/","tags":null,"title":"專案管理(上) - 先搞懂專案才能做好專案管理"},{"categories":["Project Management"],"contents":"在軟體開發領域的團隊當中常常要和別人（RD、QA、Marketing等）溝通需求，但不管今天是什麼年紀、職務其實都需要「溝通」這項技能。\n只是因為習慣了工作、生活，我們會覺得這不是一個技能， 「溝通」一個需求、「描述」一個問題等，都需要良好的敘事能力，才能傳達正確的資訊進而解決問題、放大產出。\n我常常會在生活上去練習溝通這件事，一起來看看生活中的產品經理 - 彼得剪髮紀。\n－目錄  建立期待值 我要剪什麼髮型（需求） 該怎麼傳達想法給設計師（溝通） 反思專業領域  建立期待值 三分靠長相，七分靠髮型 XD\n第一次給沒合作過的設計師剪頭髮勢必會有距離感，千萬不要覺得設計師一定知道我們要的感覺。\n剪出來如果不如預期，這絕對是正常的，真的！不要什麼都怪設計師、怪手藝不好，先把自己的需求明確地和設計師溝通吧！\n那我可以怎麼做？就是盡可能把自身的需求具體傳達給設計師。\n我要剪什麼髮型（需求） 剪出自己想要的髮型，這是一個需求，但我一定會具體知道：\n  了解自己\na. 髮質軟、硬\nb. 頭型\nc. 平時會不會整理\n  為什麼我要剪這個髮型？\na. 純粹跟個潮流\nb. 這髮型適合我的頭型、臉型，具有修飾感\nc. 不知道剪什麼髮型就嘗試看看（探索中）\n  我要怎麼剪出這個髮型？\na. 自己剪\nb. 髮廊\nc. 知名髮廊（連鎖、名人御用設計師）\nd. 家庭理髮\n  如果剪壞了、不滿意了，要修剪成什麼樣的髮型？\na. 光頭\nb. 平頭\nc. 設計師自由發揮\nd. 摸摸鼻子走人 \u0026hellip;\n  該怎麼傳達想法給設計師（溝通）   查詢髮廊、設計師的經歷\na. 擅長哪種感覺，例如：日韓系、美式、中短髮或中長髮等\nb. 看看設計師在社群平台上的作品\nc. 髮廊的評價\n  拿之前剪過的型和設計師溝通\na. 提供照片\n  事先做好功課\na. 髮型名稱，例如：美國大兵頭、日韓空氣感、日韓中分微捲蓬鬆\n  Step by step\na. 先剪一部分再剪其他地方，例如：先把頭兩側推平推短，再剪瀏海、後側\nb. 先修出型，確定是想要的感覺再剪短\n  反思專業領域 以上有沒有一種既視感？\n其實作為 PM 或 RD，我們常常需要和老闆、夥伴及客戶溝通討論，這裡我沒有明確提及換位思考，但它也是完美溝通的元素之一。\n溝通感覺是一件很簡單的事，但其實涉及很多學問、心理因素。\n生活中把握每一次練習的機會，讓自己在團隊、專業領域發揮作用吧～\n","permalink":"https://peterpowerfullife.com/blog/life-pm-haircut/","tags":null,"title":"【生活中的產品經理】－彼得剪髮紀（溝通需求）"},{"categories":["Product Development"],"contents":"以前端開發者的角度來看，其實前端不懂商業邏輯也不影響功能開發，因為只要：\n PM 把 Spec 開好 Designer 把 Mockup 弄出來  實作前再過一次功能互動，其實大部分就可以實現了（剩下技術問題），那為什麼做技術研發，要搞懂商業邏輯呢？\n－目錄  從產品角度看待開發技術 從技術角度想到業務層面沒想到的地方 成就感驅動 RD 深層理解產品商業邏輯 解析產品需求估算開發成本 RD 該如何搞懂商業邏輯？  從產品角度看待開發技術 一個產品從概念進入到開發階段，RD 知道產品主要的核心功能、帶給使用者的價值， 這時候就會去思考如何透過自己喜愛的技術去共同開發產品，而這時候就需要去思考開發產品所需要的商業邏輯。\n－RD 邁向攻頂之路 了解 Domain knowledge 只有好處沒壞處，一般來說 RD 的職涯升職大概是：\nJunior RD =\u0026gt; Senior RD =\u0026gt; RD Lead / Tech Lead\n\u0026ndash;\nRD 技術好，從公司角度來看是不可或缺的資產，但回頭看自身的職涯，技術再好，了不起就是一個技術高超的 Senior RD，但若要邁向攻頂之路，必須要懂得需求管理、DDD（Domain Driven Design）。\n從技術角度想到業務層面沒想到的地方 了解商業邏輯，才能從技術的角度想到業務層面沒想到的地方，如果不了解商業邏輯，就不知道產品到底想要做什麼功能， 甚至連需求的商業邏輯都搞不清楚。\n在這種情況的合作模式就是需求來了，RD 接住，然後 PM 排開發時程、開發資源。\n但是 \u0026hellip;\n也許這個需求的設計不合理，你不知道～\n也許這個需求有更好的解決方式，你不知道～\n也許這個需求可以透過現成的技術架構、第三方套件解決，你也不知道～\n都不豬到 \u0026hellip; 只能任人宰割了\n成就感驅動 RD 深層理解產品商業邏輯 作為 RD，把產品功能透過程式實踐出來， 這種虛實整合的成就感是一般人難以理解的，但要獲得這份成就感勢必會驅使 RD 去理解商業邏輯。\n只有了解商業邏輯，才能從更全面的視角去規劃當前、未來的應用技術，因為也許這時間點適合用 A 方法， 但產品開發完成進入用戶成長階段，用戶數量一多也許當時的 A 方法就不適用了。\n不了解商業邏輯，會離用戶的真實需求非常遙遠，越難發現其中的痛點和挑戰，沒辦法提出自身的思路和解決方案，進而解決用戶的難題。\n作為RD，自然希望親手打造解決用戶痛點、體驗友善的產品， 如果產品能得到用戶及團隊認同並產生影響力，那自然會特別有成就感。\n解析產品需求估算開發成本 對 RD 來說，開發一個產品功能最常見的成本有時間成本、開發成本（不只這樣）， 如果懂得產品的商業邏輯才能概算出具體的成本：\n 用什麼技術解決？ 資料的結構長怎樣？ 產品功能彼此間的影響？  RD 如果不懂這些問題，無法把真實需求轉換成技術，那就很難合理估算出開發成本，這時只能讓 PM 來壓時程了（喂）\nRD 該如何搞懂商業邏輯？ RD 要搞懂商業邏輯一定會需要這兩個能力：\n 產品服務的 Domain knowledge Domain knowledge 實踐轉換為程式碼功能（虛實整合的能力）  不過要搞懂商業邏輯，具體可以和 Domain Expert（領域專家）、PM 尋求幫助和溝通。 上述提及的兩種能力不可能兩三天一蹴可幾，需要在日常、工作專案去培養，平常可以這麼做：\n－培養抽象化的能力 培養邏輯思考必須要有抽象化能力，也就是把事物抽象化、重新賦予定義。\n訓練抽象化能力有很多種做法，舉凡寫文章、自我對話、玩魔術方塊等，但我自身的經驗和體悟是透過自己的話去描述所見所聞，進一步去定義推理、歸納。\n－和團隊建立共同語言 開發系統發現團隊對於代名詞、術語沒有一個共識，進而產生龐大的溝通門檻，這是一件很耗心力的事情，但其實和團隊建立共同語言它並不困難。\n團隊早期建立共同語言，白話溝通、文件化，就是建立共同語言的第一步了。\n而當下次在會議或小組討論，大家就能夠很清楚知道彼此論述的重點是什麼，進而降低團隊溝通的代溝。\nRef  Pic - NetWork Unknown Owner  ","permalink":"https://peterpowerfullife.com/blog/rd-must-to-know-business-logic/","tags":null,"title":"為什麼 RD 需要搞懂商業邏輯？"},{"categories":["Project Management"],"contents":" 每一位產品經理都一定會遇到時程 Delay 的問題 （很少聽到沒遇過的）， 造成延誤的原因並沒有標準答案，但都存在一些因素，所以產品經理很難預測何時能完成開發。\n在我的經驗當中，隨著時間的累積、多人參與專案及改變開發流程等，以下是我認為有助於改善產品開發預估時間的思維，這沒有絕對 *3，但可以幫助我們提高預估時程的準確性。\n －目錄  你不是在管理時程，而是在管理大家的期望 做個有同理心的產品經理 剛上任的PM怎麼估時程？ 做最壞的打算，做最好的準備  你不是在管理時程，而是在管理大家的期望 PM 不是只有把文件寫一寫出一張嘴而已，其中一個很大的責任就是激發團隊每個人的自信心，這聽起來很簡單但具體可以怎麼做呢？\n 產品開發前的任何 Meeting（不論是 Scrum Sprint, Waterfall），讓所有夥伴知道這一次產品所要開發的內容、範疇有哪些 （這裡就不細說用什麼文件來闡述），一但開發團隊知道 Scope 有多廣，就可以預期產品功能的難易度 確認每位夥伴都清楚功能的背景，為什麼需要這功能？這功能可以帶給產品什麼效益？ 時程會估算錯誤，不可能完全準確！所以如果認為這功能的複雜度＋過去經驗來評估，認定無法如期交付，那盡可能每天讓 PM 了解狀況 這東西很困難牽太多複雜的邏輯，如果現階段做不出來，PM 一定要主動幫助團隊做 Task Breakdown，至少要做到什麼程度，然後再把這項功能排到下個階段延續做下去  簡單說，一開始要給大家一個 Expected value(期望值)，這樣相對會更有信心去做手上的工作並一一完成產品的各種功能。 產品經理不是真的要管理產品發佈的日期，而是管理大家對這個產品的期望！\n做個有同理心的產品經理 如果PM 本身有技術背景，並且實際參與開發過專案，就能夠明白產品功能的複雜度，並且也理解困難度在哪裡，一開始就可以先概算每個功能所需耗費的時間，舉例來說：\n今天要做一個公司前台官網，這個官網會需要呈現的資訊有：\n 關於我們 聯絡我們 語言切換（中、英、日）  －目Task Breakdown（WBS）   UI 介面\n  首頁\n  關於我們頁面\n  聯絡我們頁面\n    API\n  聯絡我們頁面，用戶可以個人資料\n 資料庫需要去儲存使用者從官網傳送的個人資訊      最後可以依據每個人的熟練度去概算需要多少時間，心中就會有一個大概的時程。\n－目如果產品經理沒有技術背景那怎麼預估時程呢？ PM 沒有技術背景比較難預估開發時程，這確實是許多大部分 PM 遇到的難題，但可以借力使力去做這件事：\n 請 Tech Team Leader 協助 找團隊當中最資深的夥伴協助  這時候就非常考驗平常在團隊的人際關係了ＸＤ\n剛上任的PM怎麼估時程？ 如果今天是一位新加入公司的 PM，可以透過以下的方式去估算時程：\n  理解過去專案當中團隊的開發速度、時程， 同時還要知道哪些夥伴比較理解商業邏輯、和功能的應用場景，這會幫助你估算時程。\n  凡事都有第一次遇到不要怕，贏要衝，輸要縮！都還沒輸過就得親身嘗試一下，把這個責任扛起來 Run 一次 Cycle，不要預期自己能做的非常完美，但一定要落實做好每個步驟。\n  做最壞的打算，做最好的準備 隨著時間的流逝，距離產品的發佈日期越來越接近，這時候期望值就越真實，接受期望的變化就更加地困難。\nPM 要能夠在開發期間定時盤點已完成、未完成的功能，再把剩下未開發、開發到一半的功能去分類。我通常會採用 Eisenhower\u0026rsquo;s Decision matrix 方式(上圖)，最後再依據功能的完整性、重要性，區分：\n Highest High Medium Low Lowest  最後得到一個目前產品功能的 Prioritization，撥雲見日後就是火力全開專注開發 High 以上等級的任務。\n 這跟 MVP 的精神 MoSCoW 有很大的關係，也是開發產品極為重要的一環，後續我會再分享～\n －目Ref  Pic Pic - Decision matrix  ","permalink":"https://peterpowerfullife.com/blog/project-management-empathy/","tags":null,"title":"管理開發時程，做個有同理心的產品經理"},{"categories":["Product Development"],"contents":"－目錄  生活中的小故事 生命週期的定義 一個人的生命週期 產品的生命週期 成為一流的產品經理  生活中的小故事 在探討產品生命週期之前，我們可以想想手機用戶買新手機的問題：\n 上一次買 Apple iPhone 是什麼時候呢？ 買的是幾代？ 最新發表的 iPhone 是幾代？  上述這幾個問題會取決於一個手機用戶是否會購買 iPhone 手機，因為如果知道再過一個月就要發表新機了，不太可能會有人願意買比較舊款的，對吧？\n生命週期的定義 這裡我只提生命週期，並沒有提到產品的生命週期～\n其實不只是產品，任何東西都有它的生命週期，客觀概述生命週期本身的定義，那應該是：\n一個人、一件事、一隻動物或一台手機等，它們所經過的每個階段。\n而在每個階段都會有不一樣的事情發生，這其實就是指生命週期的過程。\n一個人的生命週期  受孕 出生 童年 青春期 成年 老年  我們每個人在生命週期不同的階段都會有不同的思維模式，以收信的例子來說：\n－童年 VS 成人收到信件的感受和反應     童年 成年     感受 期待、興奮、開心 焦慮   實際事件 情書或任何有趣的事情 X! 彼得銀行寄帳單來討錢         產品的生命週期  在理解產品的生命週期之前，可以再回頭想一下上述「生命週期的定義」，試著把你認為的「產品生命週期」給寫下來～\n  概念  當你開發一個產品之前，一定會有想法、概念，雖然會開始規劃，但這些都還只是「概念」階段。   開發  清楚知道自己想要打造出什麼產品、就要透過一連串的開發階段。   推動  用中文表達很難理解，其實應該要以 Launch 比較合適。這階段就是推出產品，讓使用者、用戶可以真正地去體驗你的產品。   成長  當產品推出後，透過各種行銷手法去推動、販售和宣傳產品，開始越來越多的用戶，就會進入 Growth（成長階段）， 通常成長階段會是團隊上上下下最振奮的時候，因為根據產品的性質（toB or toC）和市場熱度，很有可能在一夕之間就湧入大量用戶。   成熟  在成長一波之後，產品會趨近於「成熟穩定」的階段，這時期不太會去改動產品的各種細節，而市場上大多數的用戶也聽過、用過甚至購買過你的產品。 這個時期，產品的生命週期會停留在這一段很長的時間，甚至用戶不再使用你的產品，而這就是進入「衰退」階段。   衰退  成為一流的產品經理  文章開頭提到 iPhone 的故事，可以試著想想目前這支手機是在生命週期哪個階段呢？\n 產品的生命週期和人的生命週期一樣，當你預期、察覺和發現它正要進入衰退階段時，就勢必得做些什麼去維護、補救， 但我個人認為這太晚了，其實在產品進入成長階段時，仔細觀察產品在市場上的互動及回饋，這時就必須開始提前佈局、規劃，思考產品更多的可能性。\n在當下大環境的洪流當中，若發現產品未來可能沒有太多的可能性，或是無法帶來太多的商業價值，這時候勢必得要做 Pivot，也就是說上圖那條紅線其實是可以操控的，為產品、團隊及公司開闢一條全新的方向和道路。\n什麼時候才要做 Pivot？這必須要真正把產品開發出來，並丟到市場去驗證才會得到結果。\n在舊版 iPhone 成長的同時，產品經理和團隊內部應該要有新的產品概念，確保每一項產品不會同時處在衰退階段。\n至於該如何提前佈局和規劃又是另一個議題了，找時間再和大家分享 Metrics（指標），清楚定位產品所屬的階段。\nOther Apple Buyer’s Guide 是MacRumors 網站提供給購買者參考的指南。\n在每篇的產品週期分析都有「Recent Rumors」，可以詳細知道 Apple 產品近期狀況或是變化。\n","permalink":"https://peterpowerfullife.com/blog/product-lifecycle/","tags":null,"title":"Product Lifecycle"},{"categories":["Product Development"],"contents":" 這篇文章主要是探討數位化轉型的過程，以及開始進入軟體開發的初期階段需要留意的細節。\n內容不會提到 RD 把 Domain Knowledge（知識領域）DI（注入）到程式碼當中，這議題很深、很廣，有機會再分享。\n －目錄  數位化轉型的定義＆什麼是DDD? 數位化轉型面臨的問題 數位化轉型實務經驗（進入軟體開發的過程） 數位化轉型的小魔法（Tips）  工作經驗當中，打造新產品或是把當前既有的服務做數位化轉型，在做數位化轉型如果懂得 DDD（Domain Driven Design）， 這對產品開發有絕對的幫助，甚至可以少浪費一些時間去摸索原先的服務（流程、習慣、文化） \u0026hellip;\n數位化轉型的定義＆什麼是DDD?  愛你既有的產業、認識你既有的環境，在數位化轉型的過程中，不僅是 PM, 更是每位夥伴都該有的共識。\n 數位化轉型的定義就是把既有的產品，轉型以數位科技服務的過程。 舉例來說，火車票只能在火車售票台購買實體票券，而透過數位化轉型就能使用購買車票的服務軟體購買電子票券。\nDomain Knowledge（知識領域），它是數位轉型所圍繞的核心， 在既有的產品服務，一旦開始要做轉型會需要知道 Key Point(問題點)以及 Solution(解決方式)。 在一間公司，尤其是PM, RD若不懂這一塊的 Domain KnoHow（知識問題），那最終開發出來的產品會有很多問題，甚至是無法取代原先的服務方式。\nDomain Driven Design 是基於領域專業知識來解決複雜商業邏輯的軟體開發方法論。\n－DDD注重以下三個重點  跟 Domain Expert（專業領域專家） 合作並且定義出 Domain 的範圍及相關解決的方案。 切分 Domain（領域）為多個 SubDomain（子領域），並專注在核心SubDomain（子領域）。 透過一系列設計模式，把 Domain Knowledge（知識領域）注入到 Model（程式模型）中（本篇不探討）。  數位化轉型面臨的問題 在導入數位轉型也不是一件容易的事情，因為會牽扯到幾個問題：\n 原有的產品服務是 toB 或 toC 既有團隊、公司組織的人事如何安排 需不需要雇用專業人士或請外包團隊協助開發數位系統  上述是數位轉型比較常見的問題，但在我經歷的產品開發過程，問題不單單只有這些 \u0026hellip;\n每個產業注重的面向、優先順序都不同，在極少與顧客互動的產業中，組織可能會先轉型營運流程的層面，透過結合數位科技簡化組織的管理以及部門與部門間的業務，導入新科技讓工程流程變得更有效率等。\n在金融、觀光、媒體產業等，組織可能會把重心放在價值主張，從根本層面的探討所提供的產品和服務，像媒體業的公司就會問出「我們是一個販售財經期刊的公司？還是一個提供顧客充足資訊與解析，讓顧客更好的洞悉市場生態，並做更理性且智慧的選擇的企業？」如果答案是後者，業者可能就會將更多的重心放在傳遞（Delivery）與顧客體驗的層面上。\n在數位領域中更成熟的組織，不僅轉型了其營運流程以及價值主張; 成為極為靈敏且以顧客體驗為核心的企業，數位成熟的組織更是建立了一整個數位生態，並從能力、文化、與整個生態系統上驅動轉型，成為一個不斷去挑戰、測試、並且極為靈敏的轉型組織。\n而像是麥肯錫、IBM 等組織常提起的數位再造（Digital Reinvention）則是一個組織核心價值的根本轉化。也是前面提到的，從根本層面探討目前提供的產品與服務，並重新定義價值主張。在這個階段，組織必須要徹底審視＆洞悉 User Journey（顧客旅程），並定義出需要被優化或是新增的環節點，再建立明確的策略。\n數位化轉型實務經驗（進入軟體開發的過程） 以我在 Healthcare（醫療）領域，幫助醫院做數位轉型，把傳統的紙本病例轉變為電子病歷的經驗，進入軟體開發階段之前，就需要跟原有服務的專業人士（院長、護理師）做需求訪談，以便確定需求，最後需求確定完再整理好 Spec，需要給服務單位知道產品開發的範圍、時程，也同時讓軟體開發單位了解其中的 Domain Knowledge（知識領域）。\n 這裡也建議，若客戶允許的話，安排長時間去觀察原先的服務流程， 因為有些「細節」是只有使用者才知道，而這也是站在使用者角度去思考產品的易用性，而非主觀的認知，這是成為一個傑出的 PM 必須要學會的事情。\n 當 PM 把整理好的 Spec 交付給軟體開發單位，通常 PM 會開一份比較完整、具體的 PRD（後續再分享細節）給開發團隊，這份 PRD 會有：\n User Story 完整描述功能的背景 實務上的 Business Logic（業務邏輯） UI相關文件（Prototype、WireFrame、Mockup）  而開發團隊會根據 UserStory、Business Logic和 UI 去拆分 Task、Subtask，Task 會是一個具體的執行任務，Ex：UI Layout、Fetch API等各種待執行的任務。\n 開發團隊在實作階段，通常一但下手開始開發就停不下來了， 所以 PM 一定要交付具體明確的 PRD 以便團隊開發出預期的產品且實際解決使用者的問題。\n 數位化轉型的小魔法（Tips） 如果你還不知道怎麼開始的話，有幾個方式提供給你參考：\n 長時間觀察客戶的操作流程 每天問使用者三個問題（Domain KnoHow、使用經驗等） 每個月和使用者做 User research（深層理解用戶行為） 定期參加相關產業活動同時觀察 Competitors  Ref  Wiki Domain-Driven Design: What is it and how do you use it? OOSGA  ","permalink":"https://peterpowerfullife.com/blog/domain-driven-design-01/","tags":null,"title":"數位化轉型不可不知 Domain Driven Design"},{"categories":["Product Development"],"contents":" 本身不是專業設計師，僅和設計師合作所學到的經驗來做記錄和分享，若有得罪之處和誤解，請見諒～\n －目錄  什麼是 Design System？ Design System 的優缺點？ 為什麼打造軟體產品前最好先搞懂 Design System？ 如何建構 Design System？ 重頭做一次，絕對不要再發生這些事  什麼是 Design System？ Design System 其實就像台灣國小生的生字簿：\n 筆劃（設計風格規範） 部首（重複使用的介面設計元素(UI element)） 分類（重複使用的互動設計元素(像是檔案管理)）, Ex: 方向（上下左右）  Design System 就是一種規範、標準，只要遵循它的規則基本上不太會出錯。 它在任何領域無所不在，但不只是視覺介面設計的風格規範而已，更是連貫點、線、面的體現出產品本身，以及產品開發階段開發者所遵循的設計語言。\nDesign System 的優缺點？ －優點  因為有一個規範可循，可以減少設計和技術的溝通成本（即使團隊架構逐漸龐大、產品跨國開發） 一致性的設計語言，專注在用戶需求、產品本身，以利於產品開發。  －缺點  限制創意 建構初期時間壓力大，需要在短時間內思考非常地深遠，以便後續產品開發、重構  其實很有趣，雖說它減少產品開發中的溝通成本，卻也在建構初期耗費設計上的時間、心力（請給公司設計部門一個讚）\n為什麼打造軟體產品前最好先搞懂 Design System？ 如果以軟體科技領域來說，Design System 可能會被歸類為設計部門的職責， 但我認為只要是開發自有產品，而不是一般接案、代工公司，那基本上公司從上到下都要知道 Design System，因為它會在產品投入開發後發揮強大的影響力！甚至在跨產品團隊逐漸擴大成為一種標誌性的識別。\n－身份不同會有不同的體悟  對 Designer 而言，Design System 是一種復用的元件集合。 對 RD 而言，Component 是遵循 Design System 所開發出的 UI 復用元件。  一旦 Design System 建立完成後，RD 就能夠遵循 Design System 開發出團隊所需要的共用元件， 但在開發共用元件之前，如果 RD 不知道 Design System 就埋頭開始開發，那麼在不懂的情況下所開發出的元件，可能會造成視覺落差、破壞中長期產品的標誌性識別。\n這也是為什麼打造軟體產品之前，最好先搞懂 Design System 的原因之一。\n如何建構 Design System？ 建構 Design System 需要同時思考到產品本身、產品標誌性識別甚至是 CIS，一但有這些共識，就會開始以下步驟：\n  盤點 Visual Audit (視覺審核)\n 確認元素和品質    建立 Visual Design Language(視覺設計共同語言)\n 顏色 尺寸 字體    打造 UI Library\n  Documentation（文件化）\n 標準建立完的最後一步就是文件化以利後續溝通，至於用什麼方式呈現就單看團隊的決定。    UI Library 建構的工具百百種，這裡不一一紀錄，可以參考：\n The Top 89 Design Systems Open Source Projects Figma Community Flexport\u0026rsquo;s design system  重頭做一次，絕對不要再發生這些事 設計團隊很用心地完成 Design System、前端工程部門也遵照設計規則去開發出內部的 Component Library，可是做完之後我們遇到了以下問題。\n－若有多個專案和需求，根本來不及提供給需求方 如果今天只有一個產品線\u0008，設計師和工程師還可以一步一步地設計、開發，但今天若有多個產品線，所需要的 Component 都不一樣那根本就沒辦法應付\u0008。\n來不及提供怎麼辦？不做了嗎？當然不是！ 開發部門先捨棄設計規則，一但設計團隊把 Design system 釋出後再無縫接軌替換 Component。\n在這階段 PM 需要知道有哪些 Component 是沒有遵照 Design system，因為同時設計和開發的情況下 Component 會有多個版本，一不小心這個 Component 在 A 產品、B 產品就會長不一樣。\n－必須有專責的開發部門、窗口 在團隊當中人員的調動都是很正常的，可是如果原本負責公司內部 Component Library 的 RD 有任何異動，這時候誰要維護、開發？\n為了避免這種事情發生，團隊一開始就要明定由哪個 PM、團隊負責，這非常重要！\n它也是屬於產品的一部分，由 Component 所疊加上去的功能，是最貼近使用者、客戶的產品\u0008\u0008\u0008。\nRef  Wiki - Design system inside-design - guide-to-design-systems Pic-01 Pic-03  ","permalink":"https://peterpowerfullife.com/blog/design-system/","tags":null,"title":"開發軟體產品前請先搞懂 Design System"},{"categories":["Product Development"],"contents":"－目錄  什麼是 Prototype? 為什麼需要 Prototype? 模擬 Scenario Visualization High \u0026amp; Low Fidelity Prototype Usability Testing（易用性測試） 最後的最後  什麼是 Prototype? 從英翻中的字義上來看，通常會理解為「原型」、「雛型」。 不過在科技軟體領域，通常不會用中文來表達，一般都會說 Prototype，因為用「英文」才不會失去它的真實含義。\nPrototype 它是產品的初步樣貌，至於產品的初步樣貌每個人、團隊有不同的定義，這應該在 Product RoadMap 階段就要定義好。\n為什麼需要 Prototype?  驗證產品未來的可行性 開發成本低，對新創團隊來說可以省下很多資源 產品有初步的 Prototype 才可以向世人、市場去 Demo，得到真實的回饋  模擬 Scenario PM 一定要會 Prototype 這項技能，因為當你遇到產品的這些狀況：\n 開發新產品 現有產品有新的需求進來  單純把邏輯寫成文件（PRD），可能還是會漏掉一些細節，也會有一些誤差存在。\nVisualization PM 在說明需求時，團隊如果還沒有建立一個具體共識那每個人就會想到不同的服務和功能。\n 一顆圓形的水果\n你會想到什麼？蘋果？橘子？柳丁？龍眼 \u0026hellip;\n 如果 PM 會 Prototype 這項技能，那就能夠透過Prototype 和大家做一個視覺化溝通，這樣就可以確保：\n 設計和開發團隊後續能開發出產品所需要的樣貌、功能 你爽、我爽、大家都爽，最怕沒有共識往錯誤的方向開發，最後大家還要重做 （自建Meteo Fall Development(隕石式開發)？） 團隊能夠開發出產品，且符合市場使用者的期待  High \u0026amp; Low Fidelity Prototype Prototype 可分為 High \u0026amp; Low fidelity ：\n Low Fidelity Prototype（低擬真） High Fidelity Prototype（高擬真）  Low Fidelity Prototype（低擬真）\n開發產品的樣貌、雛形之前，一開始會先從低擬真去開發，原因：\n 省時 省錢 讓團隊每個人快速進入狀況，我把它定義為 Product Zone（產品境界），可理解成一種 Flow（心流） 藉以理解產品的設計、要解決的真實問題。  High Fidelity Prototype（高擬真）\n至於高擬真通常比較少用，因為這種方式的缺點：\n 耗時 耗工（做高擬真不如直接進入開發）   什麼情況會用到高擬真呢？以下是我個人的經驗和見解：\n  安全性及金流相關服務 團隊的產品涉及到硬體開發，需要 ID(工業設計)，因為成本高方向錯就難回頭了  Usability Testing（易用性測試）  其實這個 Block 範疇很大、很廣，日後有機會再和大家做細部分享，但 Prototype 可以做初步的 Usability Testing。\n －Definition 簡單理解一下 Usability Testing 的定義吧。\nUsability Testing 是透過使用者的真實體驗來評估產品是否滿足用戶需求的方法，它反應真實用戶的使用經驗。 它可以幫助產品（服務）更加貼近用戶的習慣，產品做出來，可以用但不代表貼近用戶的真實需求，所以才需要做 Usability Testing。\n－閉上眼睛想像一下 試想一下，當團隊耗時了一個月完成開發高鐵訂票軟體系統，結果就在上線那天整個炸掉不能訂票，這時是不是完蛋了？所以產品在 Testing \u0026amp; Deployment 之前，若有 Prototype 就可以提前預見產品會遇到的問題、產品用起來的爽度等。\n以上種種細節，透過 Prototype 和團隊討論，就是一個簡單的Usability Testing（易用性測試）。\n－最後的最後 最後，關於 Prototype 的相關工具有百百種，這裡就不紀錄和分享了，\u0008PM 在Prototype 出來之前，一定是比團隊任何人還要早進入 Product Zone，如果有產品的初步樣貌，那麼工具只是一種實踐的手段罷了。\nRef  Wiki - Usability testing Wiki - Prototype Pic  ","permalink":"https://peterpowerfullife.com/blog/prototype/","tags":null,"title":"Prototype Mystery"},{"categories":["Product Development"],"contents":"－目錄  紀錄這篇文章的契機 什麼是產品？ 為什麼要開發產品？ 需要哪些資源才能做出一個產品？ 要怎麼找到人開發產品？ 怎麼拿到錢來開發產品？ 組成產品的三個要素 商業領域的職務 產品經理要做哪些事? 產品經理的日常（大方向） 產品經理是商業策略的角色之一  紀錄這篇文章的契機 在台灣，高中、大學的科系可能有數學系、資工系、法律系，但讀者有聽過產品管理系、產品學系嗎？ 現在可能有，但在我學涯階段是沒有產品管理類似的科系，有的話也只有歐美國家才有這種科系。 這也是為什麼產品管理、開發困難的地方之一，因為你並沒有一個途徑可循。\n另外侄子姪女漸漸長大了，有時候問到工作內容，再紀錄「帶小朋友認識產品經理的世界」這篇文章之前，想先透過這篇文章幫助更多人大方向理解產品經理的工作。\n什麼是產品？ 只要是人們使用的東西（動物或某個群體也算），包含軟、硬體，甚至還有非常多品項、種類都是產品的一種。\n它們都有一個共通點就是 「被使用的產品」！\n為什麼要開發產品？ 產品是製造出來滿足人們、或某個群體的需求或慾望。\n簡單說就是，有些人需要什麼，而勢必有些人就得要去做些什麼。\n想想生活上的水壺、課程、手錶等，這些都是因為需求而產生的。\n需要哪些資源才能做出一個產品？  這裡我只討論產品本身，後續有機會分享「帶小朋友認識產品經理的世界」這篇文章，我會詳述產品和商品的差異。\n 打造一個產品真的非常難、也非常耗費資源！\n但不管怎麼樣，有一項資源是不論要製造什麼產品都需要的，那就是「人」！\n因為，我們總需要人來做些什麼才能做出一個產品 （先不討論機器人這件事，因為機器人在前期也是需要人來規劃、開發、管理）\n要怎麼找到人開發產品？ 我們需要人來開發產品，那要怎麼找到這些人來做產品呢？\n找人幫你做東西？是不是相對要提供什麼價值呢？錢？股份？經驗累積？\n大部分，都是透過錢找到人來開發產品。\n怎麼拿到錢來開發產品？ 簡單說，賣東西就可以賺錢了！真的！\n但在那之前，勢必要有一筆資金投入資源開發產品， 所以這也是許多創業者的壓力來源，要找各種管道籌備資金 （這裡不詳細說明怕偏離主題）\n產品賣出去拿到錢就可以投入更多資源開發、生產更多的產品。\n組成產品的三個要素  組成產品的三個要素（產品不分軟體、硬體，甚至是飲料等）飲料跟科技也是有關的，它需要機器的相關製程\n更生活化的例子，以 iPhone 來舉例，其實會需要以下這些角色來開發 iPhone 這個產品。\n －科技  軟、硬體工程師  －設計 產品的樣貌（顏色、形狀）、產品的使用體驗（流程、功能、解決使用者哪些痛點）\niPhone 手機看起來怎樣？用起來怎樣？\n 產品設計師 工業設計師  －？ 最後一個問號其實就是商業！商業行為是支撐產品的關鍵要素之一！\n這也是有些產品經理本身不理解、似懂非懂的一個環節，但產品經理其實跟商業有非常大的關係！\n商業領域的職務 哪些關鍵人物為商業領域工作呢？\n Business Development Sales Marketing CEO  以上這些職務會需要去幫助公司持續在市場運作。\n產品經理要做哪些事？  上面那張圖完整說明了產品經理的工作內容。\n 產品經理的工作，涉及到使用者體驗、技術、商業以及溝通。 所以說這職務真的非常不容易！不僅僅是開發產品而已，所以需要非常大的學習力和拼勁，才有可能把產品推上市！\n－產品經理的日常（大方向） 以一個軟體領域的產品經理角度來看，不細述細節，其大方向包含：\n 和 RD 討論我們可以做出什麼產品，要用什麼技術等 和 Designer 討論使用者可能會希望如何體驗產品 和 Marketing 溝通如何曝光、營運、銷售產品  以上這幾點都做到，這也就促成了一個商業行為，產品也就成功了！（通常是這樣，但沒那麼簡單和容易）\n產品經理是商業策略的角色之一 理解完上述，其實可以知道產品經理就是了解科技、設計以及商業行為運作，所以產品經理也是屬於商業策略的角色之一！\n例如：很多人喜歡 Rolex，所以 Rolex 就請人設計、生產、製造，賺錢來支付薪水給員工，不段循環形成更多的商業活動。 賣東西給別人就是在經營生意，因為商業是產品不可分割的一部分。\n如果沒有商業，也就沒有產品！因為產品是透過商業來支撐的，產品因商業而存在， 對於產品管理，這是一個非常重要的核心思想！這也是能否不斷成長的關鍵之一！\nRef  Pic - Martin Eriksson（mind the product）  ","permalink":"https://peterpowerfullife.com/blog/what-is-product-manager/","tags":null,"title":"讓我帶你認識產品經理的世界"}]